cscope 15 $HOME/working/libstpool-git/libstpool -q 0000001894 0000324204
	@examples/demo-group.c

1 
	~<°dio.h
>

2 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
_WIN64
)

3 
	~<Wödows.h
>

4 
	#m¶ìp
 
SÀï


	)

5 #ifde‡
_DEBUG


6 #ifde‡
_WIN64


7 #¥agm®
commít
(
lib
, "../x64/Debug/libmsglog.lib")

8 #¥agm®
commít
(
lib
, "../x64/Debug/libstpool.lib")

10 #¥agm®
commít
(
lib
, "../Debug/libmsglog.lib")

11 #¥agm®
commít
(
lib
, "../Debug/libstpool.lib")

14 #ifde‡
_WIN64


15 #¥agm®
commít
(
lib
, "../x64/Release/libmsglog.lib")

16 #¥agm®
commít
(
lib
, "../x64/Release/libstpool.lib")

18 #¥agm®
commít
(
lib
, "../Release/libmsglog.lib")

19 #¥agm®
commít
(
lib
, "../Release/libstpool.lib")

24 
	~<°döt.h
>

25 
	~<uni°d.h
>

26 
	#m¶ìp
(
x
Ë
	`u¶ìp
(x * 1000)

	)

32 
	~"msglog.h
"

34 
	~"°poﬁ_group.h
"

36 
	$time_c⁄sumög_èsk_run
(
°èsk
 *
±sk
)

38 
	`m¶ìp
(()
±sk
->
èsk_¨g
);

43 
	`°poﬁ_èsk_queue
(
±sk
);

44 
	}
}

46 
	$Á°_èsk_run1
(
°èsk
 *
±sk
)

48 
	`m¶ìp
(15);

53 
	`°poﬁ_èsk_queue
(
±sk
);

54 
	}
}

56 
	$Á°_èsk_run2
(
°èsk
 *
±sk
)

58 
	`m¶ìp
(30);

63 
	`°poﬁ_èsk_queue
(
±sk
);

64 
	}
}

66 
	$maö
()

68 
eCAPs
;

69 
idx
, 
exe_func_timeout
;

70 
gid_¶ow
, 
gid_Á°1
, 
gid_Á°2
;

71 
gscheduÀr_©å
 
©å
;

72 
°poﬁ_t
 *
poﬁ
;

77 c⁄° *
míåy
[] = {"ScheduÀr", "thªad", 
NULL
};

86 
	`MSG_log_£t_Àvñ
(
LOG_DEBUG
);

88 
	`MSG_log_mfûãr_add_íåy
(
míåy
, 
NULL
);

89 
	`MSG_log_mfûãr_£t_ty≥
(
eFT_disˇrd
);

92 
eCAPs
 = 
eCAP_F_GROUP
|
eCAP_F_ROUTINE
|
eCAP_F_GROUP_SUSPEND
|
eCAP_F_DISABLEQ
|
eCAP_F_WAIT_ALL
;

97 
poﬁ
 = 
	`°poﬁ_¸óã
("share_pool",

98 
eCAPs
,

108 
©å
.
limô_∑øŒe_èsks
 = 2;

109 
©å
.
ª˚ive_bíifôs
 = 0;

110 
gid_¶ow
 = 
	`°poﬁ_group_¸óã
(
poﬁ
, "g_¶ow", &
©å
, 1, 1);

115 
idx
=0; idx<10; idx++) {

116 
exe_func_timeout
 = 1000 * (
idx
 % 5 + 1);

117 
	`°poﬁ_group_add_routöe
(
poﬁ
, 
gid_¶ow
, "¶ow_èsk", 
time_c⁄sumög_èsk_run
, 
NULL
, (*)
exe_func_timeout
, NULL);

119 
	`puts
(

120 
	`°poﬁ_scheduÀr_m≠_dump
(
poﬁ
)

123 
	`puts
("\nprintány keyÅo scheduleÅhe slowÅask ...\n");

124 
	`gëch¨
();

129 
	`°poﬁ_group_ªsume
(
poﬁ
, 
gid_¶ow
);

131 
	`puts
("print qÅo goÇextÅest ...\n");

132 'q' !
	`gëch¨
())

133 
	`puts
(

134 
	`°poﬁ_scheduÀr_m≠_dump
(
poﬁ
)

139 
gid_Á°1
 = 
	`°poﬁ_group_¸óã
(
poﬁ
, "g_Á°1", 
NULL
, 1, 1);

140 
gid_Á°2
 = 
	`°poﬁ_group_¸óã
(
poﬁ
, "g_Á°2", 
NULL
, 1, 1);

145 
idx
=0; idx<10; idx++) {

146 
	`°poﬁ_group_add_routöe
(
poﬁ
, 
gid_Á°1
, "Á°1_èsk", 
Á°_èsk_run1
, 
NULL
, NULL, NULL);

147 
	`°poﬁ_group_add_routöe
(
poﬁ
, 
gid_Á°2
, "Á°2_èsk", 
Á°_èsk_run2
, 
NULL
, NULL, NULL);

153 
	`puts
(

154 
	`°poﬁ_scheduÀr_m≠_dump
(
poﬁ
)

160 
	`gëch¨
();

161 
	`puts
("printány keyÅoÑesumeÅhe fast groups ...\n");

162 
	`°poﬁ_group_ªsume_Æl
(
poﬁ
);

164 
	`puts
("print qÅo goÇextÅest ...\n");

165 'q' !
	`gëch¨
())

166 
	`puts
(

167 
	`°poﬁ_scheduÀr_m≠_dump
(
poﬁ
)

173 
	`gëch¨
();

175 
	`puts
("printány keyÅoÑemoveállÅasks ...\n");

176 
	`°poﬁ_m¨k_Æl
(
poﬁ
, 
TASK_VMARK_REMOVE
|
TASK_VMARK_DISABLE_QUEUE
);

177 
	`°poﬁ_waô_Æl
(
poﬁ
, -1);

182 
	`puts
(

183 
	`°poﬁ_scheduÀr_m≠_dump
(
poﬁ
)

195 
	`gëch¨
();

196 
	`puts
("printány keyÅoÑeleaseÅheÖool ...\n");

197 
	`°poﬁ_ªÀa£
(
poﬁ
);

199 
	`puts
("printány keyÅoÉxit ...\n");

200 
	`gëch¨
();

203 
	}
}

	@examples/demo-pri.c

3 
	~<°dio.h
>

5 
	~"°poﬁ.h
"

7 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
_WIN64
)

8 
	~<wödows.h
>

9 
	#m¶ìp
 
SÀï


	)

10 #ifde‡
_DEBUG


11 #ifde‡
_WIN64


12 #¥agm®
commít
(
lib
, "../x64/Debug/libmsglog.lib")

13 #¥agm®
commít
(
lib
, "../x64/Debug/libstpool.lib")

15 #¥agm®
commít
(
lib
, "../Debug/libmsglog.lib")

16 #¥agm®
commít
(
lib
, "../Debug/libstpool.lib")

19 #ifde‡
_WIN64


20 #¥agm®
commít
(
lib
, "../x64/Release/libmsglog.lib")

21 #¥agm®
commít
(
lib
, "../x64/Release/libstpool.lib")

23 #¥agm®
commít
(
lib
, "../Release/libmsglog.lib")

24 #¥agm®
commít
(
lib
, "../Release/libstpool.lib")

28 
	~<uni°d.h
>

29 
	#m¶ìp
(
ms
Ë
	`u¶ìp
(m†* 1000)

	)

36 
	$èsk_run
(
°èsk
 *
±ask
)

38 
e
;

40 
	`¥ötf
("\n\nRu¿%s\n", 
±ask
->
èsk_«me
);

43 
	`m¶ìp
(1000);

46 i‡((
e
 = 
	`°poﬁ_èsk_queue
(
±ask
)))

47 
	`Ârötf
(
°dîr
, "***reschedule(%s): '%s'\n",

48 
±ask
->
èsk_«me
, 
	`°poﬁ_°ªº‹
(
e
));

49 
	}
}

51 
	$èsk_îr_h™dÀr
(
°èsk
 *
±ask
, 
ªas⁄s
)

53 
	`Ârötf
(
°dîr
, "**ERR: '%s' (%lx)\n",

54 
±ask
->
èsk_«me
, 
ªas⁄s
);

55 
	}
}

57 
	$maö
()

59 
°poﬁ_t
 *
poﬁ
;

60 
sch©å
 
©å
[] = {

61 {0, 0, 
ï_SCHE_BACK
},

62 {0, 10, 
ï_SCHE_BACK
},

63 {0, 40, 
ï_SCHE_BACK
},

64 {0, 90, 
ï_SCHE_TOP
},

66 
eCAPs
 = 
eCAP_F_SUSPEND
|
eCAP_F_ROUTINE
|
eCAP_F_PRIORITY
|
eCAP_F_THROTTLE
|
eCAP_F_WAIT_ALL
;

71 
poﬁ
 = 
	`°poﬁ_¸óã
("mypoﬁ", 
eCAPs
, 1, 0, 1, 1);

76 
	`°poﬁ_add_routöe
(
poﬁ
, "zîo_èsk", 
èsk_run
, 
èsk_îr_h™dÀr
, 
NULL
, &
©å
[0]);

77 
	`°poﬁ_add_routöe
(
poﬁ
, "low_èsk", 
èsk_run
, 
èsk_îr_h™dÀr
, 
NULL
, &
©å
[1]);

78 
	`°poﬁ_add_routöe
(
poﬁ
, "middÀ_èsk", 
èsk_run
, 
èsk_îr_h™dÀr
, 
NULL
, &
©å
[2]);

79 
	`°poﬁ_add_routöe
(
poﬁ
, "hight_èsk", 
èsk_run
, 
èsk_îr_h™dÀr
, 
NULL
, &
©å
[3]);

81 
	`puts
("Printány keyÅoÑesumeÅheÖool ...\n");

82 
	`gëch¨
();

87 
	`°poﬁ_ªsume
(
poﬁ
);

88 
	`puts
("Printány keyÅoÉxitÅheÅest ...\n");

89 
	`gëch¨
();

94 
	`°poﬁ_thrŸée_íabÀ
(
poﬁ
, 1);

99 
	`°poﬁ_ªmove_Æl
(
poﬁ
, 0);

104 
	`°poﬁ_waô_Æl
(
poﬁ
, -1);

105 
	`puts
("AllÅasks have beenÑemoved completely.\n");

106 
	`gëch¨
();

111 
	`°poﬁ_ªÀa£
(
poﬁ
);

113 
	`¥ötf
("printány keyÅoÉxit.\n");

114 
	`gëch¨
();

116 
	}
}

	@examples/demo-sche.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

6 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
_WIN64
)

7 #ifde‡
_DEBUG


8 #ifde‡
_WIN64


9 #¥agm®
commít
(
lib
, "../x64/Debug/libmsglog.lib")

10 #¥agm®
commít
(
lib
, "../x64/Debug/libstpool.lib")

12 #¥agm®
commít
(
lib
, "../Debug/libmsglog.lib")

13 #¥agm®
commít
(
lib
, "../Debug/libstpool.lib")

16 #ifde‡
_WIN64


17 #¥agm®
commít
(
lib
, "../x64/Release/libmsglog.lib")

18 #¥agm®
commít
(
lib
, "../x64/Release/libstpool.lib")

20 #¥agm®
commít
(
lib
, "../Release/libmsglog.lib")

21 #¥agm®
commít
(
lib
, "../Release/libstpool.lib")

26 
	~<°döt.h
>

27 
	~<sys/time.h
>

29 
	~"°poﬁ.h
"

34 
us_°¨t
();

35 
us_íd
();

41 
	$do_w‹k
(*
vÆ
)

43 *
vÆ
 += 100;

44 *
vÆ
 *= 0.371;

45 
	}
}

47 
	$èsk_run
(
°èsk
 *
±sk
)

49 
size_t
 
i
, 
j
, 
£d
 = 20;

51 
i
=0; i<
£d
; i++)

52 
j
=0; j<
£d
; j++)

53 
	`do_w‹k
((*)
±sk
->
èsk_¨g
);

59 
	}
}

61 
	$maö
()

63 
time_t
 
now
;

64 
i
, 
times
;

65 
sum
, *
¨g
;

66 
°poﬁ_t
 *
poﬁ
;

69 
poﬁ
 = 
	`°poﬁ_¸óã
("mypool",

70 
eCAP_F_DYNAMIC
|
eCAP_F_SUSPEND
|
eCAP_F_ROUTINE
|
eCAP_F_WAIT_ALL
,

79 
times
 = 90000;

80 
¨g
 = (*)
	`mÆloc
(
times
 * ());

81 
i
=0; i<
times
; i++) {

86 i‡(
i
 % 4000 =0 || (ò+ 1Ë==
times
) {

87 
	`¥ötf
("\rLﬂdög ... %.2f%% ", ()
i
 * 100/ 
times
);

88 
	`fÊush
(
°dout
);

90 
¨g
[
i
] = i;

91 
	`°poﬁ_add_routöe
(
poﬁ
, "sche", 
èsk_run
, 
NULL
, (*)&
¨g
[
i
], NULL);

93 
	`¥ötf
("\nAfter havingÉxecuted @stpool_add_routine for %dÅimes:\n"

95 
times
, 
	`°poﬁ_°©_¥öt
(
poﬁ
));

101 
us
;

106 
	`°poﬁ_ªsume
(
poﬁ
);

108 
	`us_°¨t
();

109 
	`°poﬁ_waô_Æl
(
poﬁ
, -1);

110 
us
 = 
	`us_íd
();

112 
	`¥ötf
("Te° co°†%.2‡m†\n", ()
us
 / 1000);

118 
i
=0, 
sum
=0; i<
times
; i++)

119 
sum
 +
¨g
[
i
];

120 
	`‰ì
(
¨g
);

122 
now
 = 
	`time
(
NULL
);

123 
	`¥ötf
("--OK. finished. <sum: %d> %s\n%s\n",

124 
sum
, 
	`˘ime
(&
now
), 
	`°poﬁ_°©_¥öt
(
poﬁ
));

131 
c
;

133 'q' !
	`gëch¨
()) {

134 
i
=0; i<40; i++)

135 
	`°poﬁ_add_routöe
(
poﬁ
, "debug", 
èsk_run
, 
NULL
, &
sum
, NULL);

141 (
c
=
	`gëch¨
()Ë&& c !'\n' && c !
EOF
)

145 
	`gëch¨
();

149 
	`¥ötf
("Shut downÅheÖoolÇow.\n");

150 
	`°poﬁ_ªÀa£
(
poﬁ
);

151 
	`gëch¨
();

154 
	}
}

	@examples/demo.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~"°poﬁ.h
"

7 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
_WIN64
)

8 
	~<Wödows.h
>

9 
	#m¶ìp
 
SÀï


	)

10 #ifde‡
_DEBUG


11 #ifde‡
_WIN64


12 #¥agm®
commít
(
lib
, "../x64/Debug/libmsglog.lib")

13 #¥agm®
commít
(
lib
, "../x64/Debug/libstpool.lib")

15 #¥agm®
commít
(
lib
, "../Debug/libmsglog.lib")

16 #¥agm®
commít
(
lib
, "../Debug/libstpool.lib")

19 #ifde‡
_WIN64


20 #¥agm®
commít
(
lib
, "../x64/Release/libmsglog.lib")

21 #¥agm®
commít
(
lib
, "../x64/Release/libstpool.lib")

23 #¥agm®
commít
(
lib
, "../Release/libmsglog.lib")

24 #¥agm®
commít
(
lib
, "../Release/libstpool.lib")

29 
	~<°döt.h
>

30 
	~<uni°d.h
>

31 
	#m¶ìp
(
x
Ë
	`u¶ìp
(x * 1000)

	)

38 
	$èsk_run
(
°èsk
 *
±sk
) {

40 
	`¥ötf
("%†...:%d\n", 
±sk
->
èsk_«me
, *(*Ìtsk->
èsk_¨g
);

42 ++ *(*)
±sk
->
èsk_¨g
;

43 
	}
}

45 
	$èsk_îr_h™dÀr
(
°èsk
 *
±sk
, 
ªas⁄s
) {

47 
	`¥ötf
("***Err: %s hasÇot beenÉxecuted: 0x%lx\n",

48 
±sk
->
èsk_«me
, 
ªas⁄s
);

49 
	}
}

51 
	$èsk_ªscheduÀ
(
°èsk
 *
±sk
) {

52 
e
;

55 
	`¥ötf
("%†...:%d\n", 
±sk
->
èsk_«me
, *(*Ìtsk->
èsk_¨g
);

58 i‡(
	`°poﬁ_èsk_gë_u£rÊags
(
±sk
)) {

59 
	`m¶ìp
(1500);

62 i‡((
e
 = 
	`°poﬁ_èsk_queue
(
±sk
)))

63 
	`¥ötf
("***Eº: queue(%d)\n", 
e
);

65 
	}
}

67 
	$maö
()

69 
°poﬁ_t
 *
poﬁ
;

70 
i
, 
îr‹
, 
c
 = 0;

71 
sch©å
 
©å
 = {0, 1, 
ï_SCHE_TOP
};

72 
°èsk
 *
±sk
;

74 
eCAPs
 = 
eCAP_F_DYNAMIC
|
eCAP_F_SUSPEND
|
eCAP_F_THROTTLE
|
eCAP_F_ROUTINE
|

75 
eCAP_F_DISABLEQ
|
eCAP_F_PRIORITY
|
eCAP_F_WAIT_ALL
;

78 
	`£tbuf
(
°dout
, 0);

81 
poﬁ
 = 
	`°poﬁ_¸óã
("mypool",

82 
eCAPs
,

88 i‡(!
poﬁ
)

89 
	`ab‹t
();

92 
	`¥ötf
("@°poﬁ_¸óã(20, 0, 0, 10)\n%s\n", 
	`°poﬁ_°©_¥öt
(
poﬁ
));

97 
	`¥ötf
("\nPressány keyÅoÅestÅhe @stpool_adjust(300, 4) ....\n");

98 
	`gëch¨
();

99 
	`°poﬁ_adju°_abs
(
poﬁ
, 300, 4);

100 
	`¥ötf
("@°poﬁ_adju°_abs’oﬁ, 300, 4)\n%s\n", 
	`°poﬁ_°©_¥öt
(
poﬁ
));

103 
	`¥ötf
("\nPressány keyÅoÅestÅhe @stpool_adjust(-280, -4) ....\n");

104 
	`gëch¨
();

105 
	`°poﬁ_adju°
(
poﬁ
, -280, -4);

106 
	`¥ötf
("@°poﬁ_adju°’oﬁ, -280, -4)\n%s\n", 
	`°poﬁ_°©_¥öt
(
poﬁ
));

111 
	`¥ötf
("\nPressány keyÅoÅestÑeschedulingÅask. <thenÖress keyÅo stopÅesting.>\n");

112 
	`gëch¨
();

115 
±sk
 = 
	`°poﬁ_èsk_√w
(
NULL
, "ã°-ªscheduÀ", 
èsk_ªscheduÀ
, NULL, &
c
);

118 
îr‹
 = 
	`°poﬁ_èsk_£t_p
(
±sk
, 
poﬁ
);

119 i‡(
îr‹
)

120 
	`¥ötf
("***Eº: %d(%s). (åyÉCAP_F_CUSTOM_TASK)\n", 
îr‹
, 
	`°poﬁ_°ªº‹
(error));

122 
	`°poﬁ_èsk_£t_u£rÊags
(
±sk
, 0x1);

123 
	`°poﬁ_èsk_queue
(
±sk
);

125 
	`gëch¨
();

127 
	`°poﬁ_èsk_£t_u£rÊags
(
±sk
, 0);

128 
	`°poﬁ_èsk_waô
(
±sk
, -1);

130 
	`°poﬁ_èsk_dñëe
(
±sk
);

135 
	`¥ötf
("\nPressány keyÅoÅestÅheÅhrottle ....\n");

136 
	`gëch¨
();

139 
	`°poﬁ_thrŸée_íabÀ
(
poﬁ
, 1);

140 
îr‹
 = 
	`°poﬁ_add_routöe
(
poﬁ
, "ã°-thrŸée", 
èsk_run
, 
èsk_îr_h™dÀr
, &
c
, 
NULL
);

141 i‡(
îr‹
)

142 
	`¥ötf
("***Eº: @°poﬁ_add_èsk: %d\n", 
îr‹
);

144 
	`°poﬁ_thrŸée_íabÀ
(
poﬁ
, 0);

149 
	`¥ötf
("\nPressány keyÅoÅestÅheÖriority ....\n");

150 
	`gëch¨
();

152 
	`°poﬁ_su•íd
(
poﬁ
, 0);

157 
	`°poﬁ_add_routöe
(
poﬁ
, "zîo-¥i‹ôy", 
èsk_run
, 
èsk_îr_h™dÀr
, &
c
, 
NULL
);

163 
	`°poﬁ_add_routöe
(
poﬁ
, "n⁄-zîo-¥i‹ôy", 
èsk_run
, 
èsk_îr_h™dÀr
, &
c
, &
©å
);

166 
	`°poﬁ_ªsume
(
poﬁ
);

169 
	`°poﬁ_waô_Æl
(
poﬁ
, -1);

174 
	`¥ötf
("\nPressány keyÅoáddÅasks ... <then canÖressány keyÅoÑemoveÅhem.>\n");

175 
	`gëch¨
();

182 
i
=0; i<8000; i++)

183 
	`°poﬁ_add_routöe
(
poﬁ
, "èsk_run", 
èsk_run
, 
èsk_îr_h™dÀr
, &
c
, 
NULL
);

188 
	`¥ötf
("\nPressány keyÅoÅest stopingállÅasks fastly.\n");

189 
	`gëch¨
();

191 
	`°poﬁ_thrŸée_íabÀ
(
poﬁ
, 1);

192 
	`°poﬁ_ªmove_Æl
(
poﬁ
, 1);

195 
	`°poﬁ_waô_Æl
(
poﬁ
, -1);

196 
	`¥ötf
("---------------------------tasks have been finished.\n");

202 
	`¥ötf
("Pressány keyÅoÑeleaseÅheÖool...\n");

203 
	`gëch¨
();

206 
	`¥ötf
("%s\n", 
	`°poﬁ_°©_¥öt
(
poﬁ
));

207 
	`°poﬁ_ªÀa£
(
poﬁ
);

209 
	`¥ötf
("Pressány keyÅoÉxit ...\n");

210 
	`gëch¨
();

213 
	}
}

	@msglog.c

11 
	~<°dio.h
>

12 
	~<°d¨g.h
>

13 
	~<as£π.h
>

14 
	~<°rög.h
>

16 
	~"msglog.h
"

18 #ifde‡
_WIN


19 
	#ölöe
 
__ölöe


	)

21 #if(
_MSC_VER
 < 1900)

22 
	#¢¥ötf
 
_¢¥ötf


	)

26 
	#C_NONE
 "\033[m"

	)

27 
	#C_RED
 "\033[0;32;31m"

	)

28 
	#C_LRED
 "\033[1;31m"

	)

29 
	#C_GREEN
 "\033[0;32;32m"

	)

30 
	#C_LGREEN
 "\033[1;32m"

	)

31 
	#C_BLUE
 "\033[0;32;34m"

	)

32 
	#C_LBLUE
 "\033[1;34m"

	)

33 
	#C_GRAY
 "\033[1;30m"

	)

34 
	#C_LGRAY
 "\033[0;37m"

	)

35 
	#C_CYAN
 "\033[0;36m"

	)

36 
	#C_LCYAN
 "\033[1;36m"

	)

37 
	#C_PURPLE
 "\033[0;35m"

	)

38 
	#C_LPURPLE
 "\033[1;35m"

	)

39 
	#C_BROWN
 "\033[0;33m"

	)

40 
	#C_LBROWN
 "\033[1;33m"

	)

41 
	#C_YELLOW
 "\033[1;33m"

	)

42 
	#C_WHITE
 "\033[1;37m"

	)

44 
	slog_ﬂâr
 {

45 c⁄° *
	mldesc_°¨t
;

46 c⁄° *
	mldesc
;

47 c⁄° *
	mldesc_íd
;

48 c⁄° *
	mãxtc_°¨t
;

49 c⁄° *
	mãxtc_íd
;

50 } 
	tlog_ﬂâr_t
;

52 
log_ﬂâr_t
 
	g___log_ﬂâr
[] = {

54 {
C_BROWN
"["
C_GRAY
 , "TRACE" , C_BROWN"]", C_GRAY , 
C_NONE
},

55 {
C_BROWN
"["
C_LPURPLE
, "DEBUG" , C_BROWN"]", C_LPURPLE, 
C_NONE
},

56 {
C_BROWN
"["
C_GREEN
 , "INFO " , C_BROWN"]", C_GREEN , 
C_NONE
},

57 {
C_BROWN
"["
C_YELLOW
 , "WARN " , C_BROWN"]", C_YELLOW , 
C_NONE
},

58 {
C_BROWN
"["
C_RED
 , "ERROR" , C_BROWN"]", C_RED , 
C_NONE
}

61 
	g___log_cﬁ‹_íabÀd
 =

63 #ifde‡
_WIN


69 
	g___log_Àvñ
 =

70 #i‚de‡
NDEBUG


71 
LOG_TRACE
;

73 
	gLOG_WARN
;

76 
msg_log_h™dÀr_t
 *
	g___log_msgh
 = 
NULL
;

78 
	#MAX_LOG_FILTER_ENTRY
 200

	)

79 c⁄° *
	g___log_fûãr_míåy
[
MAX_LOG_FILTER_ENTRY
];

80 
	g___log_fûãr_À¡ry
[
MAX_LOG_FILTER_ENTRY
];

81 
	g___log_íåy_idx
 = 0;

82 
eFûãrTy≥
 
	g___log_ë
 = 
eFT_disˇrd
;

84 
ölöe
 const *

85 
	$MSG_log_buf„r2
(*
buff
, 
bufÊí
, 
msg_log_brõf_t
 *
mlm
, c⁄° *
omsg
)

87 i‡(!
mlm
->
m
)

88 
mlm
->
m
 = " ***** ";

90 i‡(
___log_cﬁ‹_íabÀd
)

91 
	`¢¥ötf
(
buff
, 
bufÊí
,

93 
___log_ﬂâr
[
mlm
->
Àvñ
].
ldesc_°¨t
,

94 
mlm
->
m
,

95 
___log_ﬂâr
[
mlm
->
Àvñ
].
ldesc_íd
,

96 
___log_ﬂâr
[
mlm
->
Àvñ
].
ldesc_°¨t
,

97 
___log_ﬂâr
[
mlm
->
Àvñ
].
ldesc
,

98 
___log_ﬂâr
[
mlm
->
Àvñ
].
ldesc_íd
,

99 
___log_ﬂâr
[
mlm
->
Àvñ
].
ãxtc_°¨t
,

100 
omsg
,

101 
___log_ﬂâr
[
mlm
->
Àvñ
].
ãxtc_íd
);

103 
	`¢¥ötf
(
buff
, 
bufÊí
,

105 
mlm
->
m
,

106 
___log_ﬂâr
[
mlm
->
Àvñ
].
ldesc
,

107 
omsg
);

109  
buff
;

110 
	}
}

112 
EXPORT
 const *

113 
	$MSG_log_vîsi⁄
()

116 
	}
}

118 
EXPORT
 

119 
	$MSG_log_£t_Àvñ
(
Àvñ
)

121 
___log_Àvñ
 = 
Àvñ
;

122 
	}
}

124 
EXPORT
 

125 
	$MSG_log_gë_Àvñ
()

127  
___log_Àvñ
;

128 
	}
}

130 
EXPORT
 

131 
	$MSG_log_íabÀ_cﬁ‹
(
íabÀ
)

133 
___log_cﬁ‹_íabÀd
 = 
íabÀ
;

134 
	}
}

136 
EXPORT
 

137 
	$MSG_log_£t_h™dÀr
(
msg_log_h™dÀr_t
 *
msgh
)

139 
___log_msgh
 = 
msgh
;

140 
	}
}

142 
EXPORT
 

143 
	$MSG_log_mfûãr_£t_ty≥
(
eFûãrTy≥
 
ë
)

145 
___log_ë
 = 
ë
;

146 
	}
}

148 
EXPORT
 

149 
	$MSG_log_mfûãr_add
(c⁄° *
m
, 
Àvñ
)

151 
idx
;

153 i‡(!
m
 || 
___log_íåy_idx
 =
MAX_LOG_FILTER_ENTRY
)

156 
idx
=0; idx<
___log_íåy_idx
; idx++)

157 i‡(!
	`°rcmp
(
___log_fûãr_míåy
[
idx
], 
m
)) {

158 
___log_fûãr_À¡ry
[
idx
] = 
Àvñ
;

161 
___log_fûãr_míåy
[
___log_íåy_idx
] = 
m
;

162 
___log_fûãr_À¡ry
[
___log_íåy_idx
] = 
Àvñ
;

163 ++ 
___log_íåy_idx
;

164 
	}
}

166 
EXPORT
 

167 
	$MSG_log_mfûãr_add_íåy
(c⁄° **
míåy
, *
À¡ry
)

169 i‡(
míåy
) {

171 
	`MSG_log_mfûãr_add
(*
míåy
, 
À¡ry
 ? (*À¡ry ++Ë: 
___log_Àvñ
);

172 } *(++ 
míåy
));

174 
	}
}

176 
EXPORT


177 
	$MSG_log_mfûãr_£t_íåy
(c⁄° **
míåy
, *
À¡ry
)

179 
___log_íåy_idx
 = 0;

181 i‡(
míåy
)

182 
	`MSG_log_mfûãr_add_íåy
(
míåy
, 
À¡ry
);

183 
	}
}

185 
EXPORT
 

186 
	$MSG_log_mfûãr_ªmove
(c⁄° *
m
)

188 
idx
;

190 i‡(!
m
 || !
___log_íåy_idx
)

193 
idx
=0; idx<
___log_íåy_idx
; idx++) {

194 i‡(!
	`°rcmp
(
___log_fûãr_míåy
[
idx
], 
m
)) {

195 i‡(
idx
 !
___log_íåy_idx
 - 1) {

196 
	`memmove
((*)(
___log_fûãr_míåy
 + 
idx
), (const *)(___log_filter_mentry + idx + 1),

197 
___log_íåy_idx
 - 
idx
 -1);

199 
	`memmove
(
___log_fûãr_À¡ry
 + 
idx
, ___log_filter_lentry + idx + 1,

200 
___log_íåy_idx
 - 
idx
 -1);

203 -- 
___log_íåy_idx
;

206 
	}
}

208 
EXPORT
 

209 
	$MSG_log_mfûãr_ªmove_íåy
(c⁄° **
míåy
)

211 i‡(
míåy
) {

213 
	`MSG_log_mfûãr_ªmove
(*
míåy
);

214 } *(++ 
míåy
));

216 
	}
}

218 
ölöe
 

219 
	$___log_disˇrd
(c⁄° *
m
, 
Àvñ
)

221 
idx
;

223 i‡(!
___log_íåy_idx
 || !
m
)

224  
___log_ë
 =
eFT_Ælow
;

226 
idx
=0; idx<
___log_íåy_idx
; idx++)

227 i‡(!
	`°rcmp
(
___log_fûãr_míåy
[
idx
], 
m
)) {

228 i‡(
Àvñ
 < 
___log_fûãr_À¡ry
[
idx
])

231 i‡(
Àvñ
 =
___log_fûãr_À¡ry
[
idx
])

232  
___log_ë
 =
eFT_disˇrd
;

237  
___log_ë
 =
eFT_Ælow
;

238 
	}
}

240 
EXPORT
 

241 
	$MSG_log_should_be_disˇrded
(
msg_log_brõf_t
 *c⁄° 
mlm
)

243  
mlm
->
Àvñ
 < 
___log_Àvñ
 || 
	`___log_disˇrd
(mlm->
m
, mlm->level);

244 
	}
}

246 
EXPORT
 const *

247 
	$MSG_log_buf„r
(*
buff
, 
bufÊí
, 
msg_log_brõf_t
 *
mlm
, c⁄° *
omsg
)

249  
	`MSG_log_buf„r2
(
buff
, 
bufÊí
, 
mlm
, 
omsg
);

250 
	}
}

252 
EXPORT
 

253 
	$MSG_log
(c⁄° *
m
, 
Àvñ
, c⁄° *
fmt
, ...)

255 
n
;

256 
msg
[1000], 
omsg
[1100];

257 
va_li°
 
≠
;

259 
	`as£π
 (
m
);

260 
	`as£π
 (
Àvñ
 >
LOG_TRACE
 &&Üevñ <
LOG_ERR
);

266 i‡(
___log_msgh
 && ___log_msgh->
log_fûãr
) {

267 
msg_log_brõf_t
 
mlm
 = {
m
, 
Àvñ
};

269 i‡((*
___log_msgh
->
log_fûãr
)(___log_msgh, &
mlm
))

277 } i‡(
Àvñ
 < 
___log_Àvñ
 || 
	`___log_disˇrd
(
m
,Üevel))

283 
	`va_°¨t
(
≠
, 
fmt
);

284 
n
 = 
	`v¢¥ötf
(
msg
, (msg), 
fmt
, 
≠
);

285 
	`va_íd
(
≠
);

287 if(!(
n
 > -1 &&Ç < (
msg
)))

294 i‡(
___log_msgh
 && ___log_msgh->
log_h™dÀr
) {

295 
msg_log_brõf_t
 
mlm
 = {
m
, 
Àvñ
};

297 (*
___log_msgh
->
log_h™dÀr
)(___log_msgh, &
mlm
, 
msg
);

305 
msg_log_brõf_t
 
mlm
 = {
m
, 
Àvñ
};

307 
	`MSG_log_buf„r2
(
omsg
, (omsg), &
mlm
, 
msg
);

313 
	`Âuts
(

314 
omsg
,

315 
Àvñ
 < 
LOG_WARN
 ? 
°dout
 : 
°dîr


317 
	}
}

	@msglog.h

1 #i‚de‡
__LOG_MSG_H__


2 
	#__LOG_MSG_H__


	)

14 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
_WIN64
)

15 
	#_WIN


	)

16 #ifde‡
_USRDLL


17 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

19 
	#EXPORT


	)

22 
	#EXPORT


	)

27 
	mLOG_TRACE
 = 1,

28 
	mLOG_DEBUG
,

29 
	mLOG_INFO
 = 3,

30 
	mLOG_WARN
,

31 
	mLOG_ERR
 = 5,

34 #ifde‡
__˝lu•lus


39 
	smsg_log_brõf
 {

44 c⁄° *
m
;

49 
Àvñ
;

50 } 
	tmsg_log_brõf_t
;

53 
	smsg_log_h™dî
 {

62 (*
log_fûãr
)(
msg_log_h™dî
 *
mlh
, 
msg_log_brõf_t
 *
mlm
);

71 (*
log_h™dÀr
)(
msg_log_h™dî
 *
mlh
, 
msg_log_brõf_t
 *
mlm
, c⁄° *
omsg
);

76 *
›aque
;

78 } 
	tmsg_log_h™dÀr_t
;

88 
EXPORT
 c⁄° *
MSG_log_vîsi⁄
();

105 
EXPORT
 
MSG_log_£t_h™dÀr
(
msg_log_h™dÀr_t
 *
msgh
);

118 
EXPORT
 
MSG_log_£t_Àvñ
(
Àvñ
);

123 
EXPORT
 
MSG_log_gë_Àvñ
();

126 
	eeFûãrTy≥


135 
eFT_disˇrd
,

144 
eFT_Ælow


150 
EXPORT
 
MSG_log_mfûãr_£t_ty≥
(
eFûãrTy≥
 
ë
);

155 
EXPORT
 
MSG_log_mfûãr_add
(c⁄° *
m
, 
Àvñ
);

166 
EXPORT
 
MSG_log_mfûãr_add_íåy
(c⁄° **
míåy
, *
À¡ry
);

174 
EXPORT
 
MSG_log_mfûãr_£t_íåy
(c⁄° **
míåy
, *
À¡ry
);

179 
EXPORT
 
MSG_log_mfûãr_ªmove
(c⁄° *
m
);

184 
EXPORT
 
MSG_log_mfûãr_ªmove_íåy
(c⁄° **
míåy
);

190 
EXPORT
 
MSG_log_should_be_disˇrded
(
msg_log_brõf_t
 *c⁄° 
mlm
);

197 
EXPORT
 
MSG_log_íabÀ_cﬁ‹
(
íabÀ
);

209 
EXPORT
 c⁄° *
MSG_log_buf„r
(*
buff
, 
bufÊí
, 
msg_log_brõf_t
 *
mlm
, c⁄° *
omsg
);

235 
EXPORT
 
MSG_log
(c⁄° *
m
, 
Àvñ
, c⁄° *
fmt
, ...);

237 
	#MSG_log2
(
m
, 
l
, 
fmt
, ...) \

238 
	`MSG_log
(
m
, 
l
, 
fmt
 " [%s:@%s:%d]\n",##
__VA_ARGS__
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

240 #ifde‡
__˝lu•lus


	@pool/com/cpool_com_internal.h

1 #i‚de‡
__CPOOL_COM_INTERNAL_H__


2 
	#__CPOOL_COM_INTERNAL_H__


	)

13 
	~"sm_ˇche.h
"

14 
	~"˝oﬁ_c‹e_thªad_°©us.h
"

15 
	~"˝oﬁ_Á˘‹y.h
"

17 
ölöe
 

18 
	$__˝oﬁ_com_gë_di•©ch_èskl
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
n
)

20 
li°_hód
 *
íåy
;

22 
	`as£π
 (
c‹e
->
n_qdi•©chs
 > 0 && 
n
 >= 1);

24 i‡(
c‹e
->
n_qdi•©chs
 <
n
) {

25 
	`__li°_•li˚
(&
c‹e
->
di•©ch_q
, &
£lf
->di•©ch_q, sñf->di•©ch_q.
√xt
);

26 
c‹e
->
n_qdi•©chs
 = 0;

29 
c‹e
->
n_qdi•©chs
 -
n
;

30 
íåy
=
c‹e
->
di•©ch_q
.
√xt
; -- 
n
 > 0;)

31 
íåy
 =É¡ry->
√xt
;

32 
	`__li°_cut_posôi⁄
(&
£lf
->
di•©ch_q
, &
c‹e
->di•©ch_q, 
íåy
);

35 #i‚de‡
NDEBUG


36 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

38 
£lf
);

42 
	}
}

44 
ölöe
 

45 
	$__˝oﬁ_com_gë_di•©ch_èskl2
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
n
)

47 
li°_hód
 *
íåy
;

49 
	`as£π
 (
c‹e
->
n_qdi•©chs
 > 0 && 
n
>=1);

51 i‡(
c‹e
->
n_qdi•©chs
 <
n
) {

52 
	`__li°_•li˚
(&
c‹e
->
di•©ch_q
, &
£lf
->di•©ch_q, sñf->di•©ch_q.
√xt
);

53 
c‹e
->
n_qdi•©chs
 = 0;

56 
c‹e
->
n_qdi•©chs
 -
n
;

57 
íåy
=
c‹e
->
di•©ch_q
.
√xt
; --
n
 > 0;)

58 
íåy
 =É¡ry->
√xt
;

59 
	`__li°_cut_posôi⁄
(&
£lf
->
di•©ch_q
, &
c‹e
->di•©ch_q, 
íåy
);

61 #i‚de‡
NDEBUG


62 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_DISPATCHED
;

63 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

65 
£lf
);

67 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
c‹e
, 
£lf
, 
THREAD_STAT_RUN
);

68 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

70 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_DISPATCHED
;

73 
	}
}

75 
ölöe
 

76 
	$__˝oﬁ_com_gë_di•©ch_èskl3
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
n
)

78 
li°_hód
 *
íåy
;

80 
	`as£π
 (
c‹e
->
n_qdi•©chs
 > 0 && 
n
>=1);

82 i‡(
c‹e
->
n_qdi•©chs
 <
n
) {

83 
	`__li°_•li˚
(&
c‹e
->
di•©ch_q
, &
£lf
->di•©ch_q, sñf->di•©ch_q.
√xt
);

84 
n
 = 
c‹e
->
n_qdi•©chs
;

85 
c‹e
->
n_qdi•©chs
 = 0;

88 
m
 = 
n
;

90 
c‹e
->
n_qdi•©chs
 -
n
;

91 
íåy
=
c‹e
->
di•©ch_q
.
√xt
; --
m
 > 0;)

92 
íåy
 =É¡ry->
√xt
;

93 
	`__li°_cut_posôi⁄
(&
£lf
->
di•©ch_q
, &
c‹e
->di•©ch_q, 
íåy
);

96  
n
;

97 
	}
}

99 
ölöe
 

100 
	$__˝oﬁ_com_èsk_m¨k
(
˘ask_t
 *
±ask
, 
lÊags
)

102 i‡(
eTASK_VM_F_ENABLE_QUEUE
 & 
lÊags
) {

103 i‡(
eTASK_VM_F_DISABLE_QUEUE
 & 
±ask
->
f_vmÊags
) {

104 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_DISABLE_QUEUE
;

105 
±ask
->
f_vmÊags
 |
eTASK_VM_F_ENABLE_QUEUE
;

109 } i‡(
eTASK_VM_F_DISABLE_QUEUE
 & 
lÊags
 &&

110 
eTASK_VM_F_ENABLE_QUEUE
 & 
±ask
->
f_vmÊags
) {

111 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_ENABLE_QUEUE
;

112 
±ask
->
f_vmÊags
 |
eTASK_VM_F_DISABLE_QUEUE
;

117 
	}
}

119 
	#__˝oﬁ_com_èsk_m¨k_≠≥nd
(
q
, 
lÊags
) \

121 
˘ask_t
 *
__±ask
; \

123 
	`li°_f‹_óch_íåy
(
__±ask
, 
q
, 
˘ask_t
, 
lök
) {\

124 
__±ask
->
f_vmÊags
 |(
lÊags
); \

126 } 0)

	)

128 
ölöe
 

129 
	$__˝oﬁ_com_gë_îr_h™dÀr_q
(
li°_hód
 *
rmq
, li°_hód *
nuŒ_q
)

131 
n
 = 0, 
m
 = 0;

132 
˘ask_t
 *
±ask
, *
√xt
;

134 
	`li°_f‹_óch_íåy_ß„
(
±ask
, 
√xt
, 
rmq
, 
˘ask_t
, 
lök
) {

135 ++ 
n
;

140 i‡(
±ask
->
èsk_îr_h™dÀr
)

143 
	`li°_move_èû
(&
±ask
->
lök
, 
nuŒ_q
);

144 ++ 
m
;

147  
n
-
m
;

148 
	}
}

150 
ölöe
 

151 
	$__˝oﬁ_com_li°_to_smq
(
li°_hód
 *
q
, 
smlök_q
 *
smq
)

153 
li°_hód
 *
c
, *
n
;

155 
	`li°_f‹_óch_ß„
(
c
, 
n
, 
q
) {

156 
	`smlök_q_push
(
smq
, 
c
);

158 
	}
}

	@pool/com/cpool_com_method.c

10 
	~"˝oﬁ_com_mëhod.h
"

11 
	~"˝oﬁ_c‹e.h
"

12 
	~"˝oﬁ_c‹e_gc.h
"

13 
	~"˝oﬁ_Á˘‹y.h
"

15 
ölöe
 
˝oﬁ_c‹e_t
 *
	$CORE
(
˝oﬁ_˘x_t
 
˘x
)

20 
	`as£π
 ((*) == ());

21  (
˝oﬁ_c‹e_t
 *)*(*)
˘x
;

22 
	}
}

25 
˝oﬁ_com_©exô
(
˝oﬁ_˘x_t
 
˘x
, (*
__©exô
)(*), *
›aque
)

27 
	`˝oﬁ_c‹e_©exô
(
	`CORE
(
˘x
), 
__©exô
, 
›aque
);

28 
	}
}

31 
	$˝oﬁ_com_adju°
(
˝oﬁ_˘x_t
 
˘x
, 
max
, 
mö
)

33 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

35 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

36 
max
 +
c‹e
->
maxthªads
;

37 
mö
 +
c‹e
->
möthªads
;

42 i‡(
max
 <= 0)

43 
max
 = 1;

45 i‡(
mö
 <= 0)

46 
mö
 = 0;

47 
mö
 = 
	`mö
(
max
, min);

48 
	`˝oﬁ_c‹e_adju°_abs_l
(
c‹e
, 
max
, 
mö
);

49 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

50 
	}
}

53 
	$˝oﬁ_com_adju°_abs
(
˝oﬁ_˘x_t
 
˘x
, 
max
, 
mö
)

55 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

57 i‡(
mö
 < 0 || 
max
 < min)

60 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

61 
	`˝oﬁ_c‹e_adju°_abs_l
(
c‹e
, 
max
, 
mö
);

62 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

63 
	}
}

66 
	$˝oﬁ_com_Êush
(
˝oﬁ_˘x_t
 
˘x
)

68 
ndecs
;

69 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

71 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

72 
ndecs
 = 
c‹e
->
¡hªads_ªÆ_poﬁ
 - c‹e->
möthªads
;

73 
ndecs
 = 
	`˝oﬁ_c‹e_dec_thªad¶
(
c‹e
,Çdecs);

74 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

76  
ndecs
;

77 
	}
}

80 
	$˝oﬁ_com_ªsume
(
˝oﬁ_˘x_t
 
˘x
)

82 
	`˝oﬁ_c‹e_ªsume
(
	`CORE
(
˘x
));

83 
	}
}

86 
	$˝oﬁ_com_addªf
(
˝oﬁ_˘x_t
 
˘x
)

88 
ªf
 = 0;

89 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

91 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

92 i‡(
CORE_F_¸óãd
 & 
c‹e
->
°©us
)

93 
ªf
 = 
	`˝oﬁ_c‹e_addªÊ
(
c‹e
, 1);

94 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

96  
ªf
;

98 
	}
}

101 
	$˝oﬁ_com_ªÀa£
(
˝oﬁ_˘x_t
 
˘x
)

107  
	`˝oﬁ_c‹e_ªÀa£_ex
(
	`CORE
(
˘x
), 0, 0);

108 
	}
}

111 
	$˝oﬁ_com_£èâr
(
˝oﬁ_˘x_t
 
˘x
, 
thªad_©å
 *
©å
)

113 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

115 
c‹e
->
th©å
.
°ack_size
 = 
©å
->stack_size;

116 
c‹e
->
th©å
.
sche_pﬁicy
 = (
ï_POLICY
)
©å
->
ï_schï
;

117 
c‹e
->
th©å
.
sche_¥i‹ôy
 = 
©å
->sche_priority;

118 
	}
}

121 
	$˝oﬁ_com_gë©å
(
˝oﬁ_˘x_t
 
˘x
, 
thªad_©å
 *
©å
)

123 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

125 
©å
->
°ack_size
 = 
c‹e
->
th©å
.stack_size;

126 
©å
->
ï_schï
 = (
ï_TH
)
c‹e
->
th©å
.
sche_pﬁicy
;

127 
©å
->
sche_¥i‹ôy
 = 
c‹e
->
th©å
.sche_priority;

128 
	}
}

131 
	$˝oﬁ_com_£t_a˘ivëimeo
(
˝oﬁ_˘x_t
 
˘x
, 
a˘timeo
, 
øndtimeo
)

133 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

135 
c‹e
->
a˘timeo
 =ácttimeo * 1000;

136 
c‹e
->
øndtimeo
 =Ñandtimeo * 1000;

137 
	}
}

139 
˘ask_t
 *

140 
	$˝oﬁ_com_ˇche_gë
(
˝oﬁ_˘x_t
 
˘x
)

142 
˘ask_t
 *
±ask
;

143 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

145 
	`˝oﬁ_c‹e_¶ow_GC
(
c‹e
);

146 
±ask
 = 
	`smˇche_gë
(
c‹e
->
ˇche_èsk
, 0);

148 i‡(!
±ask
) {

149 
	`˝oﬁ_c‹e_objs_loˇl_Êush_Æl
(
c‹e
);

150 
±ask
 = 
	`smˇche_gë
(
c‹e
->
ˇche_èsk
, 1);

153 i‡(
±ask
) {

154 
±ask
->
f_ª£rved
 = 0;

155 
±ask
->
f_°©
 = 0;

156 
±ask
->
ªf
 = 0;

157 
±ask
->
f_sys_Êags
 = 0;

158 
±ask
->
u£r_Êags
 = 0;

159 
±ask
->
gid
 = 0;

160 
±ask
->
¥i
 = 0;

161 
±ask
->
¥i_pﬁicy
 = 
ï_BACK
;

162 
±ask
->
f_vmÊags
 = (
eTASK_VM_F_PUSH
|
eTASK_VM_F_ENABLE_QUEUE
|
eTASK_VM_F_CACHE
);

165  
±ask
;

166 
	}
}

169 
	$˝oﬁ_com_ˇche_put
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
)

171 
˝oﬁ_c‹e_t
 *
c‹e
 = 
	`CORE
(
˘x
);

173 
	`as£π
 (
±ask
 &&Öèsk->
f_vmÊags
 & 
eTASK_VM_F_CACHE
);

174 
	`smˇche_add
(
c‹e
->
ˇche_èsk
, 
±ask
);

175 
	}
}

	@pool/com/cpool_com_method.h

1 #i‚de‡
__CPOOL_COMMON_METHOD_H__


2 
	#__CPOOL_COMMON_METHOD_H__


	)

13 
	~"˝oﬁ_mëhod.h
"

16 
˝oﬁ_com_©exô
(
˝oﬁ_˘x_t
 
˘x
, (*
__©exô
)(*), *
›aque
);

17 
	`˝oﬁ_com_adju°
(
˝oﬁ_˘x_t
 
˘x
, 
max
, 
mö
);

18 
	`˝oﬁ_com_adju°_abs
(
˝oﬁ_˘x_t
 
˘x
, 
max
, 
mö
);

19 
	`˝oﬁ_com_Êush
(
˝oﬁ_˘x_t
 
˘x
);

20 
	`˝oﬁ_com_ªsume
(
˝oﬁ_˘x_t
 
˘x
);

21 
	`˝oﬁ_com_addªf
(
˝oﬁ_˘x_t
 
˘x
);

22 
	`˝oﬁ_com_ªÀa£
(
˝oﬁ_˘x_t
 
˘x
);

23 
	`˝oﬁ_com_£èâr
(
˝oﬁ_˘x_t
 
˘x
, 
thªad_©å
 *
©å
);

24 
	`˝oﬁ_com_gë©å
(
˝oﬁ_˘x_t
 
˘x
, 
thªad_©å
 *
©å
);

25 
	`˝oﬁ_com_£t_a˘ivëimeo
(
˝oﬁ_˘x_t
 
˘x
, 
a˘timeo
, 
øndtimeo
);

27 
˘ask_t
 *
	`˝oﬁ_com_ˇche_gë
(
˝oﬁ_˘x_t
 
˘x
);

28 
	`˝oﬁ_com_ˇche_put
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

	@pool/com/cpool_com_priq.h

1 #i‚de‡
__CPOOL_COM_PRIQ_H__


2 
	#__CPOOL_COM_PRIQ_H__


	)

13 
	~"li°.h
"

15 
˝riq
 
	t˝riq_t
;

16 
˝riq_c⁄èöî
 
	t˝riq_c⁄èöî_t
;

19 
	s˝riq
 {

20 
li°_hód
 
	mlök
;

21 
	mqödex
;

22 
li°_hód
 
	mèsk_q
;

25 
	s˝riq_c⁄èöî
 {

26 
	m¥iq_num
;

27 
˝riq
 *
	m¥iq
;

29 
	mavg_¥i
;

30 
li°_hód
 *
	mªady_q
;

33 
ölöe
 

34 
	$__˝oﬁ_com_¥iq_ö£π0
(
li°_hód
 *
q
, 
˘ask_t
 *
±ask
)

36 
˘ask_t
 *
≥ek
;

41 i‡(
	`likñy
((
±ask
->
f_vmÊags
 & 
eTASK_VM_F_PUSH
Ë|| 
	`li°_em±y
(
q
))) {

42 
	`li°_add_èû
(&
±ask
->
lök
, 
q
);

49 
≥ek
 = 
	`li°_fú°_íåy
(
q
, 
˘ask_t
, 
lök
);

50 i‡(
±ask
->
¥i
 <
≥ek
->pri) {

51 i‡((
±ask
->
¥i
 < 
≥ek
->¥iË|| (
ï_BACK
 =±ask->
¥i_pﬁicy
)) {

52 
	`li°_add
(&
±ask
->
lök
, &
≥ek
->link);

56 
	`as£π
 (
ï_TOP
 =
±ask
->
¥i_pﬁicy
);

57 
	`li°_f‹_óch_íåy_c⁄töue_ªvî£
(
≥ek
, 
q
, 
˘ask_t
, 
lök
) {

58 i‡(
≥ek
->
¥i
 !
±ask
->pri) {

59 
	`li°_add
(&
±ask
->
lök
, &
≥ek
->link);

63 
	`as£π
 (0);

69 
	`li°_f‹_óch_íåy
(
≥ek
, 
q
, 
˘ask_t
, 
lök
) {

70 i‡((
±ask
->
¥i
 > 
≥ek
->¥iË|| (±ask->¥ò=≥ek->¥ò&& 
ï_TOP
 =±ask->
¥i_pﬁicy
)) {

71 
	`li°_add_èû
(&
±ask
->
lök
, &
≥ek
->link);

75 
	`as£π
 (0);

76 
	}
}

78 
ölöe
 

79 
	$__˝oﬁ_com_¥iq_a˘ive
(
˝riq_c⁄èöî_t
 *
c
, 
q
)

81 
	`as£π
 (
q
 < 
c
->
¥iq_num
);

86 i‡(
	`li°_em±y
(
c
->
ªady_q
))

87 
	`li°_add
(&
c
->
¥iq
[
q
].
lök
, c->
ªady_q
);

92 i‡(
q
 < 
	`li°_íåy
(
c
->
ªady_q
->
¥ev
, 
˝riq_t
, 
lök
)->
qödex
)

93 
	`li°_add_èû
(&
c
->
¥iq
[
q
].
lök
, c->
ªady_q
);

96 
˝riq_t
 *
¥iq
;

98 
	`li°_f‹_óch_íåy
(
¥iq
, 
c
->
ªady_q
, 
˝riq_t
, 
lök
) {

99 i‡(
q
 > 
¥iq
->
qödex
) {

100 
	`li°_add_èû
(&
c
->
¥iq
[
q
].
lök
, &priq->link);

105 
	}
}

107 
ölöe
 

108 
	$__˝oﬁ_com_¥iq_öô
(
˝riq_c⁄èöî_t
 *
c
, 
˝riq_t
 *
¥iq
, 
¥iq_num
, 
li°_hód
 *
ªady_q
)

110 
idx
 = 0;

112 
	`as£π
 (
¥iq_num
 >= 1);

113 
c
->
¥iq
 =Öriq;

114 
c
->
ªady_q
 =Ñeady_q;

115 
c
->
¥iq_num
 = 
	`max
(1,Öriq_num);

116 
c
->
avg_¥i
 = 100 / 
¥iq_num
;

118 ; 
idx
<
¥iq_num
; idx++) {

119 
	`INIT_LIST_HEAD
(&
¥iq
[
idx
].
èsk_q
);

120 
¥iq
[
idx
].
qödex
 = idx;

122 
	`INIT_LIST_HEAD
(
ªady_q
);

123 
	}
}

125 
ölöe
 

126 
	$__˝oﬁ_com_¥iq_loˇã
(
˝riq_c⁄èöî_t
 *
c
, 
¥i‹ôy
)

128  (
¥i‹ôy
 < 
c
->
avg_¥i
) ? 0 : (priority / c->avg_pri);

129 
	}
}

132 
ölöe
 

133 
	$__˝oﬁ_com_¥iq_em±y
(
˝riq_c⁄èöî_t
 *
c
)

135  
	`li°_em±y
(
c
->
ªady_q
);

136 
	}
}

138 
ölöe
 
˘ask_t
 *

139 
	$__˝oﬁ_com_¥iq_p›
(
˝riq_c⁄èöî_t
 *
c
)

141 
˝riq_t
 *
¥iq
 = 
	`li°_fú°_íåy
(
c
->
ªady_q
, c¥iq_t, 
lök
);

142 
˘ask_t
 *
±ask
 = 
	`li°_fú°_íåy
(&
¥iq
->
èsk_q
, cèsk_t, 
lök
);

144 
	`li°_dñ
(&
±ask
->
lök
);

145 i‡(
	`li°_em±y
(&
¥iq
->
èsk_q
))

146 
	`li°_dñ
(&
¥iq
->
lök
);

147 #i‚de‡
NDEBUG


149 
˘ask_t
 *
n
 = 
	`li°_íåy
(
¥iq
->
èsk_q
.
√xt
, cèsk_t, 
lök
);

150 
	`as£π
 (
±ask
->
¥i
 >
n
->pri);

153  
±ask
;

154 
	}
}

156 
ölöe
 
˘ask_t
 *

157 
	$__˝oﬁ_com_¥iq_t›
(
˝riq_c⁄èöî_t
 *
c
)

159  
	`li°_fú°_íåy
(

160 &
	`li°_fú°_íåy
(
c
->
ªady_q
, 
˝riq_t
, 
lök
)->
èsk_q
,

161 
˘ask_t
, 
lök


163 
	}
}

165 
ölöe
 

166 
	$__˝oﬁ_com_¥iq_ö£π
(
˝riq_c⁄èöî_t
 *
c
, 
˘ask_t
 *
±ask
)

168 
	`as£π
 (
±ask
->
¥iq
 < 
c
->
¥iq_num
);

170 i‡(
	`li°_em±y
(&
c
->
¥iq
[
±ask
->¥iq].
èsk_q
))

171 
	`__˝oﬁ_com_¥iq_a˘ive
(
c
, 
±ask
->
¥iq
);

172 
	`__˝oﬁ_com_¥iq_ö£π0
(&
c
->
¥iq
[
±ask
->¥iq].
èsk_q
,Ötask);

173 
	}
}

175 
ölöe
 

176 
	$__˝oﬁ_com_¥iq_îa£
(
˝riq_c⁄èöî_t
 *
c
, 
˘ask_t
 *
±ask
)

178 
	`li°_dñ
(&
±ask
->
lök
);

179 i‡(
	`li°_em±y
(&
c
->
¥iq
[
±ask
->¥iq].
èsk_q
))

180 
	`li°_dñ
(&
c
->
¥iq
[
±ask
->¥iq].
lök
);

181 
	}
}

183 
ölöe
 

184 
	$__˝oﬁ_com_èsk_ni˚_¥ïro˚ss
(
˝riq_c⁄èöî_t
 *
c
, 
˘ask_t
 *
±ask
)

190 i‡(
eTASK_VM_F_ADJPRI
 & 
±ask
->
f_vmÊags
) {

191 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_ADJPRI
;

192 
±ask
->
¥iq
 = 
	`__˝oﬁ_com_¥iq_loˇã
(
c
,Öèsk->
¥i
);

194 
	}
}

196 
ölöe
 

197 
	$__˝oﬁ_com_èsk_ni˚_adju°
(
˘ask_t
 *
±ask
)

205 i‡(
eTASK_VM_F_PRI_ONCE
 & 
±ask
->
f_vmÊags
) {

206 
±ask
->
f_vmÊags
 |
eTASK_VM_F_PUSH
;

207 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_PRI_ONCE
;

208 
±ask
->
¥iq
 = 0;

209 
±ask
->
¥i
 = 0;

210 
±ask
->
¥i_pﬁicy
 = 
ï_BACK
;

212 
	}
}

	@pool/core/cache_creater.h

1 #i‚de‡
__CACHE_CREATER_H__


2 
	#__CACHE_CREATER_H__


	)

4 
	~"˝oﬁ_c‹e.h
"

5 
	~"˝oﬁ_c‹e_°ru˘.h
"

6 
	~"sm_ˇche.h
"

7 
	~"msglog.h
"

19 #i‚de‡
NDEBUG


20 
	#INIT_thªad_°ru˘uª
(
c
, 
£lf
) \

22 (
£lf
)->
°©us
 = 
THREAD_STAT_INIT
;\

23 (
£lf
)->
Êags
 = 0;\

24 (
£lf
)->
¡asks_¥o˚s£d
 = 0;\

25 (
£lf
)->
b_waked
 = 1;\

26 (
£lf
)->
n_ªu£d
 = 0;\

27 
	`INIT_LIST_HEAD
(&(
£lf
)->
thq
); \

28 
	`INIT_LIST_HEAD
(&(
£lf
)->
di•©ch_q
); \

29 (
£lf
)->
nc⁄t_GC_cou¡îs
 = 0;\

30 (
£lf
)->
c‹e
 = (
c
);\

31 (
£lf
)->
run
 = 1;\

32 
	`INIT_SMLINK_Q
(&(
£lf
)->
qˇche
); \

33 (
£lf
)->
loˇl_ˇche_limôed
 = (
c
)->
thªad_loˇl_ˇche_limôed
 + ()((£lfË+ 
	`time
(
NULL
)) % 6; \

34 } 0)

	)

36 
	#INIT_thªad_°ru˘uª
(
c
, 
£lf
) \

38 (
£lf
)->
°©us
 = 
THREAD_STAT_INIT
;\

39 (
£lf
)->
Êags
 = 0;\

40 
	`INIT_LIST_HEAD
(&(
£lf
)->
thq
); \

41 
	`INIT_LIST_HEAD
(&(
£lf
)->
di•©ch_q
); \

42 (
£lf
)->
nc⁄t_GC_cou¡îs
 = 0;\

43 (
£lf
)->
b_waked
 = 1;\

44 (
£lf
)->
c‹e
 = (
c
);\

45 (
£lf
)->
run
 = 1;\

46 
	`INIT_SMLINK_Q
(&(
£lf
)->
qˇche
); \

47 (
£lf
)->
loˇl_ˇche_limôed
 = (
c
)->
thªad_loˇl_ˇche_limôed
 + ()((£lfË+ 
	`time
(
NULL
)) % 6; \

48 } 0)

	)

52 
	$thªad_obj_¸óã
(*
›aque
)

54 
˝oﬁ_c‹e_t
 *
c‹e
 = 
›aque
;

55 
thªad_t
 *
thªad
 = 
	`ˇŒoc
(1, (thread_t) +

56 (
c⁄d_©å
));

58 i‡(!
thªad
) {

59 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

61  
NULL
;

63 
	`INIT_thªad_°ru˘uª
(
c‹e
, 
thªad
);

64 
thªad
->
ˇâr
 = (
c⁄d_©å
 *)(thread + 1);

65 
thªad
->
°ru˘uª_ªÀa£
 = 1;

67  
thªad
;

68 
	}
}

71 
	$thªad_obj_de°roy
(*
obj
, *
›aque
)

73 
thªad_t
 *
thªad
 = 
obj
;

75 
	`as£π
 (
thªad
->
°ru˘uª_ªÀa£
);

76 i‡(
thªad
->
ˇâr
->
öôülized
)

77 
	`OSPX_±hªad_c⁄d_de°roy
(&
thªad
->
ˇâr
->
c⁄d
);

78 
	`‰ì
(
thªad
);

79 
	}
}

82 
	$thªad_obj_√ed_de°roy
(*
obj
, *
›aque
)

84  ((
thªad_t
 *)
obj
)->
°ru˘uª_ªÀa£
;

85 
	}
}

	@pool/core/cpool_core.c

11 
	~"o•x.h
"

12 
	~"o•x_î∫o.h
"

13 
	~"msglog.h
"

14 
	~"ˇche_¸óãr.h
"

15 
	~"˝oﬁ_c‹e.h
"

16 
	~"˝oﬁ_c‹e_gc.h
"

17 
	~"˝oﬁ_c‹e_thªad_°©us.h
"

19 
˝oﬁ_c‹e_£t°©us
(
˝oﬁ_c‹e_t
 *
c‹e
, 
°©us
, 
synchr⁄ized
);

20 
˝oﬁ_c‹e_scheduÀ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
);

23 
	$˝oﬁ_c‹e_˘‹
(
˝oﬁ_c‹e_t
 *
c‹e
, c⁄° *
desc
, c⁄° 
˝oﬁ_c‹e_mëhod_t
 *c⁄° 
me
,

24 
maxthªads
, 
möthªads
, 
su•íd
, 
lÊags
)

26 
ˇche_©å_t
 
©å
 = {

34 *
¥iv
 = 
c‹e
->priv;

35 
e
, 
ödex
;

39 
maxthªads
 = 
	`max
(1, maxthreads);

40 
möthªads
 = 
	`max
(0, minthreads);

41 
möthªads
 = 
	`mö
(möthªads, 
maxthªads
);

46 
	`bzîo
(
c‹e
, (*core));

47 
c‹e
->
desc
 = desc;

48 
c‹e
->
me
 = me;

49 
c‹e
->
¥iv
 =Öriv;

50 
c‹e
->
°¨t
 = 
	`time
(
NULL
);

51 
c‹e
->
lÊags
 =Üflags;

52 
c‹e
->
thªad_loˇl_ˇche_limôed
 = 5;

57 i‡((
î∫o
 = 
	`OSPX_±hªad_muãx_öô
(&
c‹e
->
mut
, 1))) {

58 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

59 "gë RECURSIVE MUTEX:%s.", 
	`OSPX_sys_°ªº‹
(
î∫o
));

61 i‡((
î∫o
 = 
	`OSPX_±hªad_muãx_öô
(&
c‹e
->
mut
, 0))) {

62 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

63 "muãx_öô:%s.", 
	`OSPX_sys_°ªº‹
(
î∫o
));

67 
	`˝oﬁ_c‹e_£t°©us
(
c‹e
, 
CORE_F_¸ótög
, 0);

72 i‡(
me
->
èsk_size
) {

73 i‡(
	`objpoﬁ_˘‹2
(&
c‹e
->
objp_èsk
, "FObjp-loˇl-ˇche", 
me
->
èsk_size
, 0,

74 
©å
.
nGC_ˇche
, &
c‹e
->
mut
)) {

75 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

77 
îrout
;

79 
c‹e
->
ˇche_èsk
 = 
	`objpoﬁ_gë_ˇche
(&c‹e->
objp_èsk
);

81 
	`˝oﬁ_c‹e_adju°_ˇchñ
(
c‹e
, &
©å
, 
NULL
);

86 
ödex
 = 
CORE_F_dy«mic
 & 
lÊags
 ? 15 : 
maxthªads
;

87 
	`smˇche_öô2
(&
c‹e
->
ˇche_thªad
, "thªad-ˇche", 
ödex
, 
NULL
, 0, core,

88 
thªad_obj_¸óã
, 
thªad_obj_de°roy
, 
thªad_obj_√ed_de°roy
);

89 
c‹e
->
buf„r
 = 
	`ˇŒoc
(1, 
ödex
 * ((
thªad_t
) +

90 (
c⁄d_©å
)));

91 i‡(
c‹e
->
buf„r
) {

92 
thªad_t
 *
ths
;

93 *
addr
 = 
c‹e
->
buf„r
;

95 --
ödex
; index>=0; --index) {

96 
ths
 = (
thªad_t
 *)
addr
;

97 
	`INIT_thªad_°ru˘uª
(
c‹e
, 
ths
);

98 
ths
->
ˇâr
 = (
c⁄d_©å
 *)(ths + 1);

99 
	`smˇche_add
(&
c‹e
->
ˇche_thªad
, 
ths
);

100 
addr
 +(
thªad_t
Ë+ (
c⁄d_©å
);

107 
	`INIT_LIST_HEAD
(&
c‹e
->
ths
);

108 
	`INIT_LIST_HEAD
(&
c‹e
->
ths_waôq
);

109 
	`INIT_LIST_HEAD
(&
c‹e
->
di•©ch_q
);

111 i‡((
î∫o
 = 
	`OSPX_±hªad_c⁄d_öô
(&
c‹e
->
c⁄d_ths
)))

112 
‰ì_ˇche
;

117 
c‹e
->
ªf
 = c‹e->
u£r_ªf
 = 1;

118 
c‹e
->
∑u£d
 = 
su•íd
;

119 
c‹e
->
maxthªads
 = maxthreads;

120 
c‹e
->
möthªads
 = minthreads;

121 
c‹e
->
a˘timeo
 = 1000 * 20;

122 
c‹e
->
øndtimeo
 = 1000 * 30;

123 
c‹e
->
eRós⁄s0
 = 
eRós⁄_ok
;

124 
c‹e
->
eRós⁄s1
 = 
eRós⁄_ªmoved
;

129 i‡(
c‹e
->
me
->
˘‹
 && (
e
 = c‹e->me->
	`˘‹
(c‹e->
¥iv
))) {

130 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

132 
e
);

133 
‰ì_c⁄d_ths
;

139 
	`˝oﬁ_c‹e_GC_öô
(
c‹e
);

141 
	`˝oﬁ_c‹e_£t°©us
(
c‹e
, 
CORE_F_¸óãd
, 0);

143 
time_t
 
n
 = 
	`time
(
NULL
);

145 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

147 
c‹e
->
desc
, c‹e, 
	`˘ime
(&
n
));

153 i‡(
CORE_F_dy«mic
 & 
lÊags
) {

154 
	`˝oﬁ_c‹e_lﬂd_ívl
(
c‹e
);

156 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

158 
c‹e
->
limô_thªads_¸óã_≥r_time
);

163 
c‹e
->
th©å
.
°ack_size
 = 1024 * 1024 * 2;

164 
c‹e
->
th©å
.
sche_pﬁicy
 = 
ï_NONE
;

165 i‡(
c‹e
->
möthªads
 > 0) {

166 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

167 
	`˝oﬁ_c‹e_add_thªad¶
(
c‹e
, 
NULL
, c‹e->
möthªads
);

168 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

173 
‰ì_ˇche
:

174 i‡(
c‹e
->
me
->
èsk_size
 && c‹e->
ˇche_èsk
)

175 
	`objpoﬁ_dt‹
(&
c‹e
->
objp_èsk
);

176 
‰ì_c⁄d_ths
:

177 
	`OSPX_±hªad_c⁄d_de°roy
(&
c‹e
->
c⁄d_ths
);

178 
îrout
:

179 
	`˝oﬁ_c‹e_£t°©us
(
c‹e
, 
CORE_F_de°royed
, 0);

180 
	`OSPX_±hªad_muãx_de°roy
(&
c‹e
->
mut
);

182 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

183 "Eº:%s", 
	`OSPX_sys_°ªº‹
(
î∫o
));

185 
	}
}

188 
	$˝oﬁ_c‹e_£t°©us
(
˝oﬁ_c‹e_t
 *
c‹e
, 
°©us
, 
synchr⁄ized
)

190 #i‚de‡
NDEBUG


191 
time_t
 
n
 = 
	`time
(
NULL
);

193 
	`MSG_log
(
M_CORE
, 
LOG_TRACE
,

195 
c‹e
->
desc
, c‹e, c‹e->
°©us
, sètus, 
	`˘ime
(&
n
));

197 i‡(
synchr⁄ized
)

198 
c‹e
->
°©us
 = status;

200 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

201 
c‹e
->
°©us
 = status;

202 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

204 
	}
}

210 
˝oﬁ_c‹e_©exô
(
˝oﬁ_c‹e_t
 *
c‹e
, (*
©exô_func
)(*), *
¨g
)

212 
	`as£π
 (
CORE_F_¸óãd
 & 
c‹e
->
°©us
);

213 
c‹e
->
©exô
 = 
©exô_func
;

214 
c‹e
->
©exô_¨g
 = 
¨g
;

215 
	}
}

218 
	$˝oﬁ_c‹e_adju°_ˇchñ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
ˇche_©å_t
 *
©å
, cache_©å_à*
ﬂâr
)

220 i‡(
ﬂâr
)

221 *
ﬂâr
 = 
c‹e
->
ˇâr
;

223 i‡(
©å
)

224 
c‹e
->
ˇâr
 = *
©å
;

225 
	}
}

228 
	$˝oﬁ_c‹e_lﬂd_ívl
(
˝oﬁ_c‹e_t
 *
c‹e
)

230 c⁄° *
ív
;

235 
ív
 = 
	`gëív
("LIMIT_THREADS_CREATE_PER_TIME");

236 i‡(!
ív
 || 
	`©oi
(env) <= 0)

237 
c‹e
->
limô_thªads_¸óã_≥r_time
 = 1;

239 
c‹e
->
limô_thªads_¸óã_≥r_time
 = 
	`©oi
(
ív
);

240 
	}
}

243 
	$˝oﬁ_c‹e_dt‹
(
˝oﬁ_c‹e_t
 *
c‹e
)

245 
	`as£π
 (
	`li°_em±y
(&
c‹e
->
ths
) &&

246 !
c‹e
->
¡hªads_ru¬ög
 &&

247 !
c‹e
->
¡hªads_ªÆ_¶ìpög
 &&

248 !
c‹e
->
≈ídögs
 && !c‹e->
n_qdi•©chs
);

250 
	`VERIFY
(
c‹e
, 
NULL
);

254 i‡(
c‹e
->
me
->
dt‹
)

255 
c‹e
->
me
->
	`dt‹
(c‹e->
¥iv
);

257 
	`˝oﬁ_c‹e_GC_deöô
(
c‹e
);

262 i‡(
c‹e
->
me
->
èsk_size
 && c‹e->
ˇche_èsk
)

263 
	`objpoﬁ_dt‹
(&
c‹e
->
objp_èsk
);

269 
thªad_t
 *
thªad
;

271 
	`smˇche_ª£t
(&
c‹e
->
ˇche_thªad
, 
NULL
);

273 
thªad
 = (
thªad_t
 *)
	`smˇche_gë
(&
c‹e
->
ˇche_thªad
, 0);

274 i‡(
thªad
) {

275 
	`as£π
 (!
thªad
->
°ru˘uª_ªÀa£
);

276 i‡(
thªad
->
ˇâr
->
öôülized
)

277 
	`OSPX_±hªad_c⁄d_de°roy
(&
thªad
->
ˇâr
->
c⁄d
);

279 } 
thªad
);

280 
	`smˇche_deöô
(&
c‹e
->
ˇche_thªad
);

285 i‡(
c‹e
->
buf„r
)

286 
	`‰ì
(
c‹e
->
buf„r
);

289 
	`OSPX_±hªad_muãx_de°roy
(&
c‹e
->
mut
);

290 
	`OSPX_±hªad_c⁄d_de°roy
(&
c‹e
->
c⁄d_ths
);

295 
c‹e
->
	`©exô
(c‹e->
©exô_¨g
);

296 
	}
}

299 
	$˝oﬁ_c‹e_ªÀa£_ex
(
˝oﬁ_c‹e_t
 *
c‹e
, 
is_wπhªad
, 
˛ón
)

301 
ªf
;

302 
ˇche_©å_t
 
©å
 = {

310 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

311 
ªf
 = 
	`˝oﬁ_c‹e_ªÀa£l
(
c‹e
, !
is_wπhªad
);

312 
	`as£π
 (
c‹e
->
ªf
 >= 0 &&Ñef >= 0);

313 i‡(!
is_wπhªad
 && !
ªf
) {

314 #i‚de‡
NDEBUG


315 
time_t
 
now
 = 
	`time
(
NULL
);

317 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

319 
c‹e
->
desc
, c‹e, c‹e->
¥iv
, 
	`˘ime
(&
now
));

325 
c‹e
->
eRós⁄s0
 |
eRós⁄_c‹e_de°royög
;

326 
c‹e
->
eRós⁄s1
 |
eRós⁄_c‹e_de°royög
;

327 
	`˝oﬁ_c‹e_£t°©us
(
c‹e
, 
CORE_F_de°royög
, 1);

332 i‡(
c‹e
->
me
->
nŸifyl
)

333 
c‹e
->
me
->
	`nŸifyl
(c‹e->
¥iv
, 
eEvít_F_de°royög
);

338 
	`smˇche_ªmove_unÊushabÀ_obje˘¶
(
c‹e
->
ˇche_èsk
);

339 
	`˝oﬁ_c‹e_adju°_ˇchñ
(
c‹e
, &
©å
, 
NULL
);

343 
	`˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
c‹e
, -1);

344 i‡(
	`li°_em±y
(&
c‹e
->
ths
Ë|| 
˛ón
) {

348 
˛ón
 = 1;

349 
c‹e
->
ªÀa£_˛ónög
 = 1;

354 ;!
	`li°_em±y
(&
c‹e
->
ths
Ë|| c‹e->
ªf
;)

355 
	`OSPX_±hªad_c⁄d_waô
(&
c‹e
->
c⁄d_ths
, &c‹e->
mut
);

359 i‡(!
c‹e
->
ªf
) {

364 i‡(
is_wπhªad
) {

365 i‡(
c‹e
->
ªÀa£_˛ónög
)

366 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
c‹e
->
c⁄d_ths
);

368 
˛ón
 = 1;

371 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

373 i‡(
˛ón
) {

378 i‡(
c‹e
->
me
->
nŸifyl
) {

379 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

380 
c‹e
->
me
->
	`nŸifyl
(c‹e->
¥iv
, 
eEvít_F_shutdown
);

381 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

387 
	`as£π
 (0 =
c‹e
->
u£r_ªf
 && c‹e->
ªf
 == 0);

388 
	`as£π
 (
	`li°_em±y
(&
c‹e
->
ths
));

390 
	`˝oﬁ_c‹e_£t°©us
(
c‹e
, 
CORE_F_de°royed
, 0);

392 
time_t
 
n
 = 
	`time
(
NULL
);

394 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

396 
c‹e
->
desc
, c‹e, c‹e->
¥iv
, 
	`˘ime
(&
n
));

404 i‡(
is_wπhªad
 && 
	`smˇche_∆
(
c‹e
->
ˇche_èsk
) >= 15000) {

405 
n
;

408 
n
 = 
	`smˇche_∆
(
c‹e
->
ˇche_èsk
) - 3000;

412 i‡(
n
 <0 || !
	`smˇche_√ed_de°roy2
(
c‹e
->
ˇche_èsk
))

414 
	`smˇche_Êush
(
c‹e
->
ˇche_èsk
, 
n
);

415 
	`m¶ìp
(1);

421 
	`smˇche_Êush
(
c‹e
->
ˇche_èsk
, 0);

423 
	`˝oﬁ_c‹e_dt‹
(
c‹e
);

426  
ªf
;

427 
	}
}

430 
	$˝oﬁ_c‹e_adju°_abs_l
(
˝oﬁ_c‹e_t
 *
c‹e
, 
maxthªads
, 
möthªads
)

432 
¡hªads
;

434 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

436 
maxthªads
, 
möthªads
, 
c‹e
->
desc
, core);

441 
	`as£π
 (
maxthªads
 >1 && 
möthªads
 >= 0 &&

442 
maxthªads
 >
möthªads
);

444 i‡(!((
CORE_F_¸óãd
|
CORE_F_de°royög
Ë& 
c‹e
->
°©us
) ||

445 ((
CORE_F_de°royög
 & 
c‹e
->
°©us
Ë&& (
maxthªads
 > 0 ||

446 
möthªads
 > 0))) {

447 
	`MSG_log
(
M_CORE
, 
LOG_WARN
,

451 
c‹e
->
maxthªads
 = maxthreads;

452 
c‹e
->
möthªads
 = minthreads;

457 i‡(
c‹e
->
me
->
nŸifyl
)

458 
c‹e
->
me
->
	`nŸifyl
(c‹e->
¥iv
, 
eEvít_F_thªad
);

460 i‡(
c‹e
->
möthªads
 > c‹e->
¡hªads_ªÆ_poﬁ
) {

461 
¡hªads
 = 
c‹e
->
möthªads
 - c‹e->
¡hªads_ªÆ_poﬁ
;

462 
	`˝oﬁ_c‹e_add_thªad¶
(
c‹e
, 
NULL
, 
¡hªads
);

464 } i‡(
c‹e
->
¡hªads_ªÆ_poﬁ
 > c‹e->
maxthªads
) {

465 
¡hªads
 = 
c‹e
->
¡hªads_ªÆ_poﬁ
 - c‹e->
maxthªads
;

466 
	`˝oﬁ_c‹e_dec_thªad¶
(
c‹e
, 
¡hªads
);

472 
	`˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
c‹e
, -1);

474 
	`as£π
 (
c‹e
->
¡hªads_ªÆ_poﬁ
 =c‹e->
¡hªads_ªÆ_¶ìpög
 +

475 
c‹e
->
¡hªads_ªÆ_‰ì
 + (c‹e->
¡hªads_ru¬ög
 -

476 
c‹e
->
¡hªads_dyög_run
));

481 
c‹e
->
¡hªads_≥ak
 = c‹e->
¡hªads_ªÆ_poﬁ
;

483 
	`as£π
 (
c‹e
->
n_qths_waô
 >0 && c‹e->n_qths_waô <c‹e->
n_qths
 &&

484 
c‹e
->
n_qths_waked
 >0 && c‹e->n_qths_waked <c‹e->
n_qths
);

485 
	}
}

491 
	#˝oﬁ_c‹e_øndom
(
c‹e
, 
£lf
) \

492 (
	`time
(
NULL
Ë^ ()
£lf
 * 1927 * ()
	`øndom
())

	)

495 
	$˝oﬁ_c‹e_gë_ª°to
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

501 i‡(
THREAD_STAT_RM
 & 
£lf
->
Êags
 && 
CORE_F_¸óãd
 & 
c‹e
->
°©us
) {

502 
£lf
->
œ°_to
 = 0;

503 
out
;

506 i‡(!(
CORE_F_¸óãd
 & 
c‹e
->
°©us
Ë&& (c‹e->
ªÀa£_˛ónög
 ||

507 !(
£lf
->
Êags
 & 
THREAD_STAT_GC
))) {

508 
£lf
->
œ°_to
 = 0;

509 
out
;

517 i‡(
THREAD_STAT_GC
 & 
£lf
->
Êags
) {

518 
	`˝oﬁ_c‹e_GC_gëtimeﬁ
(
c‹e
, 
£lf
);

519 
out
;

528 i‡(
c‹e
->
¡hªads_ªÆ_¶ìpög
 - c‹e->
möthªads
 <= -1)

529 
£lf
->
œ°_to
 = -1;

532 
t_öãæóved
;

533 
¡
 = ()
	`time
(
NULL
);

538 
	`§™dom
(
¡
);

540 
£lf
->
œ°_to
 = ()(
c‹e
->
a˘timeo
 + ()
	`˝oﬁ_c‹e_øndom
(c‹e, sñfË% c‹e->
øndtimeo
);

541 i‡(
£lf
->
œ°_to
 < 0)

542 (
£lf
->
œ°_to
) &= 0x0000ffff;

550 i‡(
¡
 <
c‹e
->
¸âime
)

551 
c‹e
->
¸âime
 = 
¡
;

552 
t_öãæóved
 = 4600 - 1000 * (
¡
 - 
c‹e
->
¸âime
);

554 
£lf
->
œ°_to
 < 
t_öãæóved
)

555 
£lf
->
œ°_to
 +
t_öãæóved
 / 4;

558 
out
:

559 #i‡!
	`deföed
(
NDEBUG
Ë&& deföed(
CONFIG_TRACE_THREAD_TIMEO
)

560 i‡(
£lf
->
Êags
 & 
THREAD_STAT_GC
)

561 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

563 
c‹e
->
desc
, c‹e, 
£lf
, sñf->
œ°_to
, 
	`smˇche_∆
(c‹e->
ˇche_èsk
));

565 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

567 
c‹e
->
desc
, c‹e, 
£lf
, sñf->
œ°_to
);

570  
£lf
->
œ°_to
;

571 
	}
}

574 
	$˝oﬁ_c‹e_thªad_íåy
(*
¨g
)

576 
thªad_t
 *
£lf
 = (thªad_à*)
¨g
;

577 
˝oﬁ_c‹e_t
 *
c‹e
 = 
£lf
->core;

579 
	`˝oﬁ_c‹e_thªad_°©us_ch™ge
(
c‹e
, 
£lf
, 
THREAD_STAT_JOIN
);

581 #i‚de‡
NDEBUG


585 ++ 
£lf
->
n_ªu£d
;

587 
	`˝oﬁ_c‹e_scheduÀ
(
c‹e
, 
£lf
);

593 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

594 i‡(!
£lf
->
run
)

595 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ_wøµî
(
c‹e
, 
£lf
, 
THREAD_STAT_LEAVE
);

596 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

598 } 
THREAD_STAT_LEAVE
 !(
£lf
->
°©us
 & ~
THREAD_STAT_INNER
));

600 
	`INIT_thªad_°ru˘uª
(
c‹e
, 
£lf
);

601 
	`smˇche_add_limô
(&
c‹e
->
ˇche_thªad
, 
£lf
, -1);

607 
	`˝oﬁ_c‹e_ªÀa£_ex
(
c‹e
, 1, 0);

610 
	}
}

613 
	$do_¸óã_thªads
(
thªad_t
 *
£lf
)

615 
dõd
, 
ok
 = 1, 
locked
 = 0;

616 
	`LIST_HEAD
(
exq
);

617 
˝oﬁ_c‹e_t
 *
c‹e
 = 
£lf
->core;

619 !
	`li°_em±y
(&
£lf
->
thq
)) {

620 
thªad_t
 *
thªad
 = 
	`li°_íåy
(
£lf
->
thq
.
√xt
,

621 
thªad_t
, 
lök_‰ì
);

623 
	`li°_dñ
(&
thªad
->
lök_‰ì
);

625 
dõd
 = 
THREAD_STAT_RM
 & 
thªad
->
Êags
;

631 
exîr
:

632 i‡(
dõd
 || !
ok
) {

633 i‡(!
locked
) {

634 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

635 
locked
 = 1;

642 i‡(!(
dõd
 && (
THREAD_STAT_RM
 & 
thªad
->
Êags
))) {

643 -- 
c‹e
->
n_qths
;

644 
	`li°_dñ
(&
thªad
->
lök
);

646 i‡(
dõd
) {

647 i‡(!-- 
c‹e
->
¡hªads_dyög
)

648 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
c‹e
->
c⁄d_ths
);

651 -- 
c‹e
->
¡hªads_ªÆ_poﬁ
;

652 -- 
c‹e
->
¡hªads_ªÆ_‰ì
;

659 
	`˝oﬁ_c‹e_ªÀa£l
(
c‹e
, 0);

660 
	`li°_add_èû
(&
thªad
->
lök_‰ì
, &
exq
);

663 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

672 
locked
 = 0;

675 
	`as£π
 (
ok
);

676 i‡(!
thªad
->
ˇâr
->
öôülized
) {

677 i‡((
î∫o
 = 
	`OSPX_±hªad_c⁄d_öô
(&
thªad
->
ˇâr
->
c⁄d
))) {

678 
ok
 = 0;

679 
exîr
;

681 
thªad
->
ˇâr
->
öôülized
 = 1;

684 i‡((
î∫o
 = 
	`OSPX_±hªad_¸óã
(&
thªad
->
thªad_id
, &
c‹e
->
th©å
,

685 
˝oﬁ_c‹e_thªad_íåy
, 
thªad
))) {

686 
ok
 = 0;

687 
exîr
;

689 #i‚de‡
NDEBUG


690 
	`MSG_log
(
M_THREAD
, 
LOG_DEBUG
,

692 
c‹e
->
desc
, c‹e, 
thªad
, c‹e->
¡hªads_ªÆ_poﬁ
);

695 i‡(
locked
)

696 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

701 i‡(!
	`li°_em±y
(&
exq
)) {

703 
thªad_t
 *
thªad
 = 
	`li°_íåy
(
£lf
->
thq
.
√xt
,

704 
thªad_t
, 
lök_‰ì
);

706 
	`li°_dñ
(&
thªad
->
lök_‰ì
);

707 
	`smˇche_add
(&
c‹e
->
ˇche_thªad
, 
thªad
);

708 } !
	`li°_em±y
(&
exq
));

710 i‡(!
ok
)

711 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

712 "œunchÅhªadÉº‹:%s", 
	`OSPX_sys_°ªº‹
(
î∫o
));

714 
	}
}

716 
ölöe
 

717 
	$˝oﬁ_c‹e_gëèsk
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

719 i‡(
c‹e
->
me
->
	`gëèsk
(c‹e->
¥iv
, 
£lf
)) {

725 i‡(
	`likñy
(
£lf
->
Êags
 == 0))

728 i‡(
	`u∆ikñy
(
THREAD_STAT_GC
 & 
£lf
->
Êags
Ë&& sñf->
èsk_ty≥
 !
TASK_TYPE_GC
)

729 
	`˝oﬁ_c‹e_GC_Àave
(
c‹e
, 
£lf
);

731 i‡(
THREAD_STAT_FLUSH
 & 
£lf
->
Êags
)

732 
	`˝oﬁ_c‹e_objs_loˇl_Êush
(
£lf
);

742  
	`˝oﬁ_c‹e_GC_gëèskl
(
c‹e
, 
£lf
);

743 
	}
}

746 
	$˝oﬁ_c‹e_scheduÀ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

753 i‡(!
	`˝oﬁ_c‹e_gëèsk
(
c‹e
, 
£lf
)) {

757 i‡(!
	`˝oﬁ_c‹e_gë_ª°to
(
c‹e
, 
£lf
))

758 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ_wøµî
(
c‹e
, 
£lf
, 
THREAD_STAT_FORCE_QUIT
);

760 i‡(
£lf
->
œ°_to
 != 1) {

761 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ_wøµî
(
c‹e
, 
£lf
, 
THREAD_STAT_WAIT
);

763 
	`as£π
 (
c‹e
->
∑u£d
 || !c‹e->
≈ídögs
);

768 i‡(
£lf
->
œ°_to
 > 0)

769 
î∫o
 = 
	`OSPX_±hªad_c⁄d_timedwaô
(&
£lf
->
ˇâr
->
c⁄d
,

770 &
c‹e
->
mut
, 
£lf
->
œ°_to
);

772 
î∫o
 = 
	`OSPX_±hªad_c⁄d_waô
(&
£lf
->
ˇâr
->
c⁄d
, &
c‹e
->
mut
);

778 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
c‹e
, 
£lf
, (
ETIMEDOUT
 =
î∫o
) ?

779 
THREAD_STAT_TIMEDOUT
 : 
THREAD_STAT_FREE
);

781 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

790 i‡(!
	`li°_em±y
(&
£lf
->
thq
))

791 
	`do_¸óã_thªads
(
£lf
);

798 i‡(
	`likñy
(
£lf
->
èsk_ty≥
 =
TASK_TYPE_NORMAL
)) {

799 
__cuπask
->
	`èsk_run
(__curtask);

804 
c‹e
->
me
->
	`föished
(c‹e->
¥iv
, 
£lf
, 
__cuπask
, c‹e->
eRós⁄s0
);

806 } i‡(
£lf
->
èsk_ty≥
 =
TASK_TYPE_DISPATCHED
) {

807 !
	`li°_em±y
(&
£lf
->
di•©ch_q
)) {

811 
__cuπask
 = 
	`li°_fú°_íåy
(&
£lf
->
di•©ch_q
, 
basic_èsk_t
, 
lök
);

812 
	`li°_dñ
(&
__cuπask
->
lök
);

813 
	`as£π
 (
__cuπask
->
èsk_îr_h™dÀr
);

817 
__cuπask
->
	`èsk_îr_h™dÀr
(__cuπask, 
c‹e
->
me
->
	`îr_ªas⁄s
(__curtask));

822 
c‹e
->
me
->
	`föished
(c‹e->
¥iv
, 
£lf
, 
__cuπask
, c‹e->
eRós⁄s1
);

826 
	`as£π
 (
£lf
->
èsk_ty≥
 =
TASK_TYPE_GC
);

828 
__cuπask
->
	`èsk_run
(__curtask);

831 } 
£lf
->
run
);

832 
	}
}

835 
	$˝oﬁ_c‹e_ísuª_£rvi˚¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

837 
öt64_t
 
¡asks_≥ndög
 = 
c‹e
->
∑u£d
 ? 0 : c‹e->
≈ídögs
;

843 i‡(
c‹e
->
n_qths_waked
 || c‹e->
¡hªads_ªÆ_‰ì
 ||

844 (!
c‹e
->
n_qdi•©chs
 && !
¡asks_≥ndög
))

851 i‡(!
	`li°_em±y
(&
c‹e
->
ths_waôq
)) {

852 
	`as£π
 (
c‹e
->
n_qths_waô
 > 0);

857 
	`˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
c‹e
, 
	`mö
(2, c‹e->
limô_thªads_¸óã_≥r_time
));

864 i‡(
c‹e
->
maxthªads
 > c‹e->
¡hªads_ªÆ_poﬁ
) {

865 
¡hªads
 = 
c‹e
->
maxthªads
 - c‹e->
¡hªads_ªÆ_poﬁ
;

870 i‡(
c‹e
->
n_qdi•©chs
)

871 
¡asks_≥ndög
 += 1;

877 i‡(
¡hªads
 > 
c‹e
->
limô_thªads_¸óã_≥r_time
)

878 
¡hªads
 = 
c‹e
->
limô_thªads_¸óã_≥r_time
;

880 i‡(
¡hªads
 > 
¡asks_≥ndög
)

881 
¡hªads
 = ()
¡asks_≥ndög
;

886 
	`˝oﬁ_c‹e_add_thªad¶
(
c‹e
, 
£lf
, 
¡hªads
);

888 
	}
}

891 
	$˝oﬁ_c‹e_add_thªad¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
¡hªads
)

893 
n
;

894 
thªad_t
 *
thªad
 = 
NULL
;

899 i‡(
c‹e
->
¡hªads_dyög
 && 
¡hªads
 > 0) {

900 
	`li°_f‹_óch_íåy
(
thªad
, &
c‹e
->
ths
, 
thªad_t
, 
lök
) {

901 
	`VERIFY
(
c‹e
, 
thªad
);

903 i‡(!(
THREAD_STAT_RM
 & 
thªad
->
Êags
))

906 
thªad
->
run
 = 1;

907 
thªad
->
Êags
 &~
THREAD_STAT_RM
;

908 ++ 
c‹e
->
¡hªads_ªÆ_poﬁ
;

909 -- 
c‹e
->
¡hªads_dyög
;

911 
thªad
->
°©us
) {

912 
THREAD_STAT_WAIT
:

913 ++ 
c‹e
->
¡hªads_ªÆ_¶ìpög
;

918 i‡(!
thªad
->
b_waked
) {

919 
thªad
->
b_waked
 = 1;

920 ++ 
c‹e
->
n_qths_waked
;

921 -- 
c‹e
->
n_qths_waô
;

922 
	`li°_dñ
(&
thªad
->
run_lök
);

923 
	`OSPX_±hªad_c⁄d_sig«l
(&
thªad
->
ˇâr
->
c⁄d
);

926 
THREAD_STAT_RUN
:

927 -- 
c‹e
->
¡hªads_dyög_run
;

929 
THREAD_STAT_FORCE_QUIT
:

937 
thªad
->
°©us
 = 
THREAD_STAT_FREE
;

940 ++ 
c‹e
->
¡hªads_ªÆ_‰ì
;

943 
	`VERIFY
(
c‹e
, 
thªad
);

945 i‡(!-- 
¡hªads
 || !
c‹e
->
¡hªads_dyög
)

949 
	`VERIFY
(
c‹e
, 
£lf
);

956 
n
=0;Ç<
¡hªads
;Ç++) {

957 i‡(!(
thªad
 = 
	`smˇche_gë
(&
c‹e
->
ˇche_thªad
, 1))) {

958 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

960 
ovî
;

962 
	`as£π
 (
THREAD_STAT_INIT
 =
thªad
->
°©us
 &&Åhªad->
run
);

969 i‡(!
£lf
) {

970 i‡(!
thªad
->
ˇâr
->
öôülized
) {

971 i‡((
î∫o
 = 
	`OSPX_±hªad_c⁄d_öô
(&
thªad
->
ˇâr
->
c⁄d
))) {

972 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

973 "c⁄d_öô:%s.", 
	`OSPX_sys_°ªº‹
(
î∫o
));

974 
ovî
;

976 
thªad
->
ˇâr
->
öôülized
 = 1;

979 i‡((
î∫o
 = 
	`OSPX_±hªad_¸óã
(&
thªad
->
thªad_id
, &
c‹e
->
th©å
,

980 
˝oﬁ_c‹e_thªad_íåy
, 
thªad
))) {

981 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

982 "œunchÅhªad:%s.", 
	`OSPX_sys_°ªº‹
(
î∫o
));

983 
ovî
;

985 #i‚de‡
NDEBUG


986 
	`MSG_log
(
M_THREAD
, 
LOG_DEBUG
,

988 
c‹e
->
desc
, c‹e, 
thªad
, c‹e->
¡hªads_ªÆ_poﬁ
 + 
n
 + 1);

991 
	`li°_add_èû
(&
thªad
->
lök_‰ì
, &
£lf
->
thq
);

993 
	`li°_add_èû
(&
thªad
->
lök
, &
c‹e
->
ths
);

1000 
	`˝oﬁ_c‹e_addªÊ
(
c‹e
, 0);

1001 
	`VERIFY
(
c‹e
, 
thªad
);

1003 
ovî
:

1008 i‡(
¡hªads
 !
n
 && 
thªad
)

1009 
	`smˇche_add
(&
c‹e
->
ˇche_thªad
, 
thªad
);

1011 
c‹e
->
n_qths
 +
n
;

1012 
c‹e
->
¡hªads_ªÆ_‰ì
 +
n
;

1013 
c‹e
->
¡hªads_ªÆ_poﬁ
 +
n
;

1018 i‡(
c‹e
->
¡hªads_≥ak
 < c‹e->
¡hªads_ªÆ_poﬁ
)

1019 
c‹e
->
¡hªads_≥ak
 = c‹e->
¡hªads_ªÆ_poﬁ
;

1024 
c‹e
->
¸âime
 = ()
	`time
(
NULL
);

1026 
	`VERIFY
(
c‹e
, 
£lf
);

1028  
n
;

1029 
	}
}

1032 
	$˝oﬁ_c‹e_dec_thªad¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
¡hªads
)

1034 
thªad_t
 *
thªad
;

1035 
ndõd
 = 0, 
ƒu¡hªads_dec
 = 0;

1036 
¡hªads_ªÆ_ru¬ög
, 
¡hªads_ªÆ_Ÿhîs
;

1038 i‡(
¡hªads
 <0 || !
c‹e
->
¡hªads_ªÆ_poﬁ
)

1041 
¡hªads
 = 
	`mö
(
c‹e
->
¡hªads_ªÆ_poﬁ
,Çthreads);

1043 
¡hªads_ªÆ_ru¬ög
 = 
c‹e
->
¡hªads_ru¬ög
 - c‹e->
¡hªads_dyög_run
;

1044 
¡hªads_ªÆ_Ÿhîs
 = 
c‹e
->
¡hªads_ªÆ_poﬁ
 - 
¡hªads_ªÆ_ru¬ög
;

1045 
	`as£π
 (
¡hªads_ªÆ_Ÿhîs
 >= 0);

1051 i‡(
¡hªads_ªÆ_Ÿhîs
 < 
¡hªads
)

1052 
ƒu¡hªads_dec
 = 
¡hªads
 - 
¡hªads_ªÆ_Ÿhîs
;

1059 
	`li°_f‹_óch_íåy
(
thªad
, &
c‹e
->
ths
, 
thªad_t
, 
lök
) {

1060 
	`VERIFY
(
c‹e
, 
thªad
);

1065 i‡(
THREAD_STAT_RM
 & 
thªad
->
Êags
)

1068 i‡(
THREAD_STAT_RUN
 !
thªad
->
°©us
) {

1069 -- 
¡hªads
;

1070 
thªad
->
run
 = 0;

1075 i‡(
THREAD_STAT_WAIT
 =
thªad
->
°©us
) {

1076 -- 
c‹e
->
¡hªads_ªÆ_¶ìpög
;

1078 i‡(!
thªad
->
b_waked
) {

1079 
thªad
->
b_waked
 = 1;

1080 ++ 
c‹e
->
n_qths_waked
;

1081 -- 
c‹e
->
n_qths_waô
;

1082 
	`li°_dñ
(&
thªad
->
run_lök
);

1083 
	`OSPX_±hªad_c⁄d_sig«l
(&
thªad
->
ˇâr
->
c⁄d
);

1087 -- 
c‹e
->
¡hªads_ªÆ_‰ì
;

1088 } i‡(
ƒu¡hªads_dec
) {

1089 -- 
ƒu¡hªads_dec
;;

1091 
thªad
->
run
 = 0;

1092 ++ 
c‹e
->
¡hªads_dyög_run
;

1095 i‡(!
thªad
->
run
) {

1096 
thªad
->
Êags
 |
THREAD_STAT_RM
;

1097 -- 
c‹e
->
¡hªads_ªÆ_poﬁ
;

1098 ++ 
c‹e
->
¡hªads_dyög
;

1099 ++ 
ndõd
;

1101 
	`VERIFY
(
c‹e
, 
thªad
);

1103 i‡(!
¡hªads
 && !
ƒu¡hªads_dec
)

1106 
	`VERIFY
(
c‹e
, 
NULL
);

1108  
ndõd
;

1109 
	}
}

1112 
	$˝oﬁ_c‹e_su•ídl
(
˝oﬁ_c‹e_t
 *
c‹e
)

1114 i‡(!
c‹e
->
∑u£d
) {

1115 
c‹e
->
∑u£d
 = 1;

1117 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

1119 
c‹e
->
desc
, c‹e, c‹e->
≈ídögs
, c‹e->
¡hªads_ru¬ög
, c‹e->
n_qdi•©chs
, c‹e->
n_qths
);

1121 i‡(
c‹e
->
me
->
nŸifyl
)

1122 
c‹e
->
me
->
	`nŸifyl
(c‹e->
¥iv
, 
eEvít_F_c‹e_su•íd
);

1124 
	}
}

1127 
	$˝oﬁ_c‹e_ªsume
(
˝oﬁ_c‹e_t
 *
c‹e
)

1129 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

1130 i‡(
c‹e
->
∑u£d
 && (
CORE_F_¸óãd
 & c‹e->
°©us
)) {

1131 
c‹e
->
∑u£d
 = 0;

1133 
	`MSG_log
(
M_CORE
, 
LOG_INFO
,

1135 
c‹e
->
desc
, c‹e, c‹e->
≈ídögs
, c‹e->
¡hªads_ru¬ög
, c‹e->
n_qdi•©chs
, c‹e->
n_qths
);

1137 i‡(
c‹e
->
me
->
nŸifyl
)

1138 
c‹e
->
me
->
	`nŸifyl
(c‹e->
¥iv
, 
eEvít_F_c‹e_ªsume
);

1143 i‡(
c‹e
->
≈ídögs
)

1144 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
c‹e
, 
NULL
);

1146 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

1147 
	}
}

1150 
	$˝oﬁ_c‹e_åy_GC
(
˝oﬁ_c‹e_t
 *
c‹e
)

1152 
ÊushabÀ
;

1154 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

1155 i‡(
	`u∆ikñy
(!
c‹e
->
¡hªads_ªÆ_‰ì
 && c‹e->
¡hªads_ru¬ög
 =c‹e->
¡hªads_dyög_run
)) {

1156 i‡(
	`smˇche_auto_lock
(
c‹e
->
ˇche_èsk
))

1157 
	`smˇche_lock
(
c‹e
->
ˇche_èsk
);

1159 
ÊushabÀ
 = 
	`smˇche_ÊushabÀl
(
c‹e
->
ˇche_èsk
, c‹e->
ˇâr
.
nGC_wakeup
);

1161 i‡(
	`smˇche_auto_lock
(
c‹e
->
ˇche_èsk
))

1162 
	`smˇche_u∆ock
(
c‹e
->
ˇche_èsk
);

1164 i‡(
ÊushabÀ
) {

1165 i‡(
c‹e
->
¡hªads_ªÆ_¶ìpög
)

1166 
	`˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
c‹e
, 1);

1168 
	`˝oﬁ_c‹e_add_thªad¶
(
c‹e
, 
NULL
, 1);

1171 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

1172 
	}
}

1175 
	$˝oﬁ_c‹e_thªad_°©us_ch™gñ_wøµî
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
°©us
)

1177 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
c‹e
, 
£lf
, 
°©us
);

1178 
	}
}

1181 
	$˝oﬁ_c‹e_thªad_°©us_ch™ge
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
°©us
)

1183 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

1184 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
c‹e
, 
£lf
, 
°©us
);

1185 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

1186 
	}
}

1188 #i‚de‡
NDEBUG


1190 
	$VERIFY
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

1193 
	`as£π
 (
c‹e
->
n_qths
 <c‹e->
n_qths_waô
 +

1194 
c‹e
->
n_qths_waked
 + c‹e->
¡hªads_ru¬ög
 +

1195 (
c‹e
->
¡hªads_dyög
 - c‹e->
¡hªads_dyög_run
) +

1196 
c‹e
->
¡hªads_ªÆ_‰ì
);

1198 
	`as£π
 (
c‹e
->
¡hªads_ªÆ_poﬁ
 =c‹e->
¡hªads_ªÆ_¶ìpög
 +

1199 
c‹e
->
¡hªads_ªÆ_‰ì
 + (c‹e->
¡hªads_ru¬ög
 -

1200 
c‹e
->
¡hªads_dyög_run
));

1202 
	`as£π
 (
c‹e
->
n_qths_waked
 >0 && c‹e->
n_qths_waô
 <c‹e->
n_qths
 &&

1203 
c‹e
->
n_qths_waked
 <c‹e->
n_qths
);

1205 i‡(
£lf
)

1206 
	`as£π
 ((!
£lf
->
run
 && (£lf->
Êags
 & 
THREAD_STAT_RM
)) ||

1207 (
£lf
->
run
 && !(£lf->
Êags
 & 
THREAD_STAT_RM
)));

1208 
	}
}

	@pool/core/cpool_core.h

1 #i‚de‡
__CPOOL_CORE_H__


2 
	#__CPOOL_CORE_H__


	)

15 #i‡!
deföed
(
_WIN
Ë&& deföed(
HAVE_PRCTL
)

16 
	~<sys/¥˘l.h
>

18 
	~"msglog.h
"

19 
	~"˝oﬁ_c‹e_°ru˘.h
"

21 
	#M_CORE
 "C‹e"

	)

22 
	#M_SCHEDULER
 "ScheduÀr"

	)

24 #i‚de‡
NDEBUG


25 
VERIFY
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
);

27 
	#VERIFY
(
c‹e
, 
thªad
)

	)

31 
˝oﬁ_c‹e_˘‹
(
˝oﬁ_c‹e_t
 *
c‹e
, c⁄° *
desc
, c⁄° 
˝oﬁ_c‹e_mëhod_t
 *c⁄° 
me
,

32 
maxthªads
, 
möthªads
, 
su•íd
, 
lÊags
);

33 
˝oﬁ_c‹e_©exô
(
˝oﬁ_c‹e_t
 *
c‹e
, (*
©exô_func
)(*
¨g
), *arg);

34 
	`˝oﬁ_c‹e_dt‹
(
˝oﬁ_c‹e_t
 *
c‹e
);

36 
ölöe
 
	$˝oﬁ_c‹e_addªÊ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
ö¸ó£_u£r
)

38 ++ 
c‹e
->
ªf
;

39 i‡(
ö¸ó£_u£r
)

40  ++ 
c‹e
->
u£r_ªf
;

42  
c‹e
->
ªf
;

43 
	}
}

45 
ölöe
 
	$˝oﬁ_c‹e_ªÀa£l
(
˝oﬁ_c‹e_t
 *
c‹e
, 
de¸ó£_u£r
)

47 
	`as£π
 (
c‹e
->
u£r_ªf
 >0 && c‹e->
ªf
 >= core->user_ref);

49 -- 
c‹e
->
ªf
;

50 i‡(
de¸ó£_u£r
)

51  -- 
c‹e
->
u£r_ªf
;

53  
c‹e
->
ªf
;

54 
	}
}

56 
ölöe
 
	$˝oﬁ_c‹e_°©u¶
(
˝oﬁ_c‹e_t
 *
c‹e
Ë{ c‹e->
°©us
;
	}
}

58 
˝oﬁ_c‹e_ªÀa£_ex
(
˝oﬁ_c‹e_t
 *
c‹e
, 
de¸ó£_u£r
, 
˛ón_waô
);

59 
˝oﬁ_c‹e_lﬂd_ívl
(
˝oﬁ_c‹e_t
 *
c‹e
);

60 
˝oﬁ_c‹e_adju°_ˇchñ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
ˇche_©å_t
 *
©å
, cache_©å_à*
ﬂâr
);

61 
˝oﬁ_c‹e_ísuª_£rvi˚¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
);

62 
˝oﬁ_c‹e_add_thªad¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
¡hªads
);

63 
˝oﬁ_c‹e_dec_thªad¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
¡hªads
);

64 
˝oﬁ_c‹e_adju°_abs_l
(
˝oﬁ_c‹e_t
 *
c‹e
, 
maxthªads
, 
möthªads
);

65 
˝oﬁ_c‹e_GC_gëèskl
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
);

66 
˝oﬁ_c‹e_su•ídl
(
˝oﬁ_c‹e_t
 *
c‹e
);

67 
˝oﬁ_c‹e_ªsume
(
˝oﬁ_c‹e_t
 *
c‹e
);

69 
	#˝oﬁ_c‹e_waôq_sizñ
(
c‹e
Ë((c‹e)->
n_qths_waô
)

	)

70 
ölöe
 
	$˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
nwake
)

76 !
	`li°_em±y
(&
c‹e
->
ths_waôq
)) {

77 
thªad_t
 *
thªad
 = 
	`c⁄èöî_of
(
c‹e
->
ths_waôq
.
√xt
,

78 
thªad_t
, 
run_lök
);

80 
	`as£π
 (!
thªad
->
b_waked
 && 
c‹e
->
n_qths_waô
 > 0);

82 
thªad
->
b_waked
 = 1;

83 
	`li°_dñ
(&
thªad
->
run_lök
);

84 
	`OSPX_±hªad_c⁄d_sig«l
(&
thªad
->
ˇâr
->
c⁄d
);

86 -- 
c‹e
->
n_qths_waô
;

87 ++ 
c‹e
->
n_qths_waked
;

88 i‡(!-- 
nwake
)

92 
	`VERIFY
(
c‹e
, 
NULL
);

93 
	}
}

100 
ölöe
 
	$˝oﬁ_c‹e_Æl_d⁄ñ
(
˝oﬁ_c‹e_t
 *
c‹e
)

102 
ok
 = 0;

103 
	`as£π
 (
c‹e
->
n_qths
 >c‹e->
n_qths_waô
 + c‹e->
n_qths_waked
 + c‹e->
¡hªads_ru¬ög
 +

104 
c‹e
->
¡hªads_ªÆ_‰ì
);

106 i‡((
c‹e
->
∑u£d
 || !c‹e->
≈ídögs
Ë&& !c‹e->
n_qdi•©chs
) {

107 i‡(
CORE_F_dy«mic
 & 
c‹e
->
lÊags
)

108 
ok
 = !
c‹e
->
¡hªads_ru¬ög
;

110 i‡(!
c‹e
->
GC
 || !c‹e->GC->
b_waked
)

111 
ok
 = (
c‹e
->
n_qths
 =(c‹e->
n_qths_waô
 + c‹e->
n_qths_waked
));

113 
ok
 = (
c‹e
->
n_qths
 =(c‹e->
n_qths_waô
 + c‹e->
n_qths_waked
 +

114 ((
c‹e
->
GC
->
°©us
 =
THREAD_STAT_WAIT
) ? 0 : 1)));

116 i‡(!
ok
 && 
c‹e
->
evít_‰ì_nŸifõd
)

117 
c‹e
->
evít_‰ì_nŸifõd
 = 0;

118  
ok
;

119 
	}
}

121 
ölöe
 
	$˝oﬁ_c‹e_evít_‰ì_åy_nŸifyl
(
˝oﬁ_c‹e_t
 *
c‹e
)

123 i‡(
	`˝oﬁ_c‹e_Æl_d⁄ñ
(
c‹e
Ë&& !c‹e->
evít_‰ì_nŸifõd
) {

124 
c‹e
->
evít_‰ì_nŸifõd
 = 1;

125 i‡(
c‹e
->
me
->
nŸifyl
)

126 
c‹e
->
me
->
	`nŸifyl
(c‹e->
¥iv
, 
eEvít_F_‰ì
);

128 
	}
}

135 
ölöe
 
	$˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
˝oﬁ_c‹e_t
 *
c‹e
)

137  (!
c‹e
->
¡hªads_ªÆ_‰ì
 && !c‹e->
n_qths_waked
 &&

138 (
c‹e
->
maxthªads
 !c‹e->
¡hªads_ªÆ_poﬁ
 || c‹e->
n_qths_waô
));

139 
	}
}

144 
ölöe
 
˝oﬁ_c‹e_°©
 *
	$˝oﬁ_c‹e_°©l
(
˝oﬁ_c‹e_t
 *
c‹e
, 
˝oﬁ_c‹e_°©
 *
°©
)

146 
˝oﬁ_c‹e_°©
 
__°©
;

148 i‡(!
°©
)

149 
°©
 = &
__°©
;

151 
°©
->
desc
 = 
c‹e
->desc;

152 
°©
->
°¨t
 = 
c‹e
->start;

153 
°©
->
°©us
 = 
	`˝oﬁ_c‹e_°©u¶
(
c‹e
);

154 
°©
->
max
 = 
c‹e
->
maxthªads
;

155 
°©
->
mö
 = 
c‹e
->
möthªads
;

156 
°©
->
u£r_ªf
 = 
c‹e
->user_ref;

157 
°©
->
a˘timeo
 = 
c‹e
->acttimeo;

158 
°©
->
øndtimeo
 = 
c‹e
->randtimeo;

159 
°©
->
∑u£d
 = 
c‹e
->paused;

160 
°©
->
nˇches
 = 
c‹e
->
ˇche_èsk
 ? 
	`smˇche_∆
(core->cache_task) : 0;

161 
°©
->
n_q≥ndögs
 = 
c‹e
->
≈ídögs
;

162 
°©
->
n_qdi•©chs
 = 
c‹e
->n_qdispatchs;

163 
°©
->
n_qths
 = 
c‹e
->n_qths;

164 
°©
->
n_qths_waô
 = 
c‹e
->n_qths_wait;

165 
°©
->
n_qths_waked
 = 
c‹e
->n_qths_waked;

166 
°©
->
¡hs_dyög
 = 
c‹e
->
¡hªads_dyög
;

167 
°©
->
¡hs_ru¬ög
 = 
c‹e
->
¡hªads_ru¬ög
;

168 
°©
->
¡hs_dyög_run
 = 
c‹e
->
¡hªads_dyög_run
;

169 
°©
->
¡hs_‰ì_ef„˘ive
 = 
c‹e
->
¡hªads_ªÆ_‰ì
;

170 
°©
->
¡hs_ef„˘ive
 = 
c‹e
->
¡hªads_ªÆ_poﬁ
;

171 
°©
->
¡hs_≥ak
 = 
c‹e
->
¡hªads_≥ak
;

173  
°©
;

174 
	}
}

177 
ölöe
 
	$˝oﬁ_c‹e_objs_loˇl_Êushl
(
thªad_t
 *
£lf
)

179 i‡(
	`smlök_q_size
(&
£lf
->
qˇche
)) {

180 i‡(
	`smˇche_auto_lock
(
£lf
->
c‹e
->
ˇche_èsk
))

181 
	`smˇche_add_q_dú
(
£lf
->
c‹e
->
ˇche_èsk
, &£lf->
qˇche
);

183 
	`smˇche_add_ql_dú
(
£lf
->
c‹e
->
ˇche_èsk
, &£lf->
qˇche
);

185 
£lf
->
Êags
 &~
THREAD_STAT_FLUSH
;

186 
	}
}

188 
ölöe
 
	$˝oﬁ_c‹e_objs_loˇl_Êushl_Æl
(
˝oﬁ_c‹e_t
 *
c‹e
)

190 
thªad_t
 *
thªad
;

195 
	`li°_f‹_óch_íåy
(
thªad
, &
c‹e
->
ths
, 
thªad_t
, 
lök
) {

196 i‡(!
	`smlök_q_em±y
(&
thªad
->
qˇche
))

197 
thªad
->
Êags
 |
THREAD_STAT_FLUSH
;

199 
	}
}

201 
ölöe
 
	$˝oﬁ_c‹e_objs_loˇl_Êush
(
thªad_t
 *
£lf
)

203 i‡(
	`smlök_q_size
(&
£lf
->
qˇche
))

204 
	`smˇche_add_q_dú
(
£lf
->
c‹e
->
ˇche_èsk
, &£lf->
qˇche
);

206 i‡(
THREAD_STAT_FLUSH
 & 
£lf
->
Êags
) {

207 
	`OSPX_±hªad_muãx_lock
(&
£lf
->
c‹e
->
mut
);

208 
£lf
->
Êags
 &~
THREAD_STAT_FLUSH
;

209 
	`OSPX_±hªad_muãx_u∆ock
(&
£lf
->
c‹e
->
mut
);

211 
	}
}

213 
ölöe
 
	$˝oﬁ_c‹e_objs_loˇl_Êush_Æl
(
˝oﬁ_c‹e_t
 *
c‹e
)

215 
thªad_t
 *
thªad
;

220 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

221 
	`li°_f‹_óch_íåy
(
thªad
, &
c‹e
->
ths
, 
thªad_t
, 
lök
) {

222 i‡(!
	`smlök_q_em±y
(&
thªad
->
qˇche
))

223 
thªad
->
Êags
 |
THREAD_STAT_FLUSH
;

225 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

226 
	}
}

228 
ölöe
 
	$˝oﬁ_c‹e_objs_loˇl_°‹e
(
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
)

230 
	`smlök_q_push
(&
£lf
->
qˇche
, (*)
±ask
);

232 i‡(
£lf
->
loˇl_ˇche_limôed
 <
	`smlök_q_size
(&£lf->
qˇche
))

233 
	`˝oﬁ_c‹e_objs_loˇl_Êush
(
£lf
);

234 
	}
}

	@pool/core/cpool_core_gc.c

10 
	~"˝oﬁ_c‹e.h
"

11 
	~"˝oﬁ_c‹e_gc.h
"

13 
ölöe
 
	$˝oﬁ_c‹e_GC_timî_°¨é
(
˝oﬁ_c‹e_t
 *
c‹e
)

15 
c‹e
->
us_œ°_gc˛ock
 = 
	`us_°¨å
();

16 
c‹e
->
us_gc_À·_timeo
 = c‹e->
ˇâr
.
ª°_timeo
 * 1000;

18 i‡(
c‹e
->
b_GC_dñay
) {

19 
c‹e
->
b_GC_dñay
 = 0;

20 
c‹e
->
us_gc_À·_timeo
 +c‹e->
ˇâr
.
ª°_timeo
 * 1000;

22 
	}
}

23 
	#˝oﬁ_c‹e_GC_timî_°¨t
(
c‹e
Ë
	`˝oﬁ_c‹e_GC_timî_°¨é
(c‹e)

	)

26 
	$˝oﬁ_c‹e_GC_run
(
basic_èsk_t
 *
±sk
)

28 
thªad_t
 *
thªad
 = 
±sk
->
èsk_¨g
;

30 #i‡!
	`deföed
(
NDEBUG
Ë&& !deföed(
_WIN
Ë&& !deföed(
OS_T_OSX
)

31 
	`¥˘l
(
PR_SET_NAME
, 
±sk
->
èsk_desc
);

33 i‡(
thªad
->
nˇche_limô
 < 0) {

34 
smlök_q_t
 
dummy_q
;

40 
	`smˇche_ª£t
(
thªad
->
c‹e
->
ˇche_èsk
, &
dummy_q
);

43 
	`smˇche_Êush
(
thªad
->
c‹e
->
ˇche_èsk
,Åhªad->
nˇche_limô
);

47 
	`˝oﬁ_c‹e_GC_timî_°¨t
(
thªad
->
c‹e
);

48 
	}
}

51 
	$˝oﬁ_c‹e_GC_öô
(
˝oﬁ_c‹e_t
 *
c‹e
)

56 
c‹e
->
sys_GC_èsk
.
èsk_desc
 = "sys/GC";

57 
c‹e
->
sys_GC_èsk
.
èsk_run
 = 
˝oﬁ_c‹e_GC_run
;

59 
	}
}

62 
	$˝oﬁ_c‹e_GC_deöô
(
˝oﬁ_c‹e_t
 *
c‹e
)

64 
	}
}

66 
ölöe
 

67 
	$˝oﬁ_c‹e_GC_ac˚s¶
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

69  !
c‹e
->
GC
 || c‹e->GC =
£lf
;

70 
	}
}

72 
ölöe
 

73 
	$˝oﬁ_c‹e_GC_expúe
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

75 
us
 = 
	`us_ídr
(
c‹e
->
us_œ°_gc˛ock
);

77  (
us
 + 50000Ë>
c‹e
->
us_gc_À·_timeo
 || !us;

78 
	}
}

80 
ölöe
 

81 
	$˝oﬁ_c‹e_GC_joöl
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

83 
	`as£π
 (!(
£lf
->
Êags
 & 
THREAD_STAT_GC
));

85 
c‹e
->
GC
 = 
£lf
;

86 
£lf
->
Êags
 |
THREAD_STAT_GC
;

87 
£lf
->
nc⁄t_GC_cou¡îs
 = 0;

89 
	`˝oﬁ_c‹e_evít_‰ì_åy_nŸifyl
(
c‹e
);

90 #i‚de‡
NDEBUG


91 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

93 
£lf
, 
	`smˇche_∆
(
c‹e
->
ˇche_èsk
));

96 i‡(!
c‹e
->
us_œ°_gc˛ock
) {

97 
c‹e
->
us_œ°_gc˛ock
 = 
	`us_°¨å
();

98 
c‹e
->
us_gc_À·_timeo
 = 0;

100 
	`as£π
 (
c‹e
->
us_gc_À·_timeo
 >= 0);

103 
	}
}

105 
ölöe
 

106 
	$˝oﬁ_c‹e_GC_c⁄töuñ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

108 
nˇched
 = 
	`smˇche_∆
(
c‹e
->
ˇche_èsk
);

110 i‡(!
nˇched
 ||Çˇched < 
c‹e
->
ˇâr
.
nGC_ˇche
) {

111 i‡(
THREAD_STAT_GC
 & 
£lf
->
Êags
)

112 
	`˝oﬁ_c‹e_GC_Àavñ
(
c‹e
, 
£lf
);

119 i‡(
THREAD_STAT_GC
 & 
£lf
->
Êags
) {

120 i‡(
c‹e
->
b_GC_dñay
 && 
nˇched
 < 400) {

121 
	`˝oﬁ_c‹e_GC_timî_°¨é
(
c‹e
);

122 
£lf
->
nc⁄t_GC_cou¡îs
 = 0;

125 } i‡(!
	`˝oﬁ_c‹e_GC_joöl
(
c‹e
, 
£lf
))

128 i‡(
	`˝oﬁ_c‹e_GC_expúe
(
c‹e
, 
£lf
)) {

129 ++ 
£lf
->
nc⁄t_GC_cou¡îs
;

130 
£lf
->
nˇche_limô
 = 
nˇched
 - 
c‹e
->
ˇâr
.
nGC_⁄e_time
;

134 
£lf
->
nc⁄t_GC_cou¡îs
 = 0;

136 
	}
}

142 
	$˝oﬁ_c‹e_GC_gëèskl
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

147 i‡(!
c‹e
->
ˇche_èsk
 || !
	`˝oﬁ_c‹e_GC_ac˚s¶
(c‹e, 
£lf
))

155 i‡(!(
CORE_F_¸óãd
 & 
c‹e
->
°©us
Ë&& c‹e->
ªÀa£_˛ónög
)

158 
	`˝oﬁ_c‹e_objs_loˇl_Êushl
(
£lf
);

159 i‡(!
	`smˇche_∆
(
c‹e
->
ˇche_èsk
))

163 
	`˝oﬁ_c‹e_objs_loˇl_Êushl_Æl
(
c‹e
);

169 i‡(!
	`˝oﬁ_c‹e_GC_c⁄töuñ
(
c‹e
, 
£lf
))

171 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

173 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_GC
;

174 ++ 
£lf
->
nc⁄t_GC_cou¡îs
;

176 
__cuπask
 = &
c‹e
->
sys_GC_èsk
;

177 
__cuπask
->
èsk_¨g
 = (*)
£lf
;

180 
	}
}

	@pool/core/cpool_core_gc.h

1 #i‚de‡
__CPOOL_CORE_GC_H__


2 
	#__CPOOL_CORE_GC_H__


	)

13 
	~"timî.h
"

14 
	~"˝oﬁ_c‹e.h
"

16 
˝oﬁ_c‹e_GC_öô
(
˝oﬁ_c‹e_t
 *
c‹e
);

17 
˝oﬁ_c‹e_GC_deöô
(
˝oﬁ_c‹e_t
 *
c‹e
);

19 
ölöe
 
	$˝oﬁ_c‹e_GC_Àavñ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

21 
	`as£π
 (
£lf
->
Êags
 & 
THREAD_STAT_GC
);

23 #i‚de‡
NDEBUG


24 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

26 
£lf
, 
	`smˇche_∆
(
c‹e
->
ˇche_èsk
));

28 
£lf
->
Êags
 &~
THREAD_STAT_GC
;

29 
c‹e
->
GC
 = 
NULL
;

30 
	}
}

35 
	#˝oﬁ_c‹e_GC_Àave
(
c‹e
, 
£lf
Ë
	`˝oﬁ_c‹e_GC_Àavñ
(c‹e, sñf)

	)

37 
ölöe
 
	$˝oﬁ_c‹e_GC_gëtimeﬁ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
)

39 
us
;

41 
	`as£π
 (
c‹e
->
us_gc_À·_timeo
 >= 0);

43 i‡(!
c‹e
->
us_gc_À·_timeo
 || !(
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(core)))

44 
c‹e
->
us_gc_À·_timeo
 = c‹e->
ˇâr
.
ª°_timeo
 * 1000;

46 
us
 = 
	`us_ídr
(
c‹e
->
us_œ°_gc˛ock
);

47 i‡(
c‹e
->
us_gc_À·_timeo
 <
us
)

48 
c‹e
->
us_gc_À·_timeo
 = 0;

50 
c‹e
->
us_gc_À·_timeo
 -
us
;

51 
c‹e
->
us_œ°_gc˛ock
 = 
	`us_°¨å
();

53 
£lf
->
œ°_to
 = 
	`max
(1, 
c‹e
->
us_gc_À·_timeo
 / 1000);

55  
£lf
->
œ°_to
;

56 
	}
}

61 
˝oﬁ_c‹e_GC_gëèskl
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
);

66 
ölöe
 
	$˝oﬁ_c‹e_¶ow_GC
(
˝oﬁ_c‹e_t
 *
c‹e
)

72 i‡(
c‹e
->
GC
)

73 
c‹e
->
b_GC_dñay
 = 1;

74 
	}
}

79 
˝oﬁ_c‹e_åy_GC
(
˝oﬁ_c‹e_t
 *
c‹e
);

	@pool/core/cpool_core_struct.h

1 #i‚de‡
__CPOOL_CORE_STRUCT_H__


2 
	#__CPOOL_CORE_STRUCT_H__


	)

14 
	~<time.h
>

15 
	~"o•x_com∑tibÀ.h
"

16 
	~"li°.h
"

17 
	~"objpoﬁ.h
"

19 
˝oﬁ_c‹e
 
	t˝oﬁ_c‹e_t
;

20 
˝oﬁ_thªad
 
	tthªad_t
;

24 
	meRós⁄_ok
 = 0x01,

25 
	meRós⁄_ªmoved
 = 0x02,

26 
	meRós⁄_c‹e_de°royög
 = 0x04,

30 
	sbasic_èsk
 {

34 c⁄° *
	mèsk_desc
;

39 (*
	mèsk_run
)(
basic_èsk
 *
	m±ask
);

44 (*
	mèsk_îr_h™dÀr
)(
basic_èsk
 *
	m±ask
, 
	meRós⁄s
);

49 *
	mèsk_¨g
;

54 
	mèsk_code
;

59 
li°_hód
 
	mlök
;

61 } 
	tbasic_èsk_t
;

62 
	#TASK_CAST_CORE
(
±ask
Ë((
basic_èsk_t
 *)’èsk))

	)

64 
	eeEvít
 {

65 
	meEvít_F_thªad
 = 0x01,

66 
	meEvít_F_‰ì
 = 0x02,

67 
	meEvít_F_c‹e_su•íd
 = 0x04,

68 
	meEvít_F_c‹e_ªsume
 = 0x08,

69 
	meEvít_F_de°royög
 = 0x10,

70 
	meEvít_F_shutdown
 = 0x20,

71 } 
	teEvít_t
;

73 
	s˝oﬁ_c‹e_mëhod
 {

74 c⁄° * 
	mdesc
;

75 c⁄° 
size_t
 
	mèsk_size
;

77 (*
	m˘‹
)(*
	m¥iv
);

78 (*
	mnŸifyl
)(*
	m¥iv
, 
eEvít_t
 
	mevíts
);

79 (*
	mgëèsk
)(*
	m¥iv
, 
thªad_t
 *
	m£lf
);

80 (*
	mîr_ªas⁄s
)(
basic_èsk_t
 *
	m±ask
);

81 (*
	mföished
)(*
	m¥iv
, 
thªad_t
 *
	m£lf
, 
basic_èsk_t
 *
	m±ask
, 
	meRós⁄s
);

82 (*
	mdt‹
)(*
	m¥iv
);

83 } 
	t˝oﬁ_c‹e_mëhod_t
;

87 
	mTHREAD_STAT_INIT
 = 0,

88 
	mTHREAD_STAT_JOIN
,

89 
	mTHREAD_STAT_WAIT
 = 2,

90 
	mTHREAD_STAT_RUN
,

91 
	mTHREAD_STAT_COMPLETE
 = 4,

92 
	mTHREAD_STAT_TIMEDOUT
,

93 
	mTHREAD_STAT_FREE
 = 6,

94 
	mTHREAD_STAT_FORCE_QUIT
,

95 
	mTHREAD_STAT_LEAVE
 = 8,

96 
	mTHREAD_STAT_RM
 = (
uöt16_t
)0x1000,

97 
	mTHREAD_STAT_GC
 = (
uöt16_t
)0x2000,

98 
	mTHREAD_STAT_FLUSH
 = (
uöt16_t
)0x4000,

99 
	mTHREAD_STAT_INNER
 = 
THREAD_STAT_RM
|
THREAD_STAT_GC
|
THREAD_STAT_FLUSH


107 
	mTASK_TYPE_NORMAL
,

112 
	mTASK_TYPE_DISPATCHED
,

117 
	mTASK_TYPE_GC
,

121 
	sc⁄d_©å
 {

122 
	möôülized
;

123 
OSPX_±hªad_c⁄d_t
 
	mc⁄d
;

124 } 
	tc⁄d_©å_t
;

127 
	s˝oﬁ_thªad
 {

128 
OSPX_±hªad_t
 
	mthªad_id
;

129 
li°_hód
 
	mthq
;

130 
li°_hód
 
	mlök_‰ì
;

132 
	mrun
;

136 
	m°ru˘uª_ªÀa£
;

141 
	m°©us
;

142 
	mÊags
;

147 #i‚de‡
NDEBUG


148 
	m¡asks_¥o˚s£d
;

153 
	mœ°_to
;

158 
	mnc⁄t_GC_cou¡îs
;

163 
	mnˇche_limô
;

168 
	måa˚_¨gs
;

169 
	mèsk_ty≥
;

170 
basic_èsk_t
 *
	mcuºít_èsk
;

175 
˝oﬁ_c‹e_t
 *
	mc‹e
;

176 
li°_hód
 
	mlök
;

182 
li°_hód
 
	mrun_lök
;

187 
li°_hód
 
	mdi•©ch_q
;

192 
	mloˇl_ˇche_limôed
;

193 
smlök_q_t
 
	mqˇche
;

198 
	mb_waked
;

199 #i‚de‡
NDEBUG


200 
	mn_ªu£d
;

202 
c⁄d_©å
 *
	mˇâr
;

204 
	#__cuπask
 
£lf
->
cuºít_èsk


	)

208 
	mCORE_F_¸ótög
 = ()0x01,

209 
	mCORE_F_¸óãd
 = ()0x02,

210 
	mCORE_F_de°royög
 = ()0x04,

211 
	mCORE_F_de°royed
 = ()0x08,

212 
	mCORE_F_dy«mic
 = ()0x0100

216 
	sˇche_©å
 {

217 
	mnGC_ˇche
;

218 
	mnGC_wakeup
;

220 
	mnGC_⁄e_time
;

221 
	mª°_timeo
;

222 
	mdñay_timeo
;

223 } 
	tˇche_©å_t
;

226 
	s˝oﬁ_c‹e
 {

227 c⁄° *
	mdesc
;

228 
time_t
 
	m°¨t
;

230 
	m°©us
;

231 
	mlÊags
;

232 
	m∑u£d
;

233 
	mªÀa£_˛ónög
;

236 c⁄° 
˝oﬁ_c‹e_mëhod_t
 *
	mme
;

239 *
	m¥iv
;

240 
objpoﬁ_t
 
	mobjp_èsk
;

241 
smˇche_t
 *
	mˇche_èsk
;

242 
ˇche_©å
 
	mˇâr
;

243 
	mthªad_loˇl_ˇche_limôed
;

248 
	mevít_‰ì_nŸifõd
;

253 
	mb_GC_dñay
;

254 
basic_èsk_t
 
	msys_GC_èsk
;

255 
	mus_gc_À·_timeo
;

256 
uöt64_t
 
	mus_œ°_gc˛ock
;

257 
thªad_t
 *
	mGC
;

264 
	mªf
, 
	mu£r_ªf
;

265 
time_t
 
	mçoﬁ_¸óãd
;

266 (*
	m©exô
)(*);

267 *
	m©exô_¨g
;

270 
	m¸âime
;

273 
	ma˘timeo
, 
	møndtimeo
;

274 
	mlimô_thªads_¸óã_≥r_time
;

277 
	m≈ídögs
;

280 *
	mbuf„r
;

281 
	mmaxthªads
, 
	mmöthªads
;

282 
li°_hód
 
	mths
, 
	mths_waôq
;

283 
	mn_qths
, 
	mn_qths_waked
, 
	mn_qths_waô
;

284 
	m¡hªads_ru¬ög
, 
	m¡hªads_dyög
, 
	m¡hªads_dyög_run
;

285 
	m¡hªads_ªÆ_¶ìpög
, 
	m¡hªads_ªÆ_poﬁ
, 
	m¡hªads_ªÆ_‰ì
;

286 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_ths
;

287 
OSPX_±hªad_©å_t
 
	mth©å
;

288 
smˇche_t
 
	mˇche_thªad
;

291 
	m¡hªads_≥ak
;

294 
	meRós⁄s0
, 
	meRós⁄s1
;

295 
	mn_qdi•©chs
;

296 
li°_hód
 
	mdi•©ch_q
;

297 
OSPX_±hªad_muãx_t
 
	mmut
;

303 
	s˝oﬁ_c‹e_°©
 {

304 c⁄° *
	mdesc
;

305 
time_t
 
	m°¨t
;

306 
	m°©us
;

307 
	mu£r_ªf
;

308 
	mmax
, 
	mmö
;

309 
	ma˘timeo
;

310 
	møndtimeo
;

311 
	m∑u£d
;

312 
	mnˇches
;

313 
	mn_q≥ndögs
;

314 
	mn_qdi•©chs
;

315 
	mn_qths
;

316 
	mn_qths_waô
;

317 
	mn_qths_waked
;

318 
	m¡hs_dyög
;

319 
	m¡hs_ru¬ög
;

320 
	m¡hs_dyög_run
;

321 
	m¡hs_‰ì_ef„˘ive
;

322 
	m¡hs_ef„˘ive
;

323 
	m¡hs_≥ak
;

	@pool/core/cpool_core_thread_status.h

1 #i‚de‡
__CPOOL_CORE_THRAD_STATUS_H__


2 
	#__CPOOL_CORE_THRAD_STATUS_H__


	)

14 
	~"msglog.h
"

15 
	~"˝oﬁ_c‹e.h
"

16 
	~"˝oﬁ_c‹e_gc.h
"

18 
	#M_THREAD
 "thªad"

	)

42 
ölöe
 

43 
	$˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
°©us
)

45 
	`VERIFY
(
c‹e
, 
£lf
);

46 
	`as£π
 (
°©us
 !
£lf
->status);

48 #i‡!
	`deföed
(
NDEBUG
Ë&& deföed(
CONFIG_TRACE_THREAD_STATUS
)

49 
	`MSG_log
(
M_THREAD
, 
LOG_TRACE
,

51 
£lf
, sñf->
Êags
, sñf->
b_waked
, sñf->
°©us
, status);

54 
°©us
) {

55 
THREAD_STAT_JOIN
:

57 
THREAD_STAT_WAIT
:

58 i‡(!(
THREAD_STAT_RM
 & 
£lf
->
Êags
)) {

59 -- 
c‹e
->
¡hªads_ªÆ_‰ì
;

60 ++ 
c‹e
->
¡hªads_ªÆ_¶ìpög
;

65 
	`˝oﬁ_c‹e_objs_loˇl_Êushl
(
£lf
);

70 
£lf
->
b_waked
 = 0;

71 
	`li°_add
(&
£lf
->
run_lök
, &
c‹e
->
ths_waôq
);

72 ++ 
c‹e
->
n_qths_waô
;

74 
	`˝oﬁ_c‹e_evít_‰ì_åy_nŸifyl
(
c‹e
);

76 
THREAD_STAT_TIMEDOUT
: {

85 i‡(!
£lf
->
b_waked
) {

86 
	`li°_dñ
(&
£lf
->
run_lök
);

87 -- 
c‹e
->
n_qths_waô
;

89 i‡(!((
THREAD_STAT_RM
|
THREAD_STAT_GC
Ë& 
£lf
->
Êags
)) {

90 i‡((
c‹e
->
¡hªads_ªÆ_poﬁ
 > c‹e->
möthªads
Ë&& !c‹e->
n_qdi•©chs
 &&

91 ((!
c‹e
->
≈ídögs
Ë|| c‹e->
∑u£d
)) {

92 
n
 = ()
	`time
(
NULL
);

96 i‡(
c‹e
->
¸âime
 > 
n
 || core->crttime + 4 <=Ç) {

97 
£lf
->
Êags
 |
THREAD_STAT_RM
;

99 ++ 
c‹e
->
¡hªads_dyög
;

100 -- 
c‹e
->
¡hªads_ªÆ_poﬁ
;

107 
THREAD_STAT_FORCE_QUIT
: {

108 i‡(
THREAD_STAT_RM
 & 
£lf
->
Êags
)

109 
	`as£π
 (!
£lf
->
run
);

111 
£lf
->
Êags
 |
THREAD_STAT_RM
;

112 ++ 
c‹e
->
¡hªads_dyög
;

113 -- 
c‹e
->
¡hªads_ªÆ_poﬁ
;

114 -- 
c‹e
->
¡hªads_ªÆ_‰ì
;

115 
£lf
->
run
 = 0;

119 
THREAD_STAT_RUN
:

120 ++ 
c‹e
->
¡hªads_ru¬ög
;

122 i‡(
	`likñy
(0 =
£lf
->
Êags
Ë|| !(
THREAD_STAT_RM
 & self->flags))

123 -- 
c‹e
->
¡hªads_ªÆ_‰ì
;

128 ++ 
c‹e
->
¡hªads_dyög_run
;

137 i‡(!
c‹e
->
¡hªads_ªÆ_‰ì
 && !c‹e->
n_qths_waked
 &&

138  
c‹e
->
≈ídögs
)

139 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
c‹e
, 
£lf
);

141 #i‚de‡
NDEBUG


142 
	`MSG_log
(
M_THREAD
, 
LOG_TRACE
,

144 
c‹e
->
desc
, c‹e, 
£lf
, (£lf->
èsk_ty≥
 =
TASK_TYPE_DISPATCHED
Ë? "DISPATCH" : 
__cuπask
->
èsk_desc
,

145 
__cuπask
, 
£lf
->
¡asks_¥o˚s£d
, 
c‹e
->
≈ídögs
, c‹e->
n_qdi•©chs
);

148 
THREAD_STAT_COMPLETE
:

149 -- 
c‹e
->
¡hªads_ru¬ög
;

152 i‡(
	`u∆ikñy
(
THREAD_STAT_RM
 & 
£lf
->
Êags
))

153 -- 
c‹e
->
¡hªads_dyög_run
;

155 ++ 
c‹e
->
¡hªads_ªÆ_‰ì
;

157 i‡(
	`likñy
(0 =
£lf
->
Êags
Ë|| 
THREAD_STAT_FLUSH
 == self->flags)

158 ++ 
c‹e
->
¡hªads_ªÆ_‰ì
;

160 i‡(
THREAD_STAT_RM
 & 
£lf
->
Êags
)

161 -- 
c‹e
->
¡hªads_dyög_run
;

163 
	`as£π
 (
£lf
->
Êags
 & 
THREAD_STAT_GC
);

166 #i‚de‡
NDEBUG


167 ++ 
£lf
->
¡asks_¥o˚s£d
;

176 
THREAD_STAT_FREE
:

178 
THREAD_STAT_LEAVE
:

182 
	`li°_dñ
(&
£lf
->
lök
);

183 -- 
c‹e
->
n_qths
;

185 i‡(
THREAD_STAT_RM
 & 
£lf
->
Êags
) {

186 
	`as£π
 (
c‹e
->
¡hªads_dyög
 > 0 && !
£lf
->
run
);

188 i‡(!-- 
c‹e
->
¡hªads_dyög
)

189 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
c‹e
->
c⁄d_ths
);

194 i‡(
	`li°_em±y
(&
c‹e
->
ths
))

195 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
c‹e
->
c⁄d_ths
);

197 i‡(
THREAD_STAT_GC
 & 
£lf
->
Êags
)

198 
	`˝oﬁ_c‹e_GC_Àavñ
(
c‹e
, 
£lf
);

203 
	`˝oﬁ_c‹e_objs_loˇl_Êushl
(
£lf
);

211 
c‹e
->
¸âime
 = ()
	`time
(
NULL
);

212 #i‚de‡
NDEBUG


213 
	`MSG_log
(
M_THREAD
, 
LOG_DEBUG
,

215 
c‹e
->
desc
, c‹e, 
£lf
, sñf->
¡asks_¥o˚s£d
, ()£lf->
°©us
, sètus, c‹e->
n_qths
, c‹e->
¡hªads_ªÆ_poﬁ
,

216 
c‹e
->
≈ídögs
, c‹e->
n_qdi•©chs
);

218 
	`˝oﬁ_c‹e_evít_‰ì_åy_nŸifyl
(
c‹e
);

225 i‡(
THREAD_STAT_WAIT
 =
£lf
->
°©us
) {

226 i‡(
£lf
->
b_waked
) {

227 
	`as£π
 (
THREAD_STAT_FREE
 =
°©us
 ||

228 
THREAD_STAT_TIMEDOUT
 =
°©us
);

230 
	`as£π
 (
c‹e
->
n_qths_waked
 > 0 && 
£lf
->
b_waked
);

231 -- 
c‹e
->
n_qths_waked
;

240 i‡(
THREAD_STAT_RM
 & 
£lf
->
Êags
 && !£lf->
run
) {

241 i‡(!
c‹e
->
¡hªads_ªÆ_‰ì
 && !c‹e->
n_qths_waked
 &&

242  
c‹e
->
≈ídögs
)

243 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
c‹e
, 
£lf
);

246 
	`as£π
 (
c‹e
->
¡hªads_ªÆ_¶ìpög
 > 0 &&

247 (!(
THREAD_STAT_RM
 & 
£lf
->
Êags
) ||

248 
THREAD_STAT_TIMEDOUT
 =
°©us
));

249 -- 
c‹e
->
¡hªads_ªÆ_¶ìpög
;

251 i‡(
THREAD_STAT_RM
 & 
£lf
->
Êags
)

252 
£lf
->
run
 = 0;

254 ++ 
c‹e
->
¡hªads_ªÆ_‰ì
;

256 
	`as£π
 (!(
THREAD_STAT_RM
 & 
£lf
->
Êags
Ë|| !£lf->
run
);

258 
	`VERIFY
(
c‹e
, 
£lf
);

260 
£lf
->
°©us
 = status;

261 
	}
}

266 
˝oﬁ_c‹e_thªad_°©us_ch™gñ_wøµî
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
°©us
);

267 
˝oﬁ_c‹e_thªad_°©us_ch™ge
(
˝oﬁ_c‹e_t
 *
c‹e
, 
thªad_t
 *
£lf
, 
°©us
);

	@pool/core/list.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

16 #unde‡
NULL


17 #ifde‡
__˝lu•lus


18 
	#NULL
 0

	)

20 
	#NULL
 (*)0

	)

21 #i‡
deföed
(
_WIN32
Ë&& !deföed(
ölöe
)

22 
	#ölöe
 
__ölöe


	)

26 
	#LIST_POISON1
 
NULL


	)

27 
	#LIST_POISON2
 
NULL


	)

29 
	#off£t
(
ty≥
, 
membî
Ë(*)(&(—y≥ *)0)->membî)

	)

30 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
Ë(—y≥ *)((*Ìå - 
	`off£t
—y≥, membî)))

	)

42 
	sli°_hód
 {

43 
li°_hód
 *
	m√xt
, *
	m¥ev
;

46 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

48 
	#LIST_HEAD
(
«me
) \

49 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

51 
ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

53 
li°
->
√xt
 =Üist;

54 
li°
->
¥ev
 =Üist;

55 
	}
}

63 
ölöe
 
	$__li°_add
(
li°_hód
 *
n
,

64 
li°_hód
 *
¥ev
,

65 
li°_hód
 *
√xt
)

67 
√xt
->
¥ev
 = 
n
;

68 
n
->
√xt
 =Çext;

69 
n
->
¥ev
 =Örev;

70 
¥ev
->
√xt
 = 
n
;

71 
	}
}

81 
ölöe
 
	$li°_add
(
li°_hód
 *
n
, li°_hód *
hód
)

83 
	`__li°_add
(
n
, 
hód
, hód->
√xt
);

84 
	}
}

95 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
n
, li°_hód *
hód
)

97 
	`__li°_add
(
n
, 
hód
->
¥ev
, head);

98 
	}
}

107 
ölöe
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

109 
√xt
->
¥ev
 =Örev;

110 
¥ev
->
√xt
 =Çext;

111 
	}
}

119 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

121 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

122 #i‚de‡
NDEBUG


126 
íåy
->
√xt
 = 
LIST_POISON1
;

127 
íåy
->
¥ev
 = 
LIST_POISON2
;

129 
	}
}

138 
ölöe
 
	$li°_ª∂a˚
(
li°_hód
 *
ﬁd
,

139 
li°_hód
 *
n
)

141 
n
->
√xt
 = 
ﬁd
->next;

142 
n
->
√xt
->
¥ev
 =Ç;

143 
n
->
¥ev
 = 
ﬁd
->prev;

144 
n
->
¥ev
->
√xt
 =Ç;

145 
	}
}

147 
ölöe
 
	$li°_ª∂a˚_öô
(
li°_hód
 *
ﬁd
,

148 
li°_hód
 *
n
)

150 
	`li°_ª∂a˚
(
ﬁd
, 
n
);

151 
	`INIT_LIST_HEAD
(
ﬁd
);

152 
	}
}

158 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

160 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

161 
	`INIT_LIST_HEAD
(
íåy
);

162 
	}
}

169 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

171 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

172 
	`li°_add
(
li°
, 
hód
);

173 
	}
}

180 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

181 
li°_hód
 *
hód
)

183 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

184 
	`li°_add_èû
(
li°
, 
hód
);

185 
	}
}

192 
ölöe
 
	$li°_is_œ°
(c⁄° 
li°_hód
 *
li°
,

193 c⁄° 
li°_hód
 *
hód
)

195  
li°
->
√xt
 =
hód
;

196 
	}
}

202 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

204  
hód
->
√xt
 == head;

205 
	}
}

220 
ölöe
 
	$li°_em±y_ˇªful
(c⁄° 
li°_hód
 *
hód
)

222 
li°_hód
 *
√xt
 = 
hód
->next;

223  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

224 
	}
}

230 
ölöe
 
	$li°_is_söguœr
(c⁄° 
li°_hód
 *
hód
)

232  !
	`li°_em±y
(
hód
Ë&& (hód->
√xt
 =hód->
¥ev
);

233 
	}
}

235 
ölöe
 
	$__li°_cut_posôi⁄
(
li°_hód
 *
li°
,

236 
li°_hód
 *
hód
, li°_hód *
íåy
)

238 
li°_hód
 *
n_fú°
 = 
íåy
->
√xt
;

239 
li°
->
√xt
 = 
hód
->next;

240 
li°
->
√xt
->
¥ev
 =Üist;

241 
li°
->
¥ev
 = 
íåy
;

242 
íåy
->
√xt
 = 
li°
;

243 
hód
->
√xt
 = 
n_fú°
;

244 
n_fú°
->
¥ev
 = 
hód
;

245 
	}
}

261 
ölöe
 
	$li°_cut_posôi⁄
(
li°_hód
 *
li°
,

262 
li°_hód
 *
hód
, li°_hód *
íåy
)

264 i‡(
	`li°_em±y
(
hód
))

266 i‡(
	`li°_is_söguœr
(
hód
) &&

267 (
hód
->
√xt
 !
íåy
 && head !=Éntry))

269 i‡(
íåy
 =
hód
)

270 
	`INIT_LIST_HEAD
(
li°
);

272 
	`__li°_cut_posôi⁄
(
li°
, 
hód
, 
íåy
);

273 
	}
}

275 
ölöe
 
	$__li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

276 
li°_hód
 *
¥ev
,

277 
li°_hód
 *
√xt
)

279 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

280 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

282 
fú°
->
¥ev
 =Örev;

283 
¥ev
->
√xt
 = 
fú°
;

285 
œ°
->
√xt
 =Çext;

286 
√xt
->
¥ev
 = 
œ°
;

287 
	}
}

294 
ölöe
 
	$li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

295 
li°_hód
 *
hód
)

297 i‡(!
	`li°_em±y
(
li°
))

298 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

299 
	}
}

306 
ölöe
 
	$li°_•li˚_èû
(
li°_hód
 *
li°
,

307 
li°_hód
 *
hód
)

309 i‡(!
	`li°_em±y
(
li°
))

310 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

311 
	}
}

320 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

321 
li°_hód
 *
hód
)

323 i‡(!
	`li°_em±y
(
li°
)) {

324 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

325 
	`INIT_LIST_HEAD
(
li°
);

327 
	}
}

337 
ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

338 
li°_hód
 *
hód
)

340 i‡(!
	`li°_em±y
(
li°
)) {

341 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

342 
	`INIT_LIST_HEAD
(
li°
);

344 
	}
}

352 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

353 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

363 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

364 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

371 
	#li°_f‹_óch
(
pos
, 
hód
) \

372 
pos
 = (
hód
)->
√xt
;Öos != (head); \

373 
pos
 =Öos->
√xt
)

	)

385 
	#__li°_f‹_óch
(
pos
, 
hód
) \

386 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

393 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

394 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

395 
pos
 =Öos->
¥ev
)

	)

403 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

404 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

405 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

413 
	#li°_f‹_óch_¥ev_ß„
(
pos
, 
n
, 
hód
) \

414 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev;Öos != (head); \

415 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

423 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
ty≥
, 
membî
) \

424 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
ty≥
, 
membî
); \

425 &
pos
->
membî
 !(
hód
); \

426 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
ty≥
, membî))

	)

434 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
ty≥
, 
membî
) \

435 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
ty≥
, 
membî
); \

436 &
pos
->
membî
 !(
hód
); \

437 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
ty≥
, membî))

	)

447 
	#li°_¥ï¨e_íåy
(
pos
, 
hód
, 
ty≥
, 
membî
) \

448 ((
pos
Ë? : 
	`li°_íåy
(
hód
, 
ty≥
, 
membî
))

	)

459 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
ty≥
, 
membî
) \

460 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
ty≥
, member); \

461 &
pos
->
membî
 !(
hód
); \

462 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
ty≥
, membî))

	)

473 
	#li°_f‹_óch_íåy_c⁄töue_ªvî£
(
pos
, 
hód
, 
ty≥
, 
membî
) \

474 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
ty≥
, member); \

475 &
pos
->
membî
 !(
hód
); \

476 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
ty≥
, membî))

	)

486 
	#li°_f‹_óch_íåy_‰om
(
pos
, 
hód
, 
ty≥
, 
membî
) \

487 ; &
pos
->
membî
 !(
hód
); \

488 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
ty≥
, membî))

	)

497 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
ty≥
, 
membî
) \

498 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
ty≥
, 
membî
), \

499 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
ty≥
, member); \

500 &
pos
->
membî
 !(
hód
); \

501 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
ty≥
, membî))

	)

513 
	#li°_f‹_óch_íåy_ß„_c⁄töue
(
pos
, 
n
, 
hód
, 
ty≥
, 
membî
) \

514 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
ty≥
, member), \

515 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
ty≥
, member); \

516 &
pos
->
membî
 !(
hód
); \

517 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
ty≥
, membî))

	)

529 
	#li°_f‹_óch_íåy_ß„_‰om
(
pos
, 
n
, 
hód
, 
ty≥
, 
membî
) \

530 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
ty≥
, member); \

531 &
pos
->
membî
 !(
hód
); \

532 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
ty≥
, membî))

	)

544 
	#li°_f‹_óch_íåy_ß„_ªvî£
(
pos
, 
n
, 
hód
, 
ty≥
, 
membî
) \

545 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
ty≥
, 
membî
), \

546 
n
 = 
	`li°_íåy
(
pos
->
membî
.
¥ev
, 
ty≥
, member); \

547 &
pos
->
membî
 !(
hód
); \

548 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
¥ev
, 
ty≥
, membî))

	)

557 
	shli°_hód
 {

558 
hli°_node
 *
	mfú°
;

561 
	shli°_node
 {

562 
hli°_node
 *
	m√xt
, **
	mµªv
;

565 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

566 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

567 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

568 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

570 
h
->
√xt
 = 
NULL
;

571 
h
->
µªv
 = 
NULL
;

572 
	}
}

574 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

576  !
h
->
µªv
;

577 
	}
}

579 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

581  !
h
->
fú°
;

582 
	}
}

584 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

586 
hli°_node
 *
√xt
 = 
n
->next;

587 
hli°_node
 **
µªv
 = 
n
->pprev;

588 *
µªv
 = 
√xt
;

589 i‡(
√xt
)

590 
√xt
->
µªv
 =Öprev;

591 
	}
}

593 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

595 
	`__hli°_dñ
(
n
);

596 
n
->
√xt
 = 
LIST_POISON1
;

597 
n
->
µªv
 = 
LIST_POISON2
;

598 
	}
}

600 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

602 i‡(!
	`hli°_unhashed
(
n
)) {

603 
	`__hli°_dñ
(
n
);

604 
	`INIT_HLIST_NODE
(
n
);

606 
	}
}

608 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

610 
hli°_node
 *
fú°
 = 
h
->first;

611 
n
->
√xt
 = 
fú°
;

612 i‡(
fú°
)

613 
fú°
->
µªv
 = &
n
->
√xt
;

614 
h
->
fú°
 = 
n
;

615 
n
->
µªv
 = &
h
->
fú°
;

616 
	}
}

619 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

620 
hli°_node
 *
√xt
)

622 
n
->
µªv
 = 
√xt
->pprev;

623 
n
->
√xt
 =Çext;

624 
√xt
->
µªv
 = &
n
->next;

625 *(
n
->
µªv
) =Ç;

626 
	}
}

629 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

630 
hli°_node
 *
√xt
)

632 
√xt
->√xà
n
->next;

633 
n
->
√xt
 =Çext;

634 
√xt
->
µªv
 = &
n
->next;

636 if(
√xt
->next)

637 
√xt
->√xt->
µªv
 = &next->next;

638 
	}
}

644 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

645 
hli°_hód
 *
n
)

647 
n
->
fú°
 = 
ﬁd
->first;

648 i‡(
n
->
fú°
)

649 
n
->
fú°
->
µªv
 = &n->first;

650 
ﬁd
->
fú°
 = 
NULL
;

651 
	}
}

653 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,ty≥,membî)

	)

655 
	#hli°_f‹_óch
(
pos
, 
hód
) \

656 
pos
 = (
hód
)->
fú°
;Öos; \

657 
pos
 =Öos->
√xt
)

	)

659 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

660 
pos
 = (
hód
)->
fú°
;Öo†&& (
n
 =Öos->
√xt
, 1); \

661 
pos
 = 
n
)

	)

670 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
ty≥
, 
membî
) \

671 
pos
 = (
hód
)->
fú°
; \

672 
pos
 && (
ços
 = 
	`hli°_íåy
’os, 
ty≥
, 
membî
), 1); \

673 
pos
 =Öos->
√xt
)

	)

681 
	#hli°_f‹_óch_íåy_c⁄töue
(
ços
, 
pos
, 
ty≥
, 
membî
) \

682 
pos
 = (pos)->
√xt
; \

683 
pos
 && (
ços
 = 
	`hli°_íåy
’os, 
ty≥
, 
membî
), 1); \

684 
pos
 =Öos->
√xt
)

	)

692 
	#hli°_f‹_óch_íåy_‰om
(
ços
, 
pos
, 
ty≥
, 
membî
) \

693 ; 
pos
 && (
ços
 = 
	`hli°_íåy
’os, 
ty≥
, 
membî
), 1); \

694 
pos
 =Öos->
√xt
)

	)

704 
	#hli°_f‹_óch_íåy_ß„
(
ços
, 
pos
, 
n
, 
hód
, 
ty≥
, 
membî
) \

705 
pos
 = (
hód
)->
fú°
; \

706 
pos
 && (
n
 =Öos->
√xt
, 1) && \

707 (
ços
 = 
	`hli°_íåy
(
pos
, 
ty≥
, 
membî
), 1); \

708 
pos
 = 
n
)

	)

	@pool/core/objpool.c

12 
	~"o•x_î∫o.h
"

13 
	~"objpoﬁ.h
"

14 
	~"msglog.h
"

15 
	~"˝oﬁ_c‹e_thªad_°©us.h
"

17 
	#M_FOBJP
 "FObjpoﬁ"

	)

20 
	$objpoﬁ_gë
(*
›aque
)

22 
size_t
 
i
 = 0, 
n
 = 0, 
n_öc
 = 0;

23 
objpoﬁ_t
 *
p
 = 
›aque
;

24 
smlök_q_t
 *
putq
;

25 *
m0
 = 
NULL
, *
m1
;

30 i‡(
p
->
≈ut
) {

31 
	`as£π
 (
p
->
¡ŸÆ
 >p->
≈ut
);

32 
i
=0; i<
p
->
iblocks
 &&Ö->
≈ut
 && 
n_öc
 < 5; i++) {

33 
putq
 = &
p
->
blocks
[
i
].putq;

40 i‡(!
	`smlök_q_em±y
(
putq
)) {

41 
n
 = 
	`smlök_q_size
(
putq
);

42 
p
->
≈ut
 -
n
;

44 
	`as£π
 (
n
 < 
p
->
block_nobjs
);

45 i‡(!
m0
) {

46 
m0
 = 
	`smlök_q_p›
(
putq
);

47 
n
 -= 1;

50 i‡(
n
) {

51 
n_öc
 +
n
;

52 
	`smˇche_add_ql
(&
p
->
smc
, 
putq
);

53 
	`INIT_SMLINK_Q
(
putq
);

57 
	`as£π
 (
m0
);

58  
m0
;

66 i‡(!(
m0
 = 
	`ˇŒoc
(1, 
p
->
block_size
))) {

67 
	`MSG_log2
(
M_FOBJP
, 
LOG_ERR
,

69  
NULL
;

75 i‡(
p
->
üŒoc
 =p->
iblocks
) {

76 
n_öc
 = 3;

78 i‡(
p
->
iblocks
)

79 
m1
 = 
	`ªÆloc
(
p
->
blocks
, (
obj_block_t
Ë*’->
iblocks
 + 
n_öc
));

81 
m1
 = 
	`mÆloc
((
obj_block_t
Ë* 
n_öc
);

83 i‡(!
m1
) {

84 
	`MSG_log2
(
M_FOBJP
, 
LOG_ERR
,

86 
	`‰ì
(
m0
);

87  
NULL
;

89 
p
->
üŒoc
 +
n_öc
;

90 
p
->
blocks
 = 
m1
;

96 i‡(
p
->
iblocks
) {

97 
size_t
 
l
 = 0, 
r
 = 
p
->
iblocks
 -1;

99 ;
r
>
l
;) {

100 i‡((*)
m0
 < 
p
->
blocks
[(
l
+
r
)/2].
begö
)

101 
r
 = (
l
+r)/2 - 1;

103 
l
 = (l+
r
)/2 + 1;

108 
	`as£π
 (
l
 >0 && (
r
 < 0 ||Ñ <(
p
->
iblocks
 - 1)));

110 i‡((*)
m0
 > 
p
->
blocks
[
l
].
begö
)

111 
l
 += 1;

113 i‡(
l
 <
p
->
iblocks
 - 1)

114 
	`memmove
(
p
->
blocks
 + 
l
 + 1,Ö->blocks +Ü,

115 (
p
->
iblocks
 - 
l
Ë* (
obj_block_t
));

116 
i
 = 
l
;

123 
obj_block_t
 *
ob
 = &
p
->
blocks
[
i
];

125 
ob
->
begö
 = 
m0
;

126 
ob
->
íd
 = (*)
m0
 + 
p
->
block_nobjs
 *Ö->
objÀn
;

127 
putq
 = &
ob
->putq;

128 
	`INIT_SMLINK_Q
(
putq
);

130 
	`as£π
 (
i
==0 || 
p
->
blocks
[i].
begö
 >=Ö->blocks[i-1].begin);

134 i‡(
p
->
block_nobjs
 > 1) {

135 
i
=1; i<
p
->
block_nobjs
; i++)

136 
	`smlök_q_push
(
putq
,

137 
ob
->
begö
 + 
i
 * 
p
->
objÀn


139 
	`smˇche_add_ql
(&
p
->
smc
, 
putq
);

140 
	`INIT_SMLINK_Q
(
putq
);

143 
	`as£π
 (
p
->
blocks
[p->
iblocks
].
begö
 != 0 &&

144 
p
->
blocks
[p->
iblocks
].
íd
 >Ö->blocks[p->iblocks].
begö
);

145 ++ 
p
->
iblocks
;

146 
p
->
¡ŸÆ
 +p->
block_nobjs
;

148  
m0
;

149 
	}
}

153 
	$objpoﬁ_put
(*
obj
, *
›aque
)

155 
objpoﬁ_t
 *
p
 = 
›aque
;

156 
obj_block_t
 *
ob
;

157 
l
 = 0, 
r
 = 
p
->
iblocks
 - 1;

163 ++ 
p
->
≈ut
;

168 ;
r
>
l
;) {

169 
ob
 = &
p
->
blocks
[(
l
+
r
)/2];

171 i‡((*)
obj
 < 
ob
->
begö
)

172 
r
 = (
l
+r) / 2 - 1;

173 i‡((*)
obj
 < 
ob
->
íd
)

176 
l
 = (l+
r
) / 2 + 1;

178 
ob
 = &
p
->
blocks
[(
l
+
r
)/2];

179 
	`as£π
 ((*)
obj
 >
ob
->
begö
 &&

180 (*)
obj
 < 
ob
->
íd
);

181 
	`as£π
 (
p
->
≈ut
 <p->
¡ŸÆ
 &&Ö->
iblocks
 > 0);

182 
	`as£π
 (
	`smlök_q_size
(&
ob
->
putq
Ë< 
p
->
block_nobjs
);

188 i‡(
	`smlök_q_size
(&
ob
->
putq
Ë=
p
->
block_nobjs
 - 1) {

189 *
m
 = 
ob
->
begö
;

191 
l
 = (
r
+l)/2;

192 i‡(
l
 !
p
->
iblocks
 -1)

193 
	`memmove
(
p
->
blocks
 + 
l
,Ö->blocks +Ü + 1,

194 (
p
->
iblocks
 -
l
 - 1Ë* (
obj_block_t
));

195 -- 
p
->
iblocks
;

196 
p
->
¡ŸÆ
 -p->
block_nobjs
;

197 
p
->
≈ut
 -p->
block_nobjs
;

198 
	`‰ì
(
m
);

201 
	`smlök_q_push
(&
ob
->
putq
, 
obj
);

202 
	}
}

205 
	$objpoﬁ_˘‹2
(
objpoﬁ_t
 *
p
, c⁄° *
«me
, 
size_t
 
objÀn
, size_à
ƒe£rved
, 
∆imô_ˇche
, 
OSPX_±hªad_muãx_t
 *
ˇche_lock
)

210 
n
 = 20, 
∑ge_size
 = 4096, 
dummy
 = 50;

212 i‡(
objÀn
 >= 256) {

213 
n
 = 8;

214 
∑ge_size
 = 8096;

217 
p
->
objÀn
 = objlen;

218 
p
->
blocks
 = 
NULL
;

219 
p
->
iblocks
 =Ö->
üŒoc
 = 0;

220 
p
->
block_size
 = (
n
 + (
obj_block_t
Ë+ 
dummy
 +

221 
∑ge_size
 - 1) /Öage_size *Öage_size;

222 
p
->
block_nobjs
 = (p->
block_size
 - (
obj_block_t
)Ë/ 
objÀn
;

223 
p
->
¡ŸÆ
 =Ö->
≈ut
 = 0;

225 
	`MSG_log
(
M_FOBJP
, 
LOG_INFO
,

227 
«me
, 
p
);

232 i‡(
	`smˇche_öô2
(&
p
->
smc
, 
«me
, !
∆imô_ˇche
 ?Ö->
block_nobjs
 :Çlimit_cache,

233 
ˇche_lock
, 
CACHE_F_LOCK_CREATER
, 
p
, 
objpoﬁ_gë
,

234 
objpoﬁ_put
, 
FUNC_ALWAYS_NEED_DESTROY
)) {

235 
	`MSG_log2
(
M_FOBJP
, 
LOG_ERR
,

244 i‡(
ƒe£rved
 > 0)

245 
	`smˇche_ª£rve
(&
p
->
smc
, 
ƒe£rved
);

248 
	}
}

251 
	$objpoﬁ_dt‹
(
objpoﬁ_t
 *
p
)

253 
	`MSG_log
(
M_FOBJP
, 
LOG_INFO
,

255 
	`objpoﬁ_«me
(
p
),Ö);

257 
	`smˇche_deöô
(&
p
->
smc
);

258 
	`as£π
 (
p
->
iblocks
 == 0);

259 i‡(
p
->
blocks
)

260 
	`‰ì
(
p
->
blocks
);

261 
	}
}

	@pool/core/objpool.h

1 #i‚de‡
__OBJPOOL_H__


2 
	#__OBJPOOL_H__


	)

14 
	~"sm_ˇche.h
"

16 #ifde‡
__˝lu•lus


21 
	sobj_block
 {

23 *
begö
, *
íd
;

26 
smlök_q_t
 
putq
;

27 } 
	tobj_block_t
;

29 
	sobjpoﬁ
 {

31 
obj_block_t
 *
blocks
;

32 
size_t
 
iblocks
, 
üŒoc
;

35 
size_t
 
block_size
;

38 
size_t
 
block_nobjs
;

41 
size_t
 
objÀn
;

44 
smˇche_t
 
smc
;

47 
size_t
 
¡ŸÆ
, 
≈ut
;

48 } 
	tobjpoﬁ_t
;

52 
objpoﬁ_˘‹2
(
objpoﬁ_t
 *
p
,

53 c⁄° *
«me
,

54 
size_t
 
objÀn
,

55 
size_t
 
ƒe£rved
,

56 
∆imôe_ˇche
,

57 
OSPX_±hªad_muãx_t
 *
ˇche_lock


60 
ölöe
 
objpoﬁ_˘‹
(
objpoﬁ_t
 *
p
, c⁄° *
«me
, 
size_t
 
objÀn
, size_à
ƒe£rved
) {

61  
objpoﬁ_˘‹2
(
p
, 
«me
, 
objÀn
, 
ƒe£rved
, 0 , 
NULL
);

67 
objpoﬁ_dt‹
(
objpoﬁ_t
 *
p
);

73 
ölöe
 
smˇche_t
 *

74 
objpoﬁ_gë_ˇche
(
objpoﬁ_t
 *
p
) {

75  &
p
->
smc
;

81 
ölöe
 c⁄° *
objpoﬁ_«me
(
objpoﬁ_t
 *
p
) {

82  
smˇche_«me
(&
p
->
smc
);

85 #ifde‡
__˝lu•lus


	@pool/core/ospx.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

16 
	~<as£π.h
>

18 
	~"o•x.h
"

19 
	~"o•x_îr‹.h
"

20 
	~"timî.h
"

22 
OSPX_±hªad_key_t
 
	gg_o•x_key
 = 0;

23 
	gg_ö°ÆÀr
 = 0;

26 
EXPORT
 

27 
	$OSPX_libøry_öô
(
lÊags
)

29 
ö°ÆÀr
 = 0;

32 i‡(!
g_o•x_key
) {

36 i‡((
î∫o
 = 
	`OSPX_±hªad_key_¸óã
(&
g_o•x_key
))) {

37 
	`Ârötf
(
°dîr
, "@%s-OSPX_TLS_create: %s\n",

38 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

42 
ö°ÆÀr
 = 1;

43 
g_ö°ÆÀr
 = ()
	`OSPX_±hªad_id
();

50 i‡(!
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
)) {

51 
OSPX_és_t
 *
és
;

54 i‡(!(
és
 = (
OSPX_és_t
 *)
	`ˇŒoc
(1, (OSPX_tls_t)))) {

60 i‡(
g_ö°ÆÀr
 =()
	`OSPX_±hªad_id
()) {

61 
	`OSPX_±hªad_key_dñëe
(
g_o•x_key
);

62 
g_o•x_key
 = 0;

64 
î∫o
 = 
ENOMEM
;

76 #ifde‡
_WIN


77 
és
->
h
 = 
	`GëCuºítThªad
();

80 
	`OSPX_±hªad_£t•ecific
(
g_o•x_key
, 
és
);

83 i‡(
ö°ÆÀr
) {

84 
uöt8_t
 
¶_sys_em
 = 0;

87 i‡(!
¶_sys_em
) {

88 
¶_sys_em
 = 
OSPX_M_SYS
;

89 i‡(
	`OSPX_îr‹_ªgi°î
(&
¶_sys_em
, "Sys", 
OSPX_sys_°ªº‹
)) {

90 
	`Ârötf
(
°dîr
, "@%s-OSPX_error_registerÉrror: %s\n",

91 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

99 
	}
}

101 
EXPORT
 

102 
	$OSPX_libøry_íd
()

104 
OSPX_és_t
 *
és
;

107 i‡(!
g_o•x_key
 &&

108 (
és
 = 
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
))) {

110 
	`OSPX_£éa°îr‹
(
	`OSPX_MAKERROR
(
OSPX_M_SYS
, 0));

111 i‡(!
és
->
f_…ls
)

112 
	`‰ì
((*)
és
);

115 i‡(
g_ö°ÆÀr
 =()
	`OSPX_±hªad_id
()) {

117 
	`OSPX_±hªad_key_dñëe
(
g_o•x_key
);

118 
g_o•x_key
 = 0;

121 
	}
}

125 #ifde‡
_WIN


126 
EXPORT
 

127 
	$OSPX_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

129 
_timeb
 
tb
;

131 
	`_·ime
(&
tb
);

132 i‡(
tv
) {

133 
tv
->
tv_£c
 = ()
tb
.
time
;

134 
tv
->
tv_u£c
 = 
tb
.
mûlôm
 * 1000;

137 i‡(
tz
) {

138 
tz
->
tz_möuãswe°
 = 
tb
.
timez⁄e
;

139 
tz
->
tz_d°time
 = 
tb
.
d°Êag
;

143 
	}
}

145 
±hªad_muãx_t
 
	gg_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

147 
EXPORT
 

148 
	$OSPX_öãæocked_ö¸ó£
(vﬁ©ûê*
èrgë
)

150 
l‹g
;

152 
	`±hªad_muãx_lock
(&
g_lock
);

153 
l‹g
 = ++ *
èrgë
;

154 
	`±hªad_muãx_u∆ock
(&
g_lock
);

156  
l‹g
;

157 
	}
}

159 
EXPORT
 

160 
	$OSPX_öãæocked_de¸ó£
(vﬁ©ûê*
èrgë
)

162 
l‹g
;

164 
	`±hªad_muãx_lock
(&
g_lock
);

165 
l‹g
 = -- *
èrgë
;

166 
	`±hªad_muãx_u∆ock
(&
g_lock
);

168  
l‹g
;

169 
	}
}

171 
EXPORT
 

172 
	$OSPX_öãæocked_add
(vﬁ©ûê*
èrgë
, 
vÆue
)

174 
l‹g
;

176 
	`±hªad_muãx_lock
(&
g_lock
);

177 
l‹g
 = *
èrgë
;

178 *
èrgë
 +
vÆue
;

179 
	`±hªad_muãx_u∆ock
(&
g_lock
);

181  
l‹g
;

182 
	}
}

188 #ifde‡
_WIN


193 
HANDLE
 
	mh
;

195 (*
	mroutöe
)(*);

196 *
	m¨gl°
;

197 } 
	tOSPX_∑øm_t
;

199 #ifde‡
_WIN


200 
__°dˇŒ


201 
	$OSPX_thªad_íåy
(*
¨gl°
)

203 
OSPX_és_t
 
…ls
 = {0};

204 
OSPX_∑øm_t
 *
p
 = 
¨gl°
;

205 (*
thªad_routöe
)(*Ë
p
->
routöe
;

206 *
¨g
 = 
p
->
¨gl°
;

209 
…ls
.
h
 = 
p
->h;

210 
	`‰ì
(
p
);

213 i‡(
g_o•x_key
) {

214 
…ls
.
f_…ls
 = 1;

215 
	`OSPX_±hªad_£t•ecific
(
g_o•x_key
, &
…ls
);

218  (*
thªad_routöe
)(
¨g
);

219 
	}
}

222 
	$OSPX_thªad_íåy
(*
¨gl°
)

224 
OSPX_és_t
 
…ls
 = {0};

225 
OSPX_∑øm_t
 *
p
 = 
¨gl°
;

226 (*
thªad_routöe
)(*Ë
p
->
routöe
;

227 *
¨g
 = 
p
->
¨gl°
;

229 
	`‰ì
(
p
);

232 i‡(
g_o•x_key
) {

233 
…ls
.
f_…ls
 = 1;

234 
	`OSPX_±hªad_£t•ecific
(
g_o•x_key
, &
…ls
);

237 
	`±hªad_exô
(

238 (*)()(*
thªad_routöe
)(
¨g
)

240 
	}
}

243 
EXPORT
 

244 
OSPX_±hªad_¸óã
(
OSPX_±hªad_t
 *
h™dÀ
, 
OSPX_±hªad_©å_t
 *
©å
, (*
routöe
)(*
¨g
), *arg)

246 
OSPX_∑øm_t
 *
p
;

248 i‡(!(
p
 = (
OSPX_∑øm_t
 *)
	`ˇŒoc
(1, (OSPX_param_t))))

249  
ENOMEM
;

251 
î∫o
 = 0;

252 
p
->
routöe
 =Ñoutine;

253 
p
->
¨gl°
 = 
¨g
;

254 #ifde‡
_WIN


256 
PRIORITY
[] = {

257 
THREAD_PRIORITY_IDLE
,

258 
THREAD_PRIORITY_LOWEST
, 
THREAD_PRIORITY_BELOW_NORMAL
,

259 
THREAD_PRIORITY_NORMAL
, 
THREAD_PRIORITY_ABOVE_NORMAL
,

260 
THREAD_PRIORITY_HIGHEST
, 
THREAD_PRIORITY_TIME_CRITICAL
,

262 
HANDLE
 
h
;

267 
h
 = (
HANDLE
)
	`_begöthªadex
(
NULL
, 
©å
 ?áâr->
°ack_size
 : 0, 
OSPX_thªad_íåy
, 
p
, 
CREATE_SUSPENDED
, NULL);

268 i‡(
î∫o
)

269 
	`‰ì
(
p
);

272 
p
->
h
 = h;

273 *
h™dÀ
 = 
h
;

275 i‡(
©å
) {

276 
sche
 = 
NORMAL_PRIORITY_CLASS
;

279 i‡(
ï_NONE
 !
©å
->
sche_pﬁicy
) {

280 
©å
->
sche_pﬁicy
) {

281 
ï_RR
:

282 
sche
 = 
HIGH_PRIORITY_CLASS
;

284 
ï_FIFO
:

285 
sche
 = 
REALTIME_PRIORITY_CLASS
;

288 
	`SëPri‹ôyCœss
(
h
, 
sche
);

292 i‡(
©å
->
sche_¥i‹ôy
 > 0) {

293 
ödex
 = 0;

295 i‡(
©å
->
sche_¥i‹ôy
 >= 100)

296 
©å
->
sche_¥i‹ôy
 = 100;

298 
ödex
 = 
©å
->
sche_¥i‹ôy
 * 7 / 100;

299 i‡(
ödex
 >= 7)

300 -- 
ödex
;

301 
	`SëThªadPri‹ôy
(
h
, 
PRIORITY
[
ödex
]);

304 
	`ResumeThªad
(
h
);

306 i‡(
©å
 && !©å->
joöabÀ
)

307 
	`Clo£H™dÀ
(
h
);

310  
î∫o
;

313 
îr‹
, 
sche
 = 
SCHED_OTHER
;

315 
±hªad_©å_t
 *
∑âr
 = 
NULL
, 
©t
;

316 i‡(
©å
 && !
	`±hªad_©å_öô
(&
©t
)) {

317 
∑âr
 = &
©t
;

320 i‡(
©å
->
°ack_size
)

321 
	`±hªad_©å_£t°acksize
(
∑âr
, 
©å
->
°ack_size
);

324 i‡(!
©å
->
joöabÀ
) {

325 
	`±hªad_©å_£tsc›e
(
∑âr
, 
PTHREAD_SCOPE_SYSTEM
);

326 
	`±hªad_©å_£tdëach°©e
(
∑âr
, 
PTHREAD_CREATE_DETACHED
);

330 i‡(
ï_NONE
 !
©å
->
sche_pﬁicy
) {

332 #ifde‡
HAVE_PTHREAD_ATTR_GETINHERITSCHED


333 
öh
;

335 
	`±hªad_©å_gëöhîôsched
(
∑âr
, &
öh
);

336 i‡(
PTHREAD_EXPLICIT_SCHED
 !
öh
)

337 
	`±hªad_©å_£töhîôsched
(
∑âr
, 
PTHREAD_EXPLICIT_SCHED
);

339 
©å
->
sche_pﬁicy
) {

340 
ï_RR
:

341 
sche
 = 
SCHED_RR
;

343 
ï_FIFO
:

344 
sche
 = 
SCHED_FIFO
;

349 
	`±hªad_©å_£tschedpﬁicy
(
∑âr
, 
sche
);

352 i‡(
©å
->
sche_¥i‹ôy
 > 0) {

353 
mö
 = 
	`sched_gë_¥i‹ôy_mö
(
sche
), 
max
 = 
	`sched_gë_¥i‹ôy_max
(sche);

354 
sched_∑øm
 
∑øm
 = {0};

356 i‡(
©å
->
sche_¥i‹ôy
 >= 100)

357 
©å
->
sche_¥i‹ôy
 = 100;

359 
∑øm
.
sched_¥i‹ôy
 = 
mö
 + 
©å
->
sche_¥i‹ôy
 * (
max
 - min + 1) / 100;

360 
	`±hªad_©å_£tsched∑øm
(
∑âr
, &
∑øm
);

363 
îr‹
 = 
	`±hªad_¸óã
(
h™dÀ
, 
∑âr
, 
OSPX_thªad_íåy
, 
p
);

364 i‡(
îr‹
)

365 
	`‰ì
(
p
);

367 i‡(
∑âr
)

368 
	`±hªad_©å_de°roy
(
∑âr
);

370  
îr‹
;

373 
	}
}

375 
EXPORT
 

376 
	$OSPX_±hªad_joö
(
OSPX_±hªad_t
 
h™dÀ
, *
ªt
)

378 #ifde‡
_WIN


379 
DWORD
 
code
;

381 i‡(!
h™dÀ
 || 
WAIT_OBJECT_0
 !
	`WaôF‹SögÀObje˘
(h™dÀ, 
INFINITE
))

382  
EINVAL
;

384 
	`GëExôCodeThªad
(
h™dÀ
, &
code
);

385 
	`Clo£H™dÀ
(
h™dÀ
);

387 i‡(
ªt
)

388 *
ªt
 = 
code
;

391  
	`±hªad_joö
(
h™dÀ
, (**)&
ªt
);

393 
	}
}

395 
EXPORT
 

396 
	$OSPX_±hªad_dëach
(
OSPX_±hªad_t
 
h™dÀ
)

398 #ifde‡
_WIN


399  
	`Clo£H™dÀ
(
h™dÀ
Ë? 0 : 
EINVAL
;

401  
	`±hªad_dëach
(
h™dÀ
);

403 
	}
}

405 
EXPORT


406 
OSPX_±hªad_t
 
	$OSPX_±hªad_£lf
()

408 #ifde‡
_WIN


409 
OSPX_és_t
 *
és
;

415 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

416 i‡(!
és
)

418  
és
->
h
;

420  
	`±hªad_£lf
();

422 
	}
}

425 #ifde‡
_WIN


426 
EXPORT
 

427 
OSPX_±hªad_⁄˚
(
OSPX_±hªad_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öô_routöe
)())

429 i‡(!
⁄˚_c⁄åﬁ
->
boﬁón
) {

430 i‡(!
⁄˚_c⁄åﬁ
->
ªf
) {

434 i‡(1 =
	`OSPX_öãæocked_ö¸ó£
(&
⁄˚_c⁄åﬁ
->
ªf
)) {

435 (*
öô_routöe
)();

436 
⁄˚_c⁄åﬁ
->
boﬁón
 = 1;

443 !
⁄˚_c⁄åﬁ
->
boﬁón
) ;

447 
	}
}

451 #i‚de‡
_WIN


452 
EXPORT
 

453 
	$OSPX_±hªad_muãx_öô
(
OSPX_±hªad_muãx_t
 *
mut
, 
ªcursive
)

455 
±hªad_muãx©å_t
 *
©å
 = 
NULL
, 
x©å
;

457 i‡(
ªcursive
) {

458 i‡((
î∫o
 = 
	`±hªad_muãx©å_öô
(&
x©å
)))

459  
î∫o
;

461 i‡((
î∫o
 = 
	`±hªad_muãx©å_£ây≥
(&
x©å
, 
PTHREAD_MUTEX_RECURSIVE
))) {

462 
	`±hªad_muãx©å_de°roy
(&
x©å
);

463  
î∫o
;

465 
©å
 = &
x©å
;

468 
î∫o
 = 
	`±hªad_muãx_öô
(
mut
, 
©å
);

469 i‡(
î∫o
 && 
©å
)

470 
	`±hªad_muãx©å_de°roy
(
©å
);

471  
î∫o
;

472 
	}
}

475 #ifde‡
_WIN


476 
EXPORT
 

477 
	$OSPX_±hªad_c⁄d_öô
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
)

479 
	`mem£t
(
c⁄d
, 0, (
OSPX_±hªad_c⁄d_t
));

481 
	`InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
(&
c⁄d
->
£˘i⁄
, 1000);

482 i‡(!(
c⁄d
->
hEvít
 = 
	`Cª©eEvít
(
NULL
,
TRUE
,
FALSE
,NULL))) {

483 
	`DñëeCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

484  
ENOMEM
;

486 
c⁄d
->
n_waôög
 = c⁄d->
n_to_wake
 = c⁄d->
gíî©i⁄
 = 0;

489 
	}
}

491 
EXPORT
 

492 
	$OSPX_±hªad_c⁄d_sig«l
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
)

494 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

495 ++
c⁄d
->
n_to_wake
;

496 
c⁄d
->
gíî©i⁄
++;

497 
	`SëEvít
(
c⁄d
->
hEvít
);

498 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

501 
	}
}

503 
EXPORT
 

504 
	$OSPX_±hªad_c⁄d_brﬂdˇ°
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
)

506 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

507 
c⁄d
->
n_to_wake
 = c⁄d->
n_waôög
;

508 
c⁄d
->
gíî©i⁄
++;

509 
	`SëEvít
(
c⁄d
->
hEvít
);

510 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

513 
	}
}

515 
EXPORT
 

516 
	$OSPX_±hªad_c⁄d_de°roy
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
)

518 
	`DñëeCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

519 
	`Clo£H™dÀ
(
c⁄d
->
hEvít
);

520 
	`mem£t
(
c⁄d
, 0, (
OSPX_±hªad_c⁄d_t
));

523 
	}
}

525 
EXPORT
 

526 
	$OSPX_±hªad_c⁄d_öô
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
)

528 
e
;

530 
±hªad_c⁄d©å_t
 *
©å
 = 
NULL
;

531 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
HAVE_CLOCK_MONOTONIC
)

534 
±hªad_c⁄d©å_t
 
©å0
;

536 i‡(!
	`±hªad_c⁄d©å_öô
(&
©å0
)) {

537 
	`±hªad_c⁄d©å_£t˛ock
(&
©å0
, 
CLOCK_MONOTONIC
);

538 
©å
 = &
©å0
;

542 
e
 = 
	`±hªad_c⁄d_öô
(
c⁄d
, 
©å
);

543 i‡(
©å
)

544 
	`±hªad_c⁄d©å_de°roy
(
©å
);

546  
e
;

547 
	}
}

550 
EXPORT
 

551 
	$OSPX_±hªad_c⁄d_timedwaô
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
, 
OSPX_±hªad_muãx_t
 *
mut
, 
to
)

553 
îr‹
 = 0;

555 #ifde‡
_WIN


556 
gíî©i⁄_©_°¨t
;

557 
waôög
 = 1;

558 
ªsu…
 = -1;

559 
DWORD
 
ms
 = 
INFINITE
, 
to_‹ig
 = INFINITE, 
°¨tTime
, 
ídTime
;

560 i‡(
to
 >= 0)

561 
to_‹ig
 = 
ms
 = 
to
;

563 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

564 ++
c⁄d
->
n_waôög
;

565 
gíî©i⁄_©_°¨t
 = 
c⁄d
->
gíî©i⁄
;

566 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

568 
	`LóveCrôiˇlSe˘i⁄
(
mut
);

569 
°¨tTime
 = 
	`GëTickCou¡
();

571 
DWORD
 
ªs
;

572 
ªs
 = 
	`WaôF‹SögÀObje˘
(
c⁄d
->
hEvít
, 
ms
);

573 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

574 i‡(
c⁄d
->
n_to_wake
 &&

575 
c⁄d
->
gíî©i⁄
 !
gíî©i⁄_©_°¨t
) {

576 --
c⁄d
->
n_to_wake
;

577 --
c⁄d
->
n_waôög
;

578 
îr‹
 = 0;

579 
waôög
 = 0;

580 
out
;

581 } i‡(
ªs
 !
WAIT_OBJECT_0
) {

582 
îr‹
 = (
ªs
==
WAIT_TIMEOUT
Ë? 
ETIMEDOUT
 : -1;

583 --
c⁄d
->
n_waôög
;

584 
waôög
 = 0;

585 
out
;

586 } i‡(
ms
 !
INFINITE
) {

587 
ídTime
 = 
	`GëTickCou¡
();

588 i‡(
°¨tTime
 + 
to_‹ig
 <
ídTime
) {

589 
îr‹
 = 
ETIMEDOUT
;

590 --
c⁄d
->
n_waôög
;

591 
waôög
 = 0;

592 
out
;

594 
ms
 = 
°¨tTime
 + 
to_‹ig
 - 
ídTime
;

598 i‡(
c⁄d
->
n_to_wake
 == 0) {

601 
	`Re£tEvít
(
c⁄d
->
hEvít
);

603 
out
:

604 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

605 } 
waôög
);

606 
	`E¡îCrôiˇlSe˘i⁄
(
mut
);

608 
	`E¡îCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

609 i‡(!
c⁄d
->
n_waôög
)

610 
	`Re£tEvít
(
c⁄d
->
hEvít
);

611 
	`LóveCrôiˇlSe˘i⁄
(&
c⁄d
->
£˘i⁄
);

613 
time•ec
 
ab°ime
 = {0};

615 i‡(0 > 
to
)

616 
îr‹
 = 
	`±hªad_c⁄d_waô
(
c⁄d
, 
mut
);

618 #ifde‡
HAVE_CLOCK_GETTIME


619 #ifde‡
HAVE_CLOCK_MONOTONIC


620 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ab°ime
);

622 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ab°ime
);

624 
ab°ime
.
tv_n£c
 +(
to
 % 1000) * 1000000;

625 
ab°ime
.
tv_£c
 +
to
 / 1000;

628 
timevÆ
 
tv
;

630 
	`OSPX_gëtimeofday
(&
tv
, 
NULL
);

631 
ab°ime
.
tv_£c
 = 
tv
.tv_£¯+ (
to
 / 1000);

632 
ab°ime
.
tv_n£c
 = (
tv
.
tv_u£c
 + (
to
 % 1000) * 1000) * 1000;

636 i‡(
ab°ime
.
tv_n£c
 > 1000000000) {

637 
ab°ime
.
tv_£c
 += 1;

638 
ab°ime
.
tv_n£c
 -= 1000000000;

641 
îr‹
 = 
	`±hªad_c⁄d_timedwaô
(
c⁄d
, 
mut
, &
ab°ime
);

644  
îr‹
;

645 
	}
}

649 #ifde‡
_WIN


650 c⁄° 
	gSEMMAGIC
 = 0x45df00e1;

652 
EXPORT
 

653 
	$OSPX_£m_öô
(
OSPX_£m_t
 *
£m
, 
vÆue
)

655 i‡(
vÆue
 > (
LONG
)(((
ULONG
)-1)/2 -1))

656 
vÆue
 = (
LONG
)(((
ULONG
)-1)/2 -1);

658 
£m
->
hSem
 = 
	`Cª©eSem≠h‹e
(
NULL
, 
vÆue
, (
LONG
)(((
ULONG
)-1)/2 -1), NULL);

659 i‡(!
£m
->
hSem
) {

660 
î∫o
 = 
ENOMEM
;

663 
£m
->
magic
 = 
SEMMAGIC
;

664 
	`InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
(&
£m
->
£˘i⁄
, 1000);

665 
£m
->
waôîs
 = sem->
ˇkes
 = 0;

668 
	}
}

670 
EXPORT
 

671 
	$OSPX_£m_po°
(
OSPX_£m_t
 *
£m
)

673 i‡(
SEMMAGIC
 !
£m
->
magic
) {

674 
î∫o
 = 
EINVAL
;

678 
	`E¡îCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

679 ++ 
£m
->
ˇkes
;

680 
	`LóveCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

682 
	`Rñó£Sem≠h‹e
(
£m
->
hSem
, 1, 
NULL
);

684 
	}
}

686 
EXPORT
 

687 
	$OSPX_£m_waô
(
OSPX_£m_t
 *
£m
)

689  
	`OSPX_£m_timedwaô
(
£m
, -1);

690 
	}
}

692 
EXPORT
 

693 
	$OSPX_£m_gëvÆue
(
OSPX_£m_t
 *
£m
, *
vÆ
)

695 i‡(
SEMMAGIC
 !
£m
->
magic
) {

696 
î∫o
 = 
EINVAL
;

700 
	`E¡îCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

701 *
vÆ
 = 
£m
->
ˇkes
 > sem->
waôîs
 ? sem->cakes - sem->waiters : 0;

702 
	`LóveCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

704 
	}
}

706 
EXPORT
 

707 
	$OSPX_£m_de°roy
(
OSPX_£m_t
 *
£m
)

709 i‡(
SEMMAGIC
 !
£m
->
magic
) {

710 
î∫o
 = 
EINVAL
;

713 
£m
->
magic
 = 0;

714 
	`DñëeCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

715 
	`Clo£H™dÀ
(
£m
->
hSem
);

717 
	}
}

720 
EXPORT
 

721 
	$OSPX_£m_timedwaô
(
OSPX_£m_t
 *
£m
, 
ms
)

723 
îr‹
;

724 #ifde‡
_WIN


725 
ªt
;

727 
	`E¡îCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

728 ++ 
£m
->
waôîs
;

729 
	`LóveCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

731 i‡(
ms
 >= 0)

732 
ªt
 = 
	`WaôF‹SögÀObje˘
(
£m
->
hSem
, 
ms
);

734 
ªt
 = 
	`WaôF‹SögÀObje˘
(
£m
->
hSem
, 
INFINITE
);

735 
ªt
) {

736 
WAIT_ABANDONED
:

737 
îr‹
 = 
EINVAL
;

739 
WAIT_OBJECT_0
:

740 
îr‹
 = 0;

742 
WAIT_TIMEOUT
:

743 
îr‹
 = 
ETIMEDOUT
;

747 
	`E¡îCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

748 -- 
£m
->
waôîs
;

749 i‡(!
îr‹
)

750 -- 
£m
->
ˇkes
;

752 
	`as£π
(
£m
->
waôîs
 >0 && sem->
ˇkes
 >= 0);

753 
	`LóveCrôiˇlSe˘i⁄
(&
£m
->
£˘i⁄
);

754 #ñi‡
	`deföed
(
HAVE_SEM_TIMEDWAIT
)

755 i‡(0 > 
ms
)

756 
îr‹
 = 
	`£m_waô
(
£m
);

758 
time•ec
 
ab°ime
;

760 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ab°ime
);

761 
ab°ime
.
tv_n£c
 +(
ms
 % 1000) * 1000000;

762 
ab°ime
.
tv_£c
 +
ms
 / 1000;

763 i‡(
ab°ime
.
tv_n£c
 > 1000000000) {

764 
ab°ime
.
tv_£c
 += 1;

765 
ab°ime
.
tv_n£c
 -= 1000000000;

767 
îr‹
 = 
	`£m_timedwaô
(
£m
, &
ab°ime
);

771 
îr‹
 = 
	`£m_waô
(
£m
);

773  
îr‹
;

774 
	}
}

777 #i‚de‡
HAVE_PTHREAD_RWLOCK


778 c⁄° 
	gRWMAGIC
 = 0xf2349e20;

780 
EXPORT
 

781 
	$OSPX_±hªad_rwlock_öô
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

783 
îr‹
;

785 
	`mem£t
(
rwlock
, 0, (
OSPX_±hªad_rwlock_t
));

786 
rwlock
->
rw_magic
 = 
RWMAGIC
;

788 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_öô
(&
rwlock
->
rw_mut
, 0)))

789  
îr‹
;

791 i‡((
îr‹
 = 
	`OSPX_±hªad_c⁄d_öô
(&
rwlock
->
rw_c⁄dªadîs
)))

792 
îr0
;

794 i‡((
îr‹
 = 
	`OSPX_±hªad_c⁄d_öô
(&
rwlock
->
rw_c⁄dwrôîs
)))

795 
îr1
;

798 
îr1
:

799 
	`OSPX_±hªad_c⁄d_de°roy
(&
rwlock
->
rw_c⁄dªadîs
);

800 
îr0
:

801 
	`OSPX_±hªad_muãx_de°roy
(&
rwlock
->
rw_mut
);

803  
îr‹
;

804 
	}
}

806 
EXPORT
 

807 
	$OSPX_±hªad_rwlock_rdlock
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

809 
îr‹
;

811 i‡(
RWMAGIC
 !
rwlock
->
rw_magic
)

812  
EINVAL
;

813 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_lock
(&
rwlock
->
rw_mut
)))

814  
îr‹
;

817 
rwlock
->
rw_ªf
 < 0 ||Ñwlock->
rw_nwaôwrôîs
 > 0) {

818 ++ 
rwlock
->
rw_nwaôªadîs
;

819 
îr‹
 = 
	`OSPX_±hªad_c⁄d_waô
(&
rwlock
->
rw_c⁄dªadîs
, &rwlock->
rw_mut
);

820 -- 
rwlock
->
rw_nwaôªadîs
;

821 i‡(
îr‹
)

825 i‡(!
îr‹
)

827 ++ 
rwlock
->
rw_ªf
;

828 
	`OSPX_±hªad_muãx_u∆ock
(&
rwlock
->
rw_mut
);

830  
îr‹
;

831 
	}
}

833 
EXPORT
 

834 
	$OSPX_±hªad_rwlock_åyrdlock
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

836 
îr‹
;

838 i‡(
RWMAGIC
 !
rwlock
->
rw_magic
)

839  
EINVAL
;

840 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_lock
(&
rwlock
->
rw_mut
)))

841  
îr‹
;

843 i‡(
rwlock
->
rw_ªf
 < 0 ||Ñwlock->
rw_nwaôwrôîs
 > 0)

845 
îr‹
 = 
EBUSY
;

847 ++ 
rwlock
->
rw_ªf
;

848 
	`OSPX_±hªad_muãx_u∆ock
(&
rwlock
->
rw_mut
);

850  
îr‹
;

851 
	}
}

853 
EXPORT
 

854 
	$OSPX_±hªad_rwlock_wæock
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

856 
îr‹
;

858 i‡(
RWMAGIC
 !
rwlock
->
rw_magic
)

859  
EINVAL
;

860 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_lock
(&
rwlock
->
rw_mut
)))

861  
îr‹
;

863 
rwlock
->
rw_ªf
) {

864 ++ 
rwlock
->
rw_nwaôwrôîs
;

865 
îr‹
 = 
	`OSPX_±hªad_c⁄d_waô
(&
rwlock
->
rw_c⁄dwrôîs
, &rwlock->
rw_mut
);

866 -- 
rwlock
->
rw_nwaôwrôîs
;

868 i‡(
îr‹
)

872 i‡(!
îr‹
)

873 
rwlock
->
rw_ªf
 = -1;

875 
	`OSPX_±hªad_muãx_u∆ock
(&
rwlock
->
rw_mut
);

876  
îr‹
;

877 
	}
}

879 
EXPORT
 

880 
	$OSPX_±hªad_rwlock_åywæock
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

882 
îr‹
;

884 i‡(
RWMAGIC
 !
rwlock
->
rw_magic
)

885  
EINVAL
;

886 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_lock
(&
rwlock
->
rw_mut
)))

887  
îr‹
;

889 i‡(
rwlock
->
rw_ªf
)

891 
îr‹
 = 
EBUSY
;

894 
rwlock
->
rw_ªf
 = -1;

895 
	`OSPX_±hªad_muãx_u∆ock
(&
rwlock
->
rw_mut
);

897  
îr‹
;

898 
	}
}

900 
EXPORT
 

901 
	$OSPX_±hªad_rwlock_u∆ock
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

903 
îr‹
;

905 i‡(
RWMAGIC
 !
rwlock
->
rw_magic
)

906  
EINVAL
;

907 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_lock
(&
rwlock
->
rw_mut
)))

908  
îr‹
;

910 i‡(
rwlock
->
rw_ªf
 > 0)

911 -- 
rwlock
->
rw_ªf
;

912 i‡(
rwlock
->
rw_ªf
 == -1)

913 
rwlock
->
rw_ªf
 = 0;

915 
	`Ârötf
(
°dîr
, "@%sÉrror:<rw_ref:%d>\n",

916 
__FUNCTION__
, 
rwlock
->
rw_ªf
);

917 
	`ab‹t
();

921 i‡(
rwlock
->
rw_nwaôwrôîs
 > 0) {

922 i‡(
rwlock
->
rw_ªf
 == 0)

923 
îr‹
 = 
	`OSPX_±hªad_c⁄d_sig«l
(&
rwlock
->
rw_c⁄dwrôîs
);

924 } i‡(
rwlock
->
rw_nwaôªadîs
 > 0)

925 
îr‹
 = 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
rwlock
->
rw_c⁄dªadîs
);

926 
	`OSPX_±hªad_muãx_u∆ock
(&
rwlock
->
rw_mut
);

928  
îr‹
;

929 
	}
}

931 
EXPORT
 

932 
	$OSPX_±hªad_rwlock_de°roy
(
OSPX_±hªad_rwlock_t
 *
rwlock
)

934 
îr‹
;

936 i‡(
RWMAGIC
 !
rwlock
->
rw_magic
)

937  
EINVAL
;

939 i‡((
îr‹
 = 
	`OSPX_±hªad_muãx_de°roy
(&
rwlock
->
rw_mut
)) ||

940 (
îr‹
 = 
	`OSPX_±hªad_c⁄d_de°roy
(&
rwlock
->
rw_c⁄dªadîs
)) ||

941 (
îr‹
 = 
	`OSPX_±hªad_c⁄d_de°roy
(&
rwlock
->
rw_c⁄dwrôîs
)))

942  
îr‹
;

945 
	}
}

	@pool/core/ospx.h

1 #i‚de‡
__OSPX_H__


2 
	#__OSPX_H__


	)

14 
	~"o•x_ty≥.h
"

16 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
_WIN64
)

17 
	~<SDKDDKVî.h
>

18 
	#_WIN


	)

19 #ifde‡
_USRDLL


20 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

22 
	#EXPORT


	)

25 
	#EXPORT


	)

28 #ifde‡
__˝lu•lus


38 
	#LB_F_ERRLIB
 0x1

	)

40 
EXPORT
 
OSPX_libøry_öô
(
lÊags
);

41 
EXPORT
 
OSPX_libøry_íd
();

44 
	eï_POLICY


46 
ï_NONE
,

47 
ï_RR
,

48 
ï_FIFO
,

49 
ï_OTHER


54 
joöabÀ
;

57 
°ack_size
;

60 
ï_POLICY
 
sche_pﬁicy
;

63 
sche_¥i‹ôy
;

64 } 
	tOSPX_±hªad_©å_t
;

66 
EXPORT
 
OSPX_±hªad_¸óã
(
OSPX_±hªad_t
 *
h™dÀ
, 
OSPX_±hªad_©å_t
 *
©å
, (*
routöe
)(*
¨g
), *arg);

67 
EXPORT
 
OSPX_±hªad_joö
(
OSPX_±hªad_t
 
h™dÀ
, *
ªt
);

68 
EXPORT
 
OSPX_±hªad_dëach
(
OSPX_±hªad_t
 
h™dÀ
);

69 
EXPORT
 
OSPX_±hªad_t
 
OSPX_±hªad_£lf
();

72 #i‚de‡
_WIN


73 
	#OSPX_±hªad_id
(Ë(
OSPX_±hªad_t
)
	`±hªad_£lf
()

	)

75 
	#OSPX_±hªad_id
(Ë(
OSPX_±hªad_t
)
	`GëCuºítThªadId
()

	)

78 #i‚de‡
_WIN


81 
	#OSPX_gëtimeofday
 
gëtimeofday


	)

82 
EXPORT
 
OSPX_öãæocked_ö¸ó£
(vﬁ©ûê*
èrgë
);

83 
EXPORT
 
OSPX_öãæocked_de¸ó£
(vﬁ©ûê*
èrgë
);

84 
EXPORT
 
OSPX_öãæocked_add
(vﬁ©ûê*
èrgë
, 
vÆue
);

90 
	#OSPX_±hªad_key_¸óã
(
key
Ë
	`±hªad_key_¸óã
(key, 
NULL
)

	)

91 
	#OSPX_±hªad_key_dñëe
(
key
Ë
	`±hªad_key_dñëe
(key)

	)

92 
	#OSPX_±hªad_gë•ecific
(
key
Ë
	`±hªad_gë•ecific
(key)

	)

93 
	#OSPX_±hªad_£t•ecific
(
key
, 
vÆ
Ë
	`±hªad_£t•ecific
(key, vÆ);

	)

96 
	#OSPX_±hªad_⁄˚
(
⁄˚_˘l
, 
cb
Ë
	`±hªad_⁄˚
(⁄˚_˘l, cb)

	)

99 
EXPORT
 
OSPX_±hªad_muãx_öô
(
OSPX_±hªad_muãx_t
 *, 
ªcursive
);

100 
	#OSPX_±hªad_muãx_lock
(
mut
Ë
	`±hªad_muãx_lock
(mut)

	)

101 
	#OSPX_±hªad_muãx_åylock
(
mut
Ë
	`±hªad_muãx_åylock
(mut)

	)

102 
	#OSPX_±hªad_muãx_u∆ock
(
mut
Ë
	`±hªad_muãx_u∆ock
(mut)

	)

103 
	#OSPX_±hªad_muãx_de°roy
(
mut
Ë
	`±hªad_muãx_de°roy
(mut)

	)

106 
EXPORT
 
OSPX_±hªad_c⁄d_öô
(
OSPX_±hªad_c⁄d_t
 *
c⁄d
);

107 
	#OSPX_±hªad_c⁄d_waô
(
c⁄d
, 
mut
Ë
	`±hªad_c⁄d_waô
(c⁄d, mut)

	)

108 
	#OSPX_±hªad_c⁄d_sig«l
(
c⁄d
Ë
	`±hªad_c⁄d_sig«l
(c⁄d)

	)

109 
	#OSPX_±hªad_c⁄d_brﬂdˇ°
(
c⁄d
Ë
	`±hªad_c⁄d_brﬂdˇ°
(c⁄d)

	)

110 
	#OSPX_±hªad_c⁄d_de°roy
(
c⁄d
Ë
	`±hªad_c⁄d_de°roy
(c⁄d)

	)

111 
EXPORT
 
OSPX_±hªad_c⁄d_timedwaô
(
OSPX_±hªad_c⁄d_t
 *, 
OSPX_±hªad_muãx_t
 *, 
ms
);

114 
	#OSPX_£m_öô
(
£m
, 
vÆue
Ë
	`£m_öô
(£m, 0, vÆue)

	)

115 
	#OSPX_£m_po°
(
£m
Ë
	`£m_po°
(£m)

	)

116 
	#OSPX_£m_waô
(
£m
Ë
	`£m_waô
(£m)

	)

117 
	#OSPX_£m_de°roy
(
£m
Ë
	`£m_de°roy
(£m)

	)

118 
	#OSPX_£m_gëvÆue
(
£m
, 
vÆ
Ë
	`£m_gëvÆue
(£m, vÆ)

	)

119 
EXPORT
 
OSPX_£m_timedwaô
(
OSPX_£m_t
 *
£m
, 
ms
);

122 
	#OSPX_shm_›í
(
«me
, 
oÊag
, 
mode
Ë
	`shm_›í
“ame, oÊag, mode)

	)

123 
	#OSPX_shm_u∆ök
(
«me
Ë
	`shm_u∆ök
“ame)

	)

124 
	#OSPX_mm≠
(
addr
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
Ë
	`mm≠
◊ddr,Üígth,ÖrŸ, fœgs, fd, off£t)

	)

125 
	#OSPX_munm≠
(
addr
, 
Àngth
Ë
	`munm≠
◊ddr,Üígth)

	)

129 
EXPORT
 
OSPX_gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

130 
	#OSPX_öãæocked_ö¸ó£
(
èrgë
Ë
	`I¡îlockedIn¸emít
—¨gë)

	)

131 
	#OSPX_öãæocked_de¸ó£
(
èrgë
Ë
	`I¡îlockedDe¸emít
—¨gë)

	)

132 
	#OSPX_öãæocked_add
(
èrgë
, 
öc
Ë
	`I¡îlockedExch™geAdd
—¨gë, inc)

	)

134 
	#OSPX_±hªad_key_¸óã
(
key
Ë(*(keyË
	`TlsAŒoc
(), -1 =*(keyË? 
ENOMEM
 : 0)

	)

135 
	#OSPX_±hªad_key_dñëe
(
key
Ë(
	`TlsFªe
(keyË? 0 : 
EINVAL
)

	)

136 
	#OSPX_±hªad_gë•ecific
(
key
Ë
	`TlsGëVÆue
(key)

	)

137 
	#OSPX_±hªad_£t•ecific
(
key
, 
vÆ
Ë(
	`TlsSëVÆue
(key, vÆË? 0 : 
EINVAL
)

	)

139 
EXPORT
 
OSPX_±hªad_⁄˚
(
OSPX_±hªad_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öô_routöe
)());

141 
	#OSPX_±hªad_muãx_öô
(
mut
, 
ªcursive
Ë(
	`InôülizeCrôiˇlSe˘i⁄
(mut), 0)

	)

142 
	#OSPX_±hªad_muãx_lock
(
mut
Ë(
	`E¡îCrôiˇlSe˘i⁄
(mut), 0)

	)

143 
	#OSPX_±hªad_muãx_åylock
(
mut
Ë(
	`TryE¡îCrôiˇlSe˘i⁄
(mutË? 0 : 
EBUSY
)

	)

144 
	#OSPX_±hªad_muãx_u∆ock
(
mut
Ë(
	`LóveCrôiˇlSe˘i⁄
(mut), 0)

	)

145 
	#OSPX_±hªad_muãx_de°roy
(
mut
Ë(
	`DñëeCrôiˇlSe˘i⁄
(mut), 0)

	)

147 
EXPORT
 
OSPX_±hªad_c⁄d_öô
(
OSPX_±hªad_c⁄d_t
 *);

148 
	#OSPX_±hªad_c⁄d_waô
(
c⁄d
, 
mut
Ë
	`OSPX_±hªad_c⁄d_timedwaô
(c⁄d, mut, -1)

	)

149 
EXPORT
 
OSPX_±hªad_c⁄d_timedwaô
(
OSPX_±hªad_c⁄d_t
 *, 
OSPX_±hªad_muãx_t
 *, );

150 
EXPORT
 
OSPX_±hªad_c⁄d_sig«l
(
OSPX_±hªad_c⁄d_t
 *);

151 
EXPORT
 
OSPX_±hªad_c⁄d_brﬂdˇ°
(
OSPX_±hªad_c⁄d_t
 *);

152 
EXPORT
 
OSPX_±hªad_c⁄d_de°roy
(
OSPX_±hªad_c⁄d_t
 *);

154 
EXPORT
 
OSPX_£m_öô
(
OSPX_£m_t
 *, );

155 
EXPORT
 
OSPX_£m_timedwaô
(
OSPX_£m_t
 *, );

156 
EXPORT
 
OSPX_£m_po°
(
OSPX_£m_t
 *);

157 
EXPORT
 
OSPX_£m_waô
(
OSPX_£m_t
 *);

158 
EXPORT
 
OSPX_£m_gëvÆue
(
OSPX_£m_t
 *, *);

159 
EXPORT
 
OSPX_£m_de°roy
(
OSPX_£m_t
 *);

171 #ifde‡
HAVE_PTHREAD_RWLOCK


172 
	#OSPX_±hªad_rwlock_öô
(
rwlock
Ë
	`±hªad_rwlock_öô
‘wlock, 
NULL
)

	)

173 
	#OSPX_±hªad_rwlock_rdlock
(
rwlock
Ë
	`±hªad_rwlock_rdlock
‘wlock)

	)

174 
	#OSPX_±hªad_rwlock_åyrdlock
(
rwlock
Ë
	`±hªad_rwlock_åyrdlock
‘wlock)

	)

175 
	#OSPX_±hªad_rwlock_wæock
(
rwlock
Ë
	`±hªad_rwlock_wæock
‘wlock)

	)

176 
	#OSPX_±hªad_rwlock_åywæock
(
rwlock
Ë
	`±hªad_rwlock_åywæock
‘wlock)

	)

177 
	#OSPX_±hªad_rwlock_u∆ock
(
rwlock
Ë
	`±hªad_rwlock_u∆ock
‘wlock)

	)

178 
	#OSPX_±hªad_rwlock_de°roy
(
rwlock
Ë
	`±hªad_rwlock_de°roy
‘wlock)

	)

180 
EXPORT
 
OSPX_±hªad_rwlock_öô
(
OSPX_±hªad_rwlock_t
 *);

181 
EXPORT
 
OSPX_±hªad_rwlock_rdlock
(
OSPX_±hªad_rwlock_t
 *);

182 
EXPORT
 
OSPX_±hªad_rwlock_åyrdlock
(
OSPX_±hªad_rwlock_t
 *);

183 
EXPORT
 
OSPX_±hªad_rwlock_wæock
(
OSPX_±hªad_rwlock_t
 *);

184 
EXPORT
 
OSPX_±hªad_rwlock_åywæock
(
OSPX_±hªad_rwlock_t
 *);

185 
EXPORT
 
OSPX_±hªad_rwlock_u∆ock
(
OSPX_±hªad_rwlock_t
 *);

186 
EXPORT
 
OSPX_±hªad_rwlock_de°roy
(
OSPX_±hªad_rwlock_t
 *);

189 #ifde‡
__˝lu•lus


	@pool/core/ospx_compatible.h

1 #i‚de‡
__OSPX_COMPATIBLE_H__


2 
	#__OSPX_COMPATIBLE_H__


	)

14 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
_WIN64
)

15 #unde‡
EXPORT


16 #ifde‡
_USRDLL


17 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

19 
	#EXPORT


	)

22 
	#PRI64
 "%I64"

	)

23 #unde‡
ölöe


24 
	#ölöe
 
_ölöe


	)

35 #if(
_MSC_VER
 < 1900)

36 
	#¢¥ötf
 
_¢¥ötf


	)

39 
	#§™dom
 
§™d


	)

40 
	#øndom
 
ønd


	)

41 
	#m¶ìp
(
ª°
Ë
	`SÀï
‘e°)

	)

42 
	#¶ìp
(
ª°
Ë
	`SÀï
‘e° * 1000)

	)

43 
	#bzîo
(
±r
, 
n
Ë
	`mem£t
’å, 0,Ç)

	)

46 
	#EXPORT


	)

47 
	#PRI64
 "%Œ"

	)

49 
	#§™dom
 
§™dom


	)

50 
	#øndom
 
øndom


	)

51 
	#m¶ìp
(
ª°
Ë
	`u¶ìp
‘e° * 1000)

	)

52 
	#¶ìp
(
ª°
Ë
	`¶ìp
‘e°)

	)

53 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

54 
	#max
(
a
, 
b
Ë(◊Ë< (bË? (bË: (a))

	)

59 
	#BIT_£t
(
addªss
, 
i
Ë(((
uöt8_t
 *Ôddªss)[(ò+ 7)/8 -1] |((uöt8_t)1 << (i-1)%8))

	)

60 
	#BIT_gë
(
addªss
, 
i
Ë(((
uöt8_t
 *Ôddªss)[(ò+ 7)/8 -1] & ((uöt8_t)1 << (i-1)%8))

	)

61 
	#BIT_˛r
(
addªss
, 
i
Ë(((
uöt8_t
 *Ôddªss)[(ò+ 7)/8 -1] &~((uöt8_t)1 << (i-1)%8))

	)

63 
	#u∆ikñy
(
exp
Ë
	)
exp

64 
	#likñy
(
exp
Ë
	)
exp

	@pool/core/ospx_errno.h

1 #i‚de‡
__OSPX_ERRNO_H__


2 
	#__OSPX_ERRNO_H__


	)

14 
	~<î∫o.h
>

16 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
_WIN64
)

17 
	#_WIN


	)

18 #ifde‡
_USRDLL


19 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

21 
	#EXPORT


	)

28 
	#EXTEND_BASE_ERR
 40000

	)

29 
	#EOFF
(
x
Ë(
EXTEND_BASE_ERR
 + x)

	)

34 #i‚de‡
ENOTSOCK


35 
	#ENETNOTINITIALIZED
 
	`EOFF
(0)

	)

36 
	#ENETDOWN
 
	`EOFF
(1)

	)

37 
	#ENETRESET
 
	`EOFF
(2)

	)

38 
	#EWOULDBLOCK
 
	`EOFF
(3)

	)

39 
	#EOVERFLOW
 
	`EOFF
(4)

	)

40 
	#EAFNOSUPPORT
 
	`EOFF
(5)

	)

41 
	#ENOTSOCK
 
	`EOFF
(6)

	)

42 
	#EINPROGRESS
 
	`EOFF
(7)

	)

43 
	#EPROTONOSUPPORT
 
	`EOFF
(8)

	)

44 
	#ENOTCONN
 
	`EOFF
(9)

	)

45 
	#EOPNOTSUPP
 
	`EOFF
(10)

	)

46 
	#EMSGSIZE
 
	`EOFF
(11)

	)

47 
	#EHOSTUNREACH
 
	`EOFF
(12)

	)

48 
	#ECONNRESET
 
	`EOFF
(13)

	)

49 
	#ETIMEDOUT
 
	`EOFF
(14)

	)

50 
	#EEDESTADDRREQ
 
	`EOFF
(15)

	)

51 
	#ENETUNREACH
 
	`EOFF
(16)

	)

52 
	#EADDRINUSE
 
	`EOFF
(17)

	)

53 
	#EALREADY
 
	`EOFF
(18)

	)

54 
	#ECONNREFUSED
 
	`EOFF
(19)

	)

55 
	#EDESTADDRREQ
 
	`EOFF
(20)

	)

56 
	#EISCONN
 
	`EOFF
(21)

	)

57 
	#EABORTED
 
	`EOFF
(22)

	)

58 
	#ESYSNOTREADY
 
	`EOFF
(23)

	)

59 
	#EVER
 
	`EOFF
(24)

	)

60 
	#EPROTOTYPE
 
	`EOFF
(25)

	)

64 
	#EXPORT


	)

67 
	#OSPX_ERR_END
 50000

	)

68 
	~"o•x_ty≥.h
"

70 #ifde‡
__˝lu•lus


78 
EXPORT
 c⁄° *
OSPX_sys_°ªº‹
(
uöt32_t
 
code
);

80 #ifde‡
__˝lu•lus


	@pool/core/ospx_error.c

12 
	~<°d¨g.h
>

13 
	~<as£π.h
>

15 
	~"o•x.h
"

16 
	~"o•x_com∑tibÀ.h
"

17 
	~"o•x_î∫o.h
"

18 
	~"o•x_îr‹.h
"

22 
OSPX_±hªad_key_t
 
g_o•x_key
;

24 
	sOSPX_em
 {

25 
OSPX_em
 *
	m√xt
;

26 
uöt8_t
 
	mm
;

27 *
	mdesc
;

28 
OSPX_™si_îr‹
 
	mefunc
;

29 } 
	tOSPX_em_t
;

31 
	s___dummy
 {

32 
uöt8_t
 
	me˘x_bôm≠
[32];

33 
OSPX_em_t
 *
	mem
;

34 #ifde‡
CONFIG_OPSX_ERR_THREAD_SAFE


35 
OSPX_±hªad_rwlock_t
 
	mlock
;

37 } 
	go•x_e˘x
;

39 #ifde‡
CONFIG_OSPX_ERR_THREAD_SAFE


40 
	#RWLOCK_INIT
(
˘x
Ë
	`OSPX_±hªad_rwlock_öô
(&(˘x)->
lock
)

	)

41 
	#RWLOCK_READER_ACQUIRE
(
˘x
Ë
	`OSPX_±hªad_rwlock_rdlock
(&(˘x)->
lock
)

	)

42 
	#RWLOCK_WRITER_ACQUIRE
(
˘x
Ë
	`OSPX_±hªad_rwlock_wæock
(&(˘x)->
lock
)

	)

43 
	#RWLOCK_RELEASE
(
˘x
Ë
	`OSPX_±hªad_rwlock_u∆ock
(&(˘x)->
lock
)

	)

45 
	#RWLOCK_INIT
(
˘x
Ë0

	)

46 
	#RWLOCK_READER_ACQUIRE
(
˘x
)

	)

47 
	#RWLOCK_WRITER_ACQUIRE
(
˘x
)

	)

48 
	#RWLOCK_RELEASE
(
˘x
)

	)

51 
	#OSPX_m_is‰ì
(
m
Ë(!
	`BIT_gë
(
o•x_e˘x
.
e˘x_bôm≠
, m+1))

	)

52 
	#OSPX_m_u£d
(
m
Ë
	`BIT_£t
(
o•x_e˘x
.
e˘x_bôm≠
, m+1)

	)

53 
	#OSPX_m_dñ
(
m
Ë
	`BIT_˛r
(
o•x_e˘x
.
e˘x_bôm≠
, m+1)

	)

54 
	#OSPX_m_√w
(
m
) \

55 { 
i
=0;\

56 ;
i
<255; i++) {\

57 i‡(
	`OSPX_m_is‰ì
(
i
)) {\

58 
m
 = 
i
;\

62 }

	)

64 
OSPX_em_t
 *

65 
	$OSPX_˘x
(
uöt8_t
 
m
)

67 
OSPX_em_t
 *
˘x
 = 
o•x_e˘x
.
em
;

69 i‡(
˘x
 && 
m
 != ctx->m)

70 ;
˘x
;˘x=˘x->
√xt
)

71 i‡(
m
 =
˘x
->
√xt
->m)

73  
˘x
;

74 
	}
}

76 
EXPORT
 const *

77 
	$OSPX_edesc
(
OSPX_îr‹_t
 
îr‹
)

79 c⁄° *
m
 = "Unkown";

81 
	`RWLOCK_READER_ACQUIRE
(&
o•x_e˘x
);

82 i‡(!
	`OSPX_m_is‰ì
(
	`OSPX_emoduÀ
(
îr‹
))) {

83 
OSPX_em_t
 *
˘x
 = 
	`OSPX_˘x
(
	`OSPX_emoduÀ
(
îr‹
));

85 i‡(
o•x_e˘x
.
em
 !
˘x
)

86 
˘x
 = ctx->
√xt
;

87 
m
 = 
˘x
->
desc
;

89 
	`RWLOCK_RELEASE
(&
o•x_e˘x
);

91  
m
;

92 
	}
}

94 
EXPORT
 
OSPX_™si_îr‹


95 
	$OSPX_efunc
(
uöt8_t
 
m
)

97 
OSPX_™si_îr‹
 
efunc
 = 
NULL
;

99 
	`RWLOCK_READER_ACQUIRE
(&
o•x_e˘x
);

100 i‡(!
	`OSPX_m_is‰ì
(
m
)) {

101 
OSPX_em_t
 *
˘x
 = 
	`OSPX_˘x
(
m
);

103 i‡(
o•x_e˘x
.
em
 !
˘x
)

104 
˘x
 = ctx->
√xt
;

105 
efunc
 = 
˘x
->efunc;

107 
	`RWLOCK_RELEASE
(&
o•x_e˘x
);

109  
efunc
;

110 
	}
}

112 
EXPORT
 

113 
	$OSPX_îr‹_ªgi°î
(
uöt8_t
 *
m
, c⁄° *
desc
, 
OSPX_™si_îr‹
 
efunc
)

115 
¶öôülizõd
 = 0;

116 
OSPX_em_t
 *
e˘x
;

118 i‡(!
¶öôülizõd
) {

119 
	`mem£t
(&
o•x_e˘x
, 0, (ospx_ectx));

120 i‡((
î∫o
 = 
	`RWLOCK_INIT
(&
o•x_e˘x
)))

122 
¶öôülizõd
 = 1;

125 
e˘x
 = (
OSPX_em_t
 *)
	`ˇŒoc
(1, (OSPX_em_tË+ (
desc
 ? (
	`°æí
(desc) + 1) : 0));

126 i‡(!
e˘x
) {

127 
î∫o
 = 
ENOMEM
;

130 
e˘x
->
desc
 = (*)(ectx + 1);

131 
e˘x
->
m
 = *m;

132 
e˘x
->
efunc
 =Éfunc;

133 i‡(
desc
)

134 
	`°r˝y
(
e˘x
->
desc
, desc);

136 
	`RWLOCK_WRITER_ACQUIRE
(&
o•x_e˘x
);

137 i‡(!
	`OSPX_m_is‰ì
(
e˘x
->
m
))

138 
	`OSPX_m_√w
(
e˘x
->
m
);

140 i‡(!
o•x_e˘x
.
em
)

141 
o•x_e˘x
.
em
 = 
e˘x
;

143 
e˘x
->
√xt
 = 
o•x_e˘x
.
em
;

144 
o•x_e˘x
.
em
 = 
e˘x
;

146 *
m
 = 
e˘x
->m;

147 
	`OSPX_m_u£d
(
e˘x
->
m
);

148 
	`RWLOCK_RELEASE
(&
o•x_e˘x
);

151 
	}
}

153 
EXPORT
 

154 
	$OSPX_îr‹_uƒegi°î
(
uöt8_t
 
m
)

156 
	`RWLOCK_WRITER_ACQUIRE
(&
o•x_e˘x
);

157 i‡(!
	`OSPX_m_is‰ì
(
m
)) {

158 
OSPX_em_t
 *
˘x
;

160 
˘x
 = 
	`OSPX_˘x
(
m
);

161 i‡(
˘x
 =
o•x_e˘x
.
em
) {

162 
o•x_e˘x
.
em
 = o•x_e˘x.em->
√xt
;

163 
	`‰ì
(
˘x
);

165 
OSPX_em_t
 *
˘x0
;

167 
˘x0
 = 
˘x
->
√xt
;

168 
˘x
->
√xt
 = 
˘x0
->next;

169 
	`‰ì
(
˘x0
);

171 
	`OSPX_m_dñ
(
m
);

173 
	`RWLOCK_RELEASE
(&
o•x_e˘x
);

174 
	}
}

176 
EXPORT
 

177 
	$OSPX_£éa°îr‹
(
OSPX_îr‹_t
 
îr‹
)

179 
OSPX_és_t
 *
és
;

181 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

187 i‡(
és
) {

188 
és
->
îr‹
 =Érror;

190 i‡(
és
->
îΩªfix
) {

191 
	`‰ì
(
és
->
îΩªfix
);

192 
és
->
îΩªfix
 = 0;

193 
és
->
îΩªfix_bufÊí
 = 0;

196 
	}
}

198 
EXPORT
 
OSPX_îr‹_t


199 
	$OSPX_gëœ°îr‹
()

201 
OSPX_és_t
 *
és
;

203 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

204 i‡(!
és
)

205  
	`OSPX_MAKERROR
(
OSPX_M_SYS
, 0);

207  (
OSPX_îr‹_t
)
és
->
îr‹
;

208 
	}
}

211 
EXPORT
 const *

212 
	$OSPX_°ªº‹
(
OSPX_îr‹_t
 
îr‹
)

214 
h™dÀd
 = 0;

215 c⁄° *
îr
 = "Unkown";

216 
uöt8_t
 
m
 = 
	`OSPX_emoduÀ
(
îr‹
);

218 
	`RWLOCK_READER_ACQUIRE
(&
o•x_e˘x
);

219 i‡(!
	`OSPX_m_is‰ì
(
m
)) {

220 
OSPX_em_t
 *
˘x
 = 
	`OSPX_˘x
(
m
);

222 
	`as£π
(
˘x
);

223 i‡(
o•x_e˘x
.
em
 !
˘x
)

224 
˘x
 = ctx->
√xt
;

226 i‡(
˘x
->
efunc
) {

227 
h™dÀd
 = 1;

228 
îr
 = 
˘x
->
	`efunc
(
	`OSPX_ecode
(
îr‹
));

234 i‡(!
h™dÀd
 && 
OSPX_ERR_END
 >
	`OSPX_ecode
(
îr‹
))

235 
îr
 = 
	`OSPX_sys_°ªº‹
(
	`OSPX_ecode
(
îr‹
));

236 
	`RWLOCK_RELEASE
(&
o•x_e˘x
);

238  
îr
;

239 
	}
}

241 
EXPORT
 const *

242 
	$OSPX_sys_°ªº‹
(
uöt32_t
 
code
)

244 #ifde‡
_WIN


246 
uöt32_t
 
îr‹
;

247 c⁄° *
desc
;

248 } 
wöîr
[] = {

249 {
ENETDOWN
, "TheÇetwork subsystem orÅheássociated serviceÖrovider has failed"},

250 {
ENETRESET
, "The connection has been broken dueÅo keep-aliveáctivity detecting"

252 {
EWOULDBLOCK
, "ResourceÅemporarily unavailable"},

253 {
EOVERFLOW
, "ValueÅooÜarge for defined dataÅype"},

254 {
EAFNOSUPPORT
, "Address familyÇot supported byÖrotocol"},

255 {
ENOTSOCK
, "Socket operation onÇon-socket"},

256 {
EINPROGRESS
, "OperationÇow inÖrogress"},

257 {
EPROTONOSUPPORT
, "ProtocolÇot supported"},

258 {
ENOTCONN
, "TransportÉndpoint isÇot connected"},

259 {
EOPNOTSUPP
, "OperationÇot supported"},

260 {
EMSGSIZE
, "MessageÅooÜong"},

261 {
EHOSTUNREACH
, "NoÑouteÅo host"},

262 {
ECONNRESET
, "ConnectionÑeset byÖeer"},

263 {
ETIMEDOUT
, "ConnectionÅimed out"},

264 {
EDESTADDRREQ
, "DestinationáddressÑequired"},

265 {
ENETUNREACH
, "Network is unreachable"},

266 {
EADDRINUSE
, "Addressálready in use"},

267 {
EALREADY
, "Operationálready inÖrogress"},

268 {
ECONNREFUSED
, "ConnectionÑefused"},

269 {
EDESTADDRREQ
, "DestinationáddressÑequired"},

270 {
EISCONN
, "TransportÉndpoint isálready connected"},

271 {
EPROTOTYPE
, "The specifiedÖrotocol isÅhe wrongÅype forÅhis socket"},

273 
size_t
 
wesize
 = (
wöîr
)/(*winerr);

275 i‡(
code
 >
EXTEND_BASE_ERR
) {

276 
size_t
 
ödex
;

277 c⁄° *
îr
 = "Unkown";

279 
ödex
=0; index<
wesize
; ++index) {

280 i‡(
wöîr
[
ödex
].
îr‹
 =
code
) {

281 
îr
 = 
wöîr
[
ödex
].
desc
;

285  
îr
;

288  
	`°ªº‹
(
code
);

289 
	}
}

293 
	$îΩªfix_dump
(*
îΩªfix
, 
uöt16_t
 *
bufÊí
, c⁄° *
≠≥nd
)

295 
size_t
 
À·
 = 0;

297 i‡(
îΩªfix
) {

298 
	`°rˇt
(
îΩªfix
, "/");

299 
À·
 = *
bufÊí
 - 
	`°æí
(
îΩªfix
) - 1;

302 i‡(
	`°æí
(
≠≥nd
Ë> 
À·
) {

303 
size_t
 
blkÀn
 = *
bufÊí
 + 
	`°æí
(
≠≥nd
Ë- 
À·
 + 50;

304 *
√wblk
 = (*)
	`ªÆloc
(
îΩªfix
, 
blkÀn
);

306 i‡(!
√wblk
)

307  
îΩªfix
;

310 i‡(!
îΩªfix
)

311 
√wblk
[0] = '\0';

312 
îΩªfix
 = 
√wblk
;

313 *
bufÊí
 = (
uöt16_t
)
blkÀn
;

315 
	`°rˇt
(
îΩªfix
, 
≠≥nd
);

316  
îΩªfix
;

317 
	}
}

319 
EXPORT
 

320 
	$OSPX_îΩªfix_≠≥nd
(c⁄° *
fmt
, ...)

322 
OSPX_és_t
 *
és
;

324 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

325 i‡(
és
 && 
fmt
) {

326 
îΩªfix
[500];

327 
va_li°
 
≠
;

329 
	`va_°¨t
(
≠
, 
fmt
);

330 
	`v¢¥ötf
(
îΩªfix
, ”º¥efix), 
fmt
, 
≠
);

331 
	`va_íd
(
≠
);

332 
és
->
îΩªfix
 = 
	`îΩªfix_dump
—ls->îΩªfix, &és->
îΩªfix_bufÊí
,Érrprefix);

334 
	}
}

336 
EXPORT
 const *

337 
	$OSPX_îΩªfix
()

339 
OSPX_és_t
 *
és
;

341 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

343  
és
 ?Åls->
îΩªfix
 : 
NULL
;

344 
	}
}

346 
EXPORT
 

347 
	$OSPX_îΩªfix_˛r
()

349 
OSPX_és_t
 *
és
;

351 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

352 i‡(
és
 &&Åls->
îΩªfix
) {

353 
	`‰ì
(
és
->
îΩªfix
);

354 
és
->
îΩªfix
 = 0;

355 
és
->
îΩªfix_bufÊí
 = 0;

357 
	}
}

359 
EXPORT
 

360 
	$OSPX_£éa°îr‹2
(
OSPX_îr‹_t
 
îr‹
)

362 
OSPX_és_t
 *
és
;

364 
és
 = (
OSPX_és_t
 *)
	`OSPX_±hªad_gë•ecific
(
g_o•x_key
);

365 i‡(
és
)

366 
és
->
îr‹
 =Érror;

367 
	}
}

	@pool/core/ospx_error.h

1 #i‚de‡ 
__OSPX_ERROR_H__


2 
	#__OSPX_ERROR_H__


	)

14 
	~"o•x_î∫o.h
"

16 #ifde‡
__˝lu•lus


20 
uöt64_t
 
	tOSPX_îr‹_t
;

25 
	#OSPX_MAKERROR
(
m
,
code
) \

26 ((
OSPX_îr‹_t
)((((((
uöt64_t
)(
uöt8_t
)
m
)Ë<< 56)Ë| ((
uöt32_t
)-1 & (uöt32_t)
code
)))

	)

28 
	#OSPX_emoduÀ
(
îr‹
Ë(
uöt8_t
)”º‹ >> 56)

	)

29 
	#OSPX_ecode
(
îr‹
Ë((
uöt32_t
)”º‹ & (uöt32_t)-1))

	)

34 
	#OSPX_M_SYS
 0x1

	)

37 c⁄° *(*
	tOSPX_™si_îr‹
)(
	tuöt32_t
 
	tcode
);

45 
EXPORT
 
OSPX_îr‹_ªgi°î
(
uöt8_t
 *
m
, c⁄° *
desc
, 
OSPX_™si_îr‹
 
efunc
);

46 
EXPORT
 
OSPX_îr‹_uƒegi°î
(
uöt8_t
 
m
);

47 
EXPORT
 
OSPX_îr‹_uƒegi°î_Æl
();

49 
EXPORT
 c⁄° *
OSPX_edesc
(
OSPX_îr‹_t
 
îr‹
);

50 
EXPORT
 
OSPX_™si_îr‹
 
OSPX_efunc
(
uöt8_t
 
m
);

52 
EXPORT
 
OSPX_£éa°îr‹
(
OSPX_îr‹_t
 
îr‹
);

53 
EXPORT
 
OSPX_îr‹_t
 
OSPX_gëœ°îr‹
();

54 
EXPORT
 c⁄° *
OSPX_°ªº‹
(
OSPX_îr‹_t
 
îr‹
);

57 
EXPORT
 
OSPX_îΩªfix_≠≥nd
(c⁄° *
fmt
, ...);

58 
EXPORT
 c⁄° *
OSPX_îΩªfix
();

59 
EXPORT
 
OSPX_îΩªfix_˛r
();

60 
EXPORT
 
OSPX_£éa°îr‹2
(
OSPX_îr‹_t
 
îr‹
);

62 
	#PUSH_CALL_RESET
(
îr‹
) \

64 
	`OSPX_£éa°îr‹
(
îr‹
); \

65 
	`PUSH_CALL2
(
ecode
); \

66 } 0)

	)

68 
	#PUSH_CALL_SET
(
îr‹
) \

70 
	`OSPX_£éa°îr‹2
(
îr‹
); \

71 
	`PUSH_CALL2
(
ecode
); \

72 } 0)

	)

74 
	#PUSH_CALL2
(
ecode
Ë
	`OSPX_îΩªfix_≠≥nd
("%s(%u)<", 
__FUNCTION__
, (
uöt32_t
Îcode)

	)

75 
	#PUSH_CALL
 
	`OSPX_îΩîfix_≠≥nd
("%s<", 
__FUNCTION__
);

	)

76 #ifde‡
__˝lu•lus


	@pool/core/ospx_type.h

1 #i‚de‡
__OSPX_TYPE_H__


2 
	#__OSPX_TYPE_H__


	)

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<î∫o.h
>

19 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
_WIN64
)

20 
	#_WIN


	)

21 
	#WIN32_LEAN_AND_MEAN


	)

22 
	#WIN64_LEAN_AND_MEAN


	)

24 
	~<sys/timeb.h
>

25 
	~<wödows.h
>

26 
	~<wösock2.h
>

27 
	~<¥o˚ss.h
>

29 #ifde‡
_HAS_STDINT_H


30 
	~<°döt.h
>

32 
__öt8
 
	töt8_t
;

33 
__öt16
 
	töt16_t
;

34 
__öt32
 
	töt32_t
;

35 
__öt64
 
	töt64_t
;

36 
	t__öt8
 
	tuöt8_t
;

37 
	t__öt16
 
	tuöt16_t
;

38 
	t__öt32
 
	tuöt32_t
;

39 
	t__öt64
 
	tuöt64_t
;

40 
	tssize_t
;

44 #i‚de‡
_TIMEZONE_DEFINED


45 
	#_TIMEZONE_DEFINED


	)

46 
	stimez⁄e
 {

47 
	mtz_möuãswe°
;

48 
	mtz_d°time
;

54 
ssize_t
 
	mn_waôög
, 
	mn_to_wake
, 
	mgíî©i⁄
;

55 
CRITICAL_SECTION
 
	m£˘i⁄
;

56 
HANDLE
 
	mhEvít
;

57 } 
	tOSPX_±hªad_c⁄d_t
;

60 
	mmagic
;

61 
CRITICAL_SECTION
 
	m£˘i⁄
;

62 
	mwaôîs
;

63 
	mˇkes
;

64 
HANDLE
 
	mhSem
;

65 } 
	tOSPX_£m_t
;

68 
HANDLE
 
	mh
;

69 
uöt64_t
 
	mîr‹
;

70 *
	mîΩªfix
;

71 
uöt16_t
 
	mîΩªfix_bufÊí
;

72 
uöt16_t
 
	mf_…ls
:1;

73 
uöt16_t
 
	mf_ªsv
:15;

74 } 
	tOSPX_és_t
;

76 
DWORD
 
	tOSPX_±hªad_key_t
;

77 
HANDLE
 
	tOSPX_±hªad_t
;

78 
CRITICAL_SECTION
 
	tOSPX_±hªad_muãx_t
;

81 
	mboﬁón
;

82 
	mªf
;

83 } 
	tOSPX_±hªad_⁄˚_t
;

85 
	#OSPX_PTHREAD_ONCE_INIT
 {0, 0}

	)

88 
	~<°döt.h
>

89 
	~<uni°d.h
>

90 
	~<±hªad.h
>

91 
	~<sys/time.h
>

92 
	~<£m≠h‹e.h
>

93 
	~<sys/mm™.h
>

94 
	~<sys/°©.h
>

95 
	~<f˙é.h
>

98 
uöt64_t
 
	mîr‹
;

99 *
	mîΩªfix
;

100 
uöt16_t
 
	mîΩªfix_bufÊí
;

101 
uöt16_t
 
	mf_…ls
:1;

102 
uöt16_t
 
	mf_ªsv
:15;

103 } 
	tOSPX_és_t
;

105 
±hªad_key_t
 
	tOSPX_±hªad_key_t
;

106 
±hªad_t
 
	tOSPX_±hªad_t
;

107 
±hªad_muãx_t
 
	tOSPX_±hªad_muãx_t
;

108 
±hªad_c⁄d_t
 
	tOSPX_±hªad_c⁄d_t
;

109 
±hªad_⁄˚_t
 
	tOSPX_±hªad_⁄˚_t
;

110 
£m_t
 
	tOSPX_£m_t
;

111 
	#OSPX_PTHREAD_ONCE_INIT
 
PTHREAD_ONCE_INIT


	)

115 #ifde‡
HAVE_PTHREAD_RWLOCK


116 
±hªad_rwlock_t
 
	tOSPX_±hªad_rwlock_t
;

120 
OSPX_±hªad_muãx_t
 
	mrw_mut
;

121 
OSPX_±hªad_c⁄d_t
 
	mrw_c⁄dªadîs
;

122 
OSPX_±hªad_c⁄d_t
 
	mrw_c⁄dwrôîs
;

123 
	mrw_magic
, 
	mrw_ªf
;

124 
	mrw_nwaôªadîs
, 
	mrw_nwaôwrôîs
;

125 } 
	tOSPX_±hªad_rwlock_t
;

	@pool/core/sm_cache.c

11 
	~"o•x_î∫o.h
"

12 
	~"sm_ˇche.h
"

13 
	~"msglog.h
"

15 
	#M_CACHE
 "smˇche"

	)

18 
smˇche_öô2
(
smˇche_t
 *
smc
, c⁄° *
«me
, 
∆imô_ˇche
,

19 
OSPX_±hªad_muãx_t
 *
exã∫Æ_lock
,

20 
lÊags
, *
›aque
, *(*
¸óãr
)(*opaque),

21 (*
de°roy
)(*
obj
, *
›aque
),

22 (*
√ed_de°roy
)(*
obj
, *
›aque
))

24 
smc
->
desc
 = 
«me
;

25 
smc
->
xq
.
n
 = 0;

26 
smc
->
xq
.
qfú°
 = smc->xq.
qœ°
 = 
NULL
;

27 
smc
->
∆imô_ˇche
 =Çlimit_cache ?Çlimit_cache : -1;

28 
smc
->
lock
 = 
exã∫Æ_lock
;

29 
smc
->
lÊags
 =Üflags;

30 
smc
->
›aque
 = opaque;

31 
smc
->
¸óãr
 = creater;

32 
smc
->
de°roy
 = destroy;

33 
smc
->
√ed_de°roy
 =Çeed_destroy;

35 
	`MSG_log
(
M_CACHE
, 
LOG_INFO
,

37 
smc
->
desc
, smc);

39 
	`as£π
 (!
smc
->
√ed_de°roy
 || smc->
de°roy
);

40 i‡(!
smc
->
lock
) {

41 i‡((
î∫o
=
	`OSPX_±hªad_muãx_öô
(&
smc
->
°ack_lock
, 0))) {

42 
	`MSG_log
(
M_CACHE
, 
LOG_ERR
,

43 "muãx_öô:%s\n", 
	`OSPX_sys_°ªº‹
(
î∫o
));

46 
smc
->
lock
 = &smc->
°ack_lock
;

50 
	}
}

53 
	$smˇche_ª£rve
(
smˇche_t
 *
smc
, 
n
)

55 i‡(
smc
->
¸óãr
) {

56 *
obj
 = (*)0x1;

58 
n
 -
	`smˇche_n
(
smc
);

59 -- 
n
 > 0 && 
obj
) {

60 i‡(
CACHE_F_LOCK_CREATER
 & 
smc
->
lÊags
) {

61 
	`smˇche_lock
(
smc
);

62 i‡((
obj
 = (*
smc
->
¸óãr
)(smc->
›aque
)) &&

63 
n
 <
	`smˇche_addl
(
smc
, 
obj
))

64 
n
 = 0;

65 
	`smˇche_u∆ock
(
smc
);

67 } i‡((
obj
 = (*
smc
->
¸óãr
)(smc->
›aque
)) &&

68 
n
 <
	`smˇche_add
(
smc
, 
obj
))

69 
n
 = 0;

72 
	}
}

75 
	$smˇche_ª£t
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
oq
)

77 
nÊushed
 = 0;

78 
smlök_q_t
 
rmq
 = {0, 
NULL
, NULL};

80 
	`MSG_log
(
M_CACHE
, 
LOG_INFO
,

82 
smc
->
desc
, smc);

84 
	`smˇche_lock
(
smc
);

86 i‡(
	`smˇche_ÊushabÀl
(
smc
, 0))

87 
nÊushed
 = 
	`smˇche_gë_Êush_ql
(
smc
, 0, &
rmq
);

90 i‡(
oq
) {

91 *
oq
 = 
smc
->
xq
;

94 
smc
->
xq
.
n
 = 0;

95 
smc
->
xq
.
qfú°
 = smc->xq.
qœ°
 = 
NULL
;

97 
	`smˇche_u∆ock
(
smc
);

100 i‡(
nÊushed
)

101 
	`smˇche_de°roy_q
(
smc
, &
rmq
);

102 
	}
}

105 
	$smˇche_gë_Êush_ql
(
smˇche_t
 *
smc
, 
nˇched_limô
, 
smlök_q_t
 *
q
)

107 
nÊushed
;

108 
smlök
 *
p
, *
n
;

110 
	`as£π
 (
nˇched_limô
 >0 && 
q
);

111 
	`as£π
 (
	`smˇche_ÊushabÀl
(
smc
, 
nˇched_limô
));

113 i‡(!
nˇched_limô
 && 
	`smˇche_√ed_de°roy
(
smc
, smc->
xq
.
qœ°
)) {

114 *
q
 = 
smc
->
xq
;

115 
smc
->
xq
.
qfú°
 = smc->xq.
qœ°
 = 
NULL
;

116 
smc
->
xq
.
n
 = 0;

117  
q
->
n
;

119 
p
 = 
smc
->
xq
.
qfú°
;

120 
nÊushed
 = 
	`smˇche_∆
(
smc
Ë- 
nˇched_limô
;

121 
q
->
n
=0;
p
 && 
nÊushed
 > 0;Ö=n, --nflushed) {

122 
n
 = 
p
->
√xt
;

124 i‡(!
	`smˇche_√ed_de°roy
(
smc
, 
p
))

127 i‡(!
q
->
qfú°
)

128 
q
->
qfú°
 = 
p
;

129 
q
->
qœ°
 = 
p
;

130 ++ 
q
->
n
;

133 i‡(
q
->
n
) {

134 
q
->
qœ°
->
√xt
 = 
NULL
;

135 
smc
->
xq
.
qfú°
 = 
p
;

136 
smc
->
xq
.
n
 -
q
->n;

138  
q
->
n
;

139 
	}
}

142 
	$smˇche_Êush
(
smˇche_t
 *
smc
, 
nˇched_limô
)

144 i‡(!
nˇched_limô
)

145 
	`MSG_log
(
M_CACHE
, 
LOG_INFO
,

147 
smc
->
desc
, smc);

149  
	`smˇche_add_limô
(
smc
, 
NULL
, 
nˇched_limô
);

150 
	}
}

153 
	$smˇche_add_limô
(
smˇche_t
 *
smc
, *
obj
, 
nˇched_limô
)

155 
nÊushed
 = 0, 
íje˘ed
 = 0;

156 
smlök_q_t
 
rmq
 = {0, 
NULL
, NULL};

158 i‡(-1 =
nˇched_limô
)

159 
nˇched_limô
 = 
	`smˇche_limôed_ˇche
(
smc
);

161 i‡(
nˇched_limô
 < 0)

162 
nˇched_limô
 = 1;

164 
	`smˇche_lock
(
smc
);

165 i‡(
obj
) {

166 i‡(!
	`smˇche_ac˚s¶
(
smc
, 
obj
, 
nˇched_limô
))

167 
íje˘ed
 = 1;

169 
	`smˇche_addl
(
smc
, 
obj
);

171 i‡(
	`smˇche_ÊushabÀl
(
smc
, 
nˇched_limô
))

172 
	`smˇche_gë_Êush_ql
(
smc
, 
nˇched_limô
, &
rmq
);

173 
	`smˇche_u∆ock
(
smc
);

175 i‡(
íje˘ed
) {

176 *(**)
obj
 = 
NULL
;

178 i‡(
nÊushed
)

179 
rmq
.
qœ°
->
√xt
 = 
obj
;

181 
rmq
.
qfú°
 = 
obj
;

182 
rmq
.
qœ°
 = 
obj
;

183 ++ 
rmq
.
n
;

184 ++ 
nÊushed
;

187 i‡(
rmq
.
n
) {

188 
nÊushed
 = 
rmq
.
n
;

189 
	`smˇche_de°roy_q
(
smc
, &
rmq
);

192  
nÊushed
;

193 
	}
}

196 
	$smˇche_add_q_limô
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
, 
nˇched_limô
)

198 
nÊushed
 = 0;

199 
smlök_q_t
 
rmq
 = {0, 
NULL
, NULL};

201 i‡(-1 =
nˇched_limô
)

202 
nˇched_limô
 = 
	`smˇche_limôed_ˇche
(
smc
);

204 
	`as£π
 (!
q
 || q->
n
 >= 0);

206 
	`smˇche_lock
(
smc
);

207 
	`smˇche_add_ql
(
smc
, 
q
);

209 i‡(
	`smˇche_ÊushabÀl
(
smc
, 
nˇched_limô
))

210 
	`smˇche_gë_Êush_ql
(
smc
, 
nˇched_limô
, &
rmq
);

211 
	`smˇche_u∆ock
(
smc
);

213 i‡(
rmq
.
n
) {

214 
nÊushed
 = 
rmq
.
n
;

215 
	`smˇche_de°roy_q
(
smc
, &
rmq
);

218  
nÊushed
;

219 
	}
}

222 
	$smˇche_deöô
(
smˇche_t
 *
smc
)

224 
	`SMLINK_Q_HEAD
(
q
);

226 
	`MSG_log
(
M_CACHE
, 
LOG_INFO
,

228 
smc
->
desc
, smc);

232 i‡(
	`smˇche_ÊushabÀl
(
smc
, 0)) {

233 
	`smˇche_gë_Êush_ql
(
smc
, 0, &
q
);

234 
	`smˇche_de°roy_q
(
smc
, &
q
);

237 i‡(
smc
->
lock
 !&smc->
°ack_lock
)

238 
	`OSPX_±hªad_muãx_de°roy
(
smc
->
lock
);

239 
	}
}

	@pool/core/sm_cache.h

1 #i‚de‡
__SM_CACHE_H__


2 
	#__SM_CACHE_H__


	)

14 
	~<as£π.h
>

15 
	~"o•x.h
"

16 
	~"o•x_com∑tibÀ.h
"

18 #ifde‡
__˝lu•lus


22 
	#FUNC_ALWAYS_NEED_DESTROY
 (((*)(*, *))-1)

	)

24 
	ssmlök
 {

25 
smlök
 *
√xt
;

28 
	ssmlök_q
 {

29 
n
;

30 
smlök
 *
qfú°
, *
qœ°
;

31 } 
	tsmlök_q_t
;

33 
	#SMLINK_Q_HEAD
(
«me
) \

34 
smlök_q_t
 
«me
 = {0, 
NULL
, NULL}

	)

36 
ölöe
 
INIT_SMLINK_Q
(
smlök_q_t
 *
q
) {

37 
q
->
n
 = 0;

38 
q
->
qfú°
 = q->
qœ°
 = 0;

44 
	#smlök_q_em±y
(
q
Ë!(q)->
qfú°


	)

45 
	#smlök_q_size
(
q
Ë(q)->
n


	)

46 
	#smlök_q_fú°
(
q
Ë(q)->
qfú°


	)

47 
	#smlök_q_œ°
(
q
Ë(q)->
qœ°


	)

48 
	#smlök_q_√xt
(
obj
Ë*(**)(obj)

	)

50 
ölöe
 
smlök_q_push
(
smlök_q_t
 *
q
, *
obj
) {

51 *(**)
obj
 = 
q
->
qfú°
;

52 
q
->
qfú°
 = (
smlök
 *)
obj
;

53 i‡(!
q
->
n
)

54 
q
->
qœ°
 = (
smlök
 *)
obj
;

55 ++ 
q
->
n
;

58 
ölöe
 *
smlök_q_p›
(
smlök_q_t
 *
q
) {

59 *
obj
 = 
NULL
;

61 i‡(
q
->
n
) {

62 
obj
 = 
q
->
qfú°
;

63 
q
->
qfú°
 = q->qfú°->
√xt
;

64 i‡(!-- 
q
->
n
)

65 
q
->
qœ°
 = 
NULL
;

67  
obj
;

70 
	#smlök_q_f‹óch
(
q
, 
obj
) \

71 
obj
=
q
->
qfú°
; obj; obj=*(**)obj)

	)

73 
	#smlök_q_f‹óch_ß„
(
q
, 
n
, 
obj
) \

74 
obj
=(
q
)->
qfú°
, 
n
=obj ? *(**)obj : 
NULL
; \

75 
obj
; obj=
n
,Ç=obj ? *(**)obj : 
NULL
)

	)

79 
	ssmˇche
 {

80 c⁄° *
desc
;

81 
smlök_q_t
 
xq
;

82 
∆imô_ˇche
;

83 
lÊags
;

84 *
›aque
;

85 *(*
¸óãr
)(*
›aque
);

86 (*
de°roy
)(*
obj
, *
›aque
);

87 (*
√ed_de°roy
)(*
obj
, *
›aque
);

88 
OSPX_±hªad_muãx_t
 *
lock
, 
°ack_lock
;

89 } 
	tsmˇche_t
;

91 
	#CACHE_F_LOCK_CREATER
 0x1

	)

92 
smˇche_öô2
(
smˇche_t
 *
smc
, c⁄° *
«me
, 
∆imô_ˇche
, 
OSPX_±hªad_muãx_t
 *
exã∫Æ_lock
,

93 
lÊags
, *
›aque
, *(*
¸óãr
)(*›aque), (*
de°roy
)(*
obj
, *opaque),

94 (*
√ed_de°roy
)(*
obj
, *
›aque
));

96 
ölöe
 
smˇche_öô
(
smˇche_t
 *
smc
, 
∆imô_ˇche
, 
OSPX_±hªad_muãx_t
 *
exã∫Æ_lock
,

97 
lÊags
, *
›aque
, *(*
¸óãr
)(*›aque), (*
de°roy
)(*
obj
, *opaque),

98 (*
√ed_de°roy
)(*
obj
, *
›aque
)) {

99  
smˇche_öô2
(
smc
, "dummy", 
∆imô_ˇche
, 
exã∫Æ_lock
,

100 
lÊags
, 
›aque
, 
¸óãr
, 
de°roy
, 
√ed_de°roy
);

104 
	#smˇche_«me
(
smc
Ë(smc)->
desc


	)

105 
	#smˇche_lock
(
smc
Ë
	`OSPX_±hªad_muãx_lock
((smc)->
lock
)

	)

106 
	#smˇche_u∆ock
(
smc
Ë
	`OSPX_±hªad_muãx_u∆ock
((smc)->
lock
)

	)

107 
	#smˇche_limôed_ˇche
(
smc
Ë(smc)->
∆imô_ˇche


	)

108 
	#smˇche_∆
(
smc
Ë(smc)->
xq
.
n


	)

109 
	#smˇche_auto_lock
(
smc
Ë((smc)->
lock
 =&(smc)->
°ack_lock
)

	)

111 
ölöe
 
smˇche_n
(
smˇche_t
 *
smc
) {

112 
n
;

114 
smˇche_lock
(
smc
);

115 
n
 = 
smˇche_∆
(
smc
);

116 
smˇche_u∆ock
(
smc
);

118  
n
;

121 
ölöe
 
smˇche_√ed_de°roy
(
smˇche_t
 *
smc
, *
obj
) {

122  
FUNC_ALWAYS_NEED_DESTROY
 =
smc
->
√ed_de°roy
 || (smc->need_destroy &&

123 (*
smc
->
√ed_de°roy
)(
obj
, smc->
›aque
));

126 
ölöe
 
smˇche_√ed_de°roy2
(
smˇche_t
 *
smc
) {

127  
smc
->
xq
.
n
 > 0 && 
smˇche_√ed_de°roy
(smc, smc->xq.
qfú°
);

134 
ölöe
 
smˇche_ac˚s¶
(
smˇche_t
 *
smc
, *
obj
, 
nˇched_limôed
) {

135  
nˇched_limôed
 < 0 || !
smˇche_√ed_de°roy
(
smc
, 
obj
) ||

136 
nˇched_limôed
 > 
smˇche_∆
(
smc
);

140 
ölöe
 
smˇche_ÊushabÀl
(
smˇche_t
 *
smc
, 
nˇched_limô
) {

141  
nˇched_limô
 >0 &&Çˇched_limô < 
smˇche_∆
(
smc
) &&

142 
smˇche_√ed_de°roy
(
smc
, smc->
xq
.
qfú°
);

148 
ölöe
 
smˇche_ªmove_unÊushabÀ_obje˘¶
(
smˇche_t
 *
smc
) {

149 i‡(
smˇche_∆
(
smc
) > 0) {

150 
smc
->
xq
.
n
 > 0 && !
smˇche_√ed_de°roy
(smc, smc->xq.
qfú°
)) {

151 
smc
->
xq
.
qfú°
 = smc->xq.qfú°->
√xt
;

152 -- 
smc
->
xq
.
n
;

155 i‡(
smc
->
xq
.
n
 <= 0)

156 
smc
->
xq
.
qœ°
 = smc->xq.
qfú°
;

159  
smˇche_∆
(
smc
);

162 
ölöe
 
smˇche_addl
(
smˇche_t
 *
smc
, *
obj
) {

167 i‡(
smˇche_√ed_de°roy
(
smc
, 
obj
Ë&& smc->
xq
.
n
) {

168 *(**)
obj
 = 
smc
->
xq
.
qfú°
;

169 
smc
->
xq
.
qfú°
 = (
smlök
 *)
obj
;

171 i‡(
smc
->
xq
.
n
)

172 
smc
->
xq
.
qœ°
->
√xt
 = (
smlök
 *)
obj
;

174 
smc
->
xq
.
qfú°
 = (
smlök
 *)
obj
;

175 
smc
->
xq
.
qœ°
 = (
smlök
 *)
obj
;

176 
smc
->
xq
.
qœ°
->
√xt
 = 
NULL
;

178  ++ 
smc
->
xq
.
n
;

185 
ölöe
 
smˇche_addl_dú
(
smˇche_t
 *
smc
, *
obj
) {

186 i‡(
smc
->
xq
.
n
) {

187 *(**)
obj
 = 
smc
->
xq
.
qfú°
;

188 
smc
->
xq
.
qfú°
 = (
smlök
 *)
obj
;

191 i‡(
smc
->
xq
.
n
)

192 
smc
->
xq
.
qœ°
->
√xt
 = (
smlök
 *)
obj
;

194 
smc
->
xq
.
qfú°
 = (
smlök
 *)
obj
;

195 
smc
->
xq
.
qœ°
 = (
smlök
 *)
obj
;

196 
smc
->
xq
.
qœ°
->
√xt
 = 
NULL
;

198 ++ 
smc
->
xq
.
n
;

202 
ölöe
 
smˇche_add
(
smˇche_t
 *
smc
, *
obj
) {

203 
n
;

205 
smˇche_lock
(
smc
);

206 
n
 = 
smˇche_addl
(
smc
, 
obj
);

207 
smˇche_u∆ock
(
smc
);

209  
n
;

216 
ölöe
 
smˇche_add_dú
(
smˇche_t
 *
smc
, *
obj
) {

217 
smˇche_lock
(
smc
);

218 
smˇche_addl_dú
(
smc
, 
obj
);

219 
smˇche_u∆ock
(
smc
);

222 
smˇche_add_limô
(
smˇche_t
 *
smc
, *
obj
, 
nˇched_limô
);

224 
ölöe
 
smˇche_add_ql
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
) {

225 
as£π
 (
q
 && q->
n
 > 0);

227 i‡(!
smc
->
√ed_de°roy
) {

228 
smc
->
xq
.
n
 +
q
->n;

229 
q
->
qœ°
->
√xt
 = 
smc
->
xq
.
qfú°
;

230 
smc
->
xq
.
qfú°
 = 
q
->qfirst;

231 i‡(!
smc
->
xq
.
qœ°
)

232 
smc
->
xq
.
qœ°
 = 
q
->qlast;

235 
smlök
 *
c
, *
n
;

237 
c
=
q
->
qfú°
; c; c=
n
) {

238 
n
 = 
c
->
√xt
;

239 
smˇche_addl
(
smc
, 
c
);

243  
smc
->
xq
.
n
;

246 
ölöe
 
smˇche_add_ql_dú
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
) {

247 
smc
->
xq
.
n
 +
q
->n;

248 
q
->
qœ°
->
√xt
 = 
smc
->
xq
.
qfú°
;

249 
smc
->
xq
.
qfú°
 = 
q
->qfirst;

250 i‡(!
smc
->
xq
.
qœ°
)

251 
smc
->
xq
.
qœ°
 = 
q
->qlast;

254 
ölöe
 
smˇche_add_q
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
) {

255 
n
;

257 
smˇche_lock
(
smc
);

258 
n
 = 
smˇche_add_ql
(
smc
, 
q
);

259 
smˇche_u∆ock
(
smc
);

261 
INIT_SMLINK_Q
(
q
);

262  
n
;

265 
ölöe
 
smˇche_add_q_dú
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
) {

266 
smˇche_lock
(
smc
);

267 
smˇche_add_ql_dú
(
smc
, 
q
);

268 
smˇche_u∆ock
(
smc
);

270 
INIT_SMLINK_Q
(
q
);

273 
smˇche_add_q_limô
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
, 
nˇched_limô
);

275 
ölöe
 *
smˇche_gël
(
smˇche_t
 *
smc
, 
¸óã
) {

276 *
obj
 = 
smc
->
xq
.
qfú°
;

278 i‡(
obj
) {

279 
smc
->
xq
.
qfú°
 = (
smlök
 *)*(**)
obj
;

280 i‡(!-- 
smc
->
xq
.
n
)

281 
smc
->
xq
.
qœ°
 = 
NULL
;

283 } i‡(
¸óã
 && 
smc
->
¸óãr
)

284 
obj
 = (*
smc
->
¸óãr
)(smc->
›aque
);

286  
obj
;

289 
ölöe
 *
smˇche_gë
(
smˇche_t
 *
smc
, 
¸óã
) {

290 *
obj
;

291 
¸óã0
 = 
¸óã
 && 
CACHE_F_LOCK_CREATER
 & 
smc
->
lÊags
;

293 
smˇche_lock
(
smc
);

294 
obj
 = 
smˇche_gël
(
smc
, 
¸óã0
);

295 
smˇche_u∆ock
(
smc
);

297 i‡(!
obj
 && 
¸óã
 && 
smc
->
¸óãr
 &&

298 !(
CACHE_F_LOCK_CREATER
 & 
smc
->
lÊags
))

299  (*
smc
->
¸óãr
)(smc->
›aque
);

301  
obj
;

304 
smˇche_gë_Êush_ql
(
smˇche_t
 *
smc
, 
nˇched_limô
, 
smlök_q_t
 *
q
);

306 
smˇche_Êush
(
smˇche_t
 *
smc
, 
nˇched_limô
);

308 
ölöe
 
smˇche_de°roy
(
smˇche_t
 *
smc
, *
obj
) {

309 i‡(
obj
 && 
smˇche_√ed_de°roy
(
smc
, obj)) {

314 i‡(
CACHE_F_LOCK_CREATER
 & 
smc
->
lÊags
) {

315 
smˇche_lock
(
smc
);

316 (*
smc
->
de°roy
)(
obj
, smc->
›aque
);

317 
smˇche_u∆ock
(
smc
);

320 (*
smc
->
de°roy
)(
obj
, smc->
›aque
);

324 
ölöe
 
smˇche_de°roy_q
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
q
) {

325 
smlök
 *
c
, *
n
;

327 i‡(!
smc
->
de°roy
 || !
q
 || q->
n
 <= 0)

330 i‡(
CACHE_F_LOCK_CREATER
 & 
smc
->
lÊags
)

331 
smˇche_lock
(
smc
);

333 
c
=
q
->
qfú°
; c; c=
n
) {

334 
n
 = 
c
->
√xt
;

336 i‡(
smˇche_√ed_de°roy
(
smc
, 
c
))

337 (*
smc
->
de°roy
)(
c
, smc->
›aque
);

340 i‡(
CACHE_F_LOCK_CREATER
 & 
smc
->
lÊags
)

341 
smˇche_u∆ock
(
smc
);

347 
smˇche_ª£rve
(
smˇche_t
 *
smc
, 
n
);

352 
smˇche_ª£t
(
smˇche_t
 *
smc
, 
smlök_q_t
 *
oq
);

357 
smˇche_deöô
(
smˇche_t
 *
smc
);

359 #ifde‡
__˝lu•lus


	@pool/core/timer.c

12 
	~"timî.h
"

13 
	~"o•x.h
"

14 
	~"o•x_com∑tibÀ.h
"

16 
uöt64_t
 
	g___˛ock
 = 0;

18 
ölöe
 
uöt64_t


19 
	$us_now
()

21 
timevÆ
 
tv
;

23 
	`OSPX_gëtimeofday
(&
tv
, 
NULL
);

24  (
uöt64_t
)
tv
.
tv_£c
 * 1000000 +Åv.
tv_u£c
;

25 
	}
}

27 
uöt64_t


28 
	$us_°¨å
()

30  
	`us_now
();

31 
	}
}

34 
	$us_ídr
(
uöt64_t
 
˛ock
)

36 
uöt64_t
 
˛ock_now
 = 
	`us_now
();

38 i‡(
˛ock_now
 <
˛ock
)

41  ()(
˛ock_now
 - 
˛ock
);

42 
	}
}

45 
	$us_°¨t
()

47 
___˛ock
 = 
	`us_°¨å
();

48 
	}
}

51 
	$us_íd
()

53  
	`us_ídr
(
___˛ock
);

54 
	}
}

57 
uöt64_t


58 
	$ms_°¨å
()

60  
	`us_°¨å
() / 1000;

61 
	}
}

64 
	$ms_ídr
(
uöt64_t
 
˛ock
)

66  
	`us_ídr
(
˛ock
 * 1000) / 1000;

67 
	}
}

	@pool/core/timer.h

1 #i‚de‡
__TIMER_H__


2 
	#__TIMER_H__


	)

14 
	~"o•x_ty≥.h
"

16 
us_°¨t
();

17 
us_íd
();

19 
uöt64_t
 
us_°¨å
();

20 
us_ídr
(
uöt64_t
 
˛ock
);

22 
uöt64_t
 
ms_°¨å
();

23 
ms_ídr
(
uöt64_t
 
˛ock
);

	@pool/cpool_factory.c

10 
	~"o•x.h
"

11 
	~"msglog.h
"

12 
	~"˝oﬁ_Á˘‹y.h
"

14 
	#M_DICTIONARY
 "Glb-dic"

	)

15 
	#MAX_FAC_ENTRY
 10

	)

17 
	g__Ác_idx
 = 0, 
	g__Ác_íum_idx
 = 0;

18 
	s˝oﬁ_Á˘‹y_íåy
 {

19 c⁄° *
	mdesc
;

20 c⁄° 
˝oﬁ_Á˘‹y_t
 *
	mÁc
;

21 } 
	g__Ác
[
MAX_FAC_ENTRY
];

24 
	$add_Á˘‹y
(c⁄° *
Ác_desc
, c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
)

26 
idx
;

28 
	`MSG_log
(
M_DICTIONARY
, 
LOG_INFO
,

30 
Ác_desc
);

32 i‡(
__Ác_idx
 =
MAX_FAC_ENTRY
) {

33 
	`MSG_log2
(
M_DICTIONARY
, 
LOG_ERR
,

42 
idx
=0; idx<
__Ác_idx
; idx++) {

43 i‡(!
	`°rcmp
(
__Ác
[
idx
].
desc
, 
Ác_desc
)) {

44 i‡(!
	`memcmp
(
Ác
, 
__Ác
[
idx
].fac, (*fac)))

47 
__Ác
[
idx
].
Ác
 = fac;

52 
__Ác
[
__Ác_idx
].
desc
 = 
Ác_desc
;

53 
__Ác
[
__Ác_idx
 ++].
Ác
 = fac;

55 
	}
}

57 
	~"gp/˝oﬁ_gp_Á˘‹y.h
"

58 
	~"π/˝oﬁ_π_Á˘‹y.h
"

60 
OSPX_±hªad_⁄˚_t
 
	g__o˘l
 = 
OSPX_PTHREAD_ONCE_INIT
;

63 
	$__deÁu…_Á˘‹y_lﬂdög
()

65 
	`add_Á˘‹y
("dy«mic_group", 
	`gë_gp_dy«mic_Á˘‹y
());

66 
	`add_Á˘‹y
("dy«mic_π", 
	`gë_π_dy«mic_Á˘‹y
());

67 
	`add_Á˘‹y
("dy«mic_π_¥i", 
	`gë_π_dy«mic_¥i_Á˘‹y
());

68 
	`add_Á˘‹y
("fixed_π", 
	`gë_π_fixed_Á˘‹y
());

69 
	`add_Á˘‹y
("fixed_π_¥i", 
	`gë_π_fixed_¥i_Á˘‹y
());

70 
	}
}

73 
˝oﬁ_Á˘‹y_t
 *
	$gë_Á˘‹y
(c⁄° *
Ác_desc
)

75 
idx
;

77 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__deÁu…_Á˘‹y_lﬂdög
);

79 
idx
=0; idx<
__Ác_idx
; idx++)

80 i‡(!
	`°rcmp
(
__Ác
[
idx
].
desc
, 
Ác_desc
))

81  
__Ác
[
idx
].
Ác
;

83  
NULL
;

84 
	}
}

86 c⁄° 
˝oﬁ_Á˘‹y_t
 *

87 
	$fú°_Á˘‹y
(c⁄° **
p_Ác_desc
)

89 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__deÁu…_Á˘‹y_lﬂdög
);

91 
__Ác_íum_idx
 = 1;

92 *
p_Ác_desc
 = 
__Ác
[0].
desc
;

94  
__Ác_idx
 ? 
__Ác
[0].
Ác
 : 
NULL
;

95 
	}
}

97 c⁄° 
˝oﬁ_Á˘‹y_t
 *

98 
	$√xt_Á˘‹y
(c⁄° **
p_Ác_desc
)

100 i‡(
__Ác_íum_idx
 >
__Ác_idx
)

101  
NULL
;

103 *
p_Ác_desc
 = 
__Ác
[
__Ác_íum_idx
].
desc
;

105  
__Ác
[
__Ác_íum_idx
 ++].
Ác
;

106 
	}
}

	@pool/cpool_factory.h

1 #i‚de‡
__CPOOL_FACTORY_H__


2 
	#__CPOOL_FACTORY_H__


	)

13 
	~"o•x_ty≥.h
"

14 
	~"li°.h
"

15 
	~"˝oﬁ_mëhod.h
"

21 
	meEº_ªmoved_byu£r
 = 0x1,

27 
	meEº_poﬁ_de°royög
 = 0x2,

32 
	meEº_group_de°royög
 = 0x4,

42 
	meTASK_STAT_F_WAITING
 = 0x01,

47 
	meTASK_STAT_F_SCHEDULING
 = 0x02,

52 
	meTASK_STAT_F_DISPATCHING
 = 0x08,

58 
	meTASK_STAT_F_WPENDING
 = 0x10,

63 
	meTASK_STAT_F_REMOVABLE
 = 
eTASK_STAT_F_WAITING
|
eTASK_STAT_F_WPENDING
,

74 
	meTASK_VM_F_DONE
 = 0x0001,

80 
	meTASK_VM_F_REMOVE_BYPOOL
 = 0x0004,

86 
	meTASK_VM_F_REMOVE
 = 0x0008,

91 
	meTASK_VM_F_REMOVE_FLAGS
 = 
eTASK_VM_F_REMOVE_BYPOOL
|
eTASK_VM_F_REMOVE
,

96 
	meTASK_VM_F_POOL_DESTROYING
 = 0x0010,

103 
	meTASK_VM_F_ENABLE_QUEUE
 = 0x0080,

108 
	meTASK_VM_F_DISABLE_QUEUE
 = 0x0040,

113 
	meTASK_VM_F_USER_FLAGS
 = 
eTASK_VM_F_REMOVE_FLAGS
|
eTASK_VM_F_ENABLE_QUEUE
|

114 
eTASK_VM_F_DISABLE_QUEUE
,

119 
	meTASK_VM_F_GROUP_DESTROYING
 = 0x0100,

124 
	meTASK_VM_F_CACHE
 = 0x0200,

129 
	meTASK_VM_F_PRI
 = 0x0400,

135 
	meTASK_VM_F_PUSH
 = 0x0800,

140 
	meTASK_VM_F_ADJPRI
 = 0x1000,

145 
	meTASK_VM_F_PRI_ONCE
 = 0x2000,

150 
	meTASK_VM_F_DETACHED
 = 0x4000,

159 
	mï_TOP
 = 1,

165 
	mï_BACK
,

169 
	s˘ask
 {

175 c⁄° *
	mèsk_desc
;

182 (*
	mèsk_run
)(
˘ask
 *
	m±ask
);

189 (*
	mèsk_îr_h™dÀr
)(
˘ask
 *
	m±ask
, 
	meRós⁄s
);

196 *
	mèsk_¨g
;

201 
	mèsk_code
;

208 
li°_hód
 
	mlök
;

215 
˝oﬁ_t
 *
	mpoﬁ
;

220 
uöt8_t
 
	mf_sys_Êags
;

227 
uöt8_t
 
	m¥i
;

234 
uöt8_t
 
	m¥i_pﬁicy
;

241 
uöt8_t
 
	m¥iq
;

246 
uöt16_t
 
	mu£r_Êags
;

251 
uöt8_t
 
	mgid
;

260 
uöt8_t
 
	mf_°©
;

265 
uöt16_t
 
	mf_vmÊags
;

270 
öt8_t
 
	mªf
;

275 
uöt8_t
 
	mf_ª£rved
;

277 
	#TASK_CAST_FAC
(
±ask
Ë((
˘ask_t
 *)’èsk))

	)

284 
	meERR_NOMEM
 = 1,

292 
	meERR_DESTROYING
 = 2,

300 
	meERR_THROTTLE
 = 4,

306 
	meTASK_ERR_BUSY
 = 7,

319 
	meTASK_ERR_DISABLE_QUEUE
 = 8,

325 
	meTASK_ERR_DESTINATION
 = 9,

333 
	meERR_GROUP_THROTTLE
 = 10,

338 
	meERR_GROUP_NOT_FOUND
 = 11,

343 
	meERR_GROUP_DESTROYING
 = 12,

349 
	meERR_TIMEDOUT
 = 13,

357 
	meERR_INTERRUPTED
 = 14,

364 
	meERR_OTHER
 = 15,

369 
	meERR_NSUPPORT
 = 16,

376 
	meERR_î∫o
 = 17,

379 
	eï_TH


386 
	mï_TH_SCHED_NONE
,

391 
	mï_TH_SCHED_RR
,

396 
	mï_TH_SCHED_FIFO
,

401 
	mï_TH_SCHED_OTHER


404 
	sthªad_©å
 {

408 
	m°ack_size
;

413 
ï_TH
 
	mï_schï
;

418 
	msche_¥i‹ôy
;

424 
	sscheduÀr_©å
 {

447 
	mlimô_∑øŒe_èsks
;

456 
	mª˚ive_bíifôs
;

462 
	s˘ask_group_°©
 {

466 
	mgid
;

471 *
	mdesc
;

476 
size_t
 
	mdesc_Àngth
;

481 
scheduÀr_©å
 
	m©å
;

486 
time_t
 
	m¸óãd
;

491 
	mwaôîs
;

499 
	msu•íded
;

506 
	mthrŸée_⁄
;

511 
	m¥iq_num
;

517 
	m≈ídögs
;

523 
	mƒu¬ögs
;

530 
	mndi•©chögs
;

534 
	s˝oﬁ_°©
 {

538 c⁄° *
	mdesc
;

543 
time_t
 
	m¸óãd
;

550 
	mªf
;

555 
	mwaôîs
;

560 
	m¥iq_num
;

570 
	mthrŸée_⁄
;

580 
	msu•íded
;

587 
	mmaxthªads
;

598 
	mmöthªads
;

603 
	mcuπhªads
;

608 
	mcuπhªads_a˘ive
;

618 
	mcuπhªads_dyög
;

626 
	ma˘timeo
;

633 
	møndtimeo
;

638 
	mèsks_≥ak
;

643 
	mthªads_≥ak
;

649 
	mèsks_added
;

655 
	mèsks_¥o˚s£d
;

661 
	mèsks_ªmoved
;

666 
	mcuπasks_≥ndög
;

671 
	mcuπasks_schedulög
;

676 
	mcuπasks_ªmovög
;

680 
	s˝oﬁ_mëhod
 {

684 
˝oﬁ_basic_mëhod_t
 
	mme
;

689 
˝oﬁ_adv™˚_mëhod_t
 
	madvme
;

691 } 
	t˝oﬁ_mëhod_t
;

698 
	meFUNC_F_EXTEND
 = 0x01,

703 
	meFUNC_F_ADVANCE
 = 0x02,

708 
	meFUNC_F_DYNAMIC_THREADS
 = 0x04,

713 
	meFUNC_F_PRIORITY
 = 0x08,

718 
	meFUNC_F_TASK_WAITABLE
 = 0x10,

723 
	meFUNC_F_TRACEABLE
 = 0x20,

728 
	meFUNC_F_TASK_EX
 = 0x40,

733 
	meFUNC_F_DISABLEQ
 = 0x80,

737 
	s˝oﬁ
 {

741 
	mefuncs
;

746 c⁄° 
˝oﬁ_mëhod_t
 *
	mme
;

751 c⁄° *
	mdesc
;

756 
˝oﬁ_˘x_t
 
	m˘x
;

763 (*
	m‰ì
)(
˝oﬁ_t
 *
	mÁc_ös
);

767 
	s˝oﬁ_Á˘‹y
 {

771 c⁄° 
	msc‹es
;

776 c⁄° 
	mefuncs
;

781 c⁄° 
˝oﬁ_mëhod_t
 *c⁄° 
	mmëhod
;

786 
	m˝oﬁ_t
 *(*
	m¸óã
)(c⁄° *
	mdesc
, 
	mmaxthªads
, 
	mmöthªads
, 
	m¥iq_num
, 
	msu•íd
);

788 } 
	t˝oﬁ_Á˘‹y_t
;

793 
add_Á˘‹y
(c⁄° *
Ác_desc
, c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
);

798 c⁄° 
˝oﬁ_Á˘‹y_t
 *
gë_Á˘‹y
(c⁄° *
Ác_desc
);

803 c⁄° 
˝oﬁ_Á˘‹y_t
 *
fú°_Á˘‹y
(c⁄° **
p_Ác_desc
);

808 c⁄° 
˝oﬁ_Á˘‹y_t
 *
√xt_Á˘‹y
(c⁄° **
p_Ác_desc
);

	@pool/cpool_method.h

1 #i‚de‡
__CPOOL_METHOD_H__


2 
	#__CPOOL_METHOD_H__


	)

13 
	~<°dlib.h
>

16 
˘ask
 
	t˘ask_t
;

17 
˝oﬁ
 
	t˝oﬁ_t
;

18 *
	t˝oﬁ_˘x_t
;

20 
	gscheduÀr_©å
;

21 
	gthªad_©å
;

22 
	g˘ask_group_°©
;

25 (*
	tVisô_cb
)(
	t˘ask_t
 *
	t±ask
, *
	t›aque
);

28 
	s˝oﬁ_basic_mëhod
 {

32 
˝oﬁ_°©
 *(*
°©
Ë(
˝oﬁ_˘x_t
 
˘x
, cpool_stat *stat);

33 *(*
scheduÀr_m≠_dump
Ë(
˝oﬁ_˘x_t
 
˘x
, *
buff
, 
size_t
 
bufÊí
);

34 (*
©exô
Ë(
˝oﬁ_˘x_t
 
˘x
, (*
__©exô
)(*), *
›aque
);

35 (*
addªf
Ë(
˝oﬁ_˘x_t
 
˘x
);

36 (*
ªÀa£
Ë(
˝oﬁ_˘x_t
 
˘x
);

37 (*
£èâr
Ë(
˝oﬁ_˘x_t
 
˘x
, 
thªad_©å
 *
©å
);

38 (*
gë©å
Ë(
˝oﬁ_˘x_t
 
˘x
, 
thªad_©å
 *
©å
);

39 (*
£t_a˘ivëimeo
Ë(
˝oﬁ_˘x_t
 
˘x
, 
a˘timeo
, 
øndtimeo
);

40 (*
adju°
Ë(
˝oﬁ_˘x_t
 
˘x
, 
max
, 
mö
);

41 (*
adju°_abs
Ë(
˝oﬁ_˘x_t
 
˘x
, 
max
, 
mö
);

42 (*
Êush
Ë(
˝oﬁ_˘x_t
 
˘x
);

43 (*
su•íd
Ë(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

44 (*
ªsume
Ë(
˝oﬁ_˘x_t
 
˘x
);

45 (*
ªmove_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
di•©ched_by_poﬁ
);

46 (*
m¨k_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
lÊags
);

47 (*
m¨k_cb
Ë(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
wcb
, *
wcb_¨g
);

48 (*
waô_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

49 (*
thrŸée_íabÀ
Ë(
˝oﬁ_˘x_t
 
˘x
, 
íabÀ
);

50 (*
thrŸée_waô
Ë(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

51 (*
waô_™y
Ë(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

52 (*
waô_cb
Ë(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
wcb
, *
wcb_¨g
, 
ms
);

57 c⁄° 
size_t
 
èsk_size
;

58 
˘ask_t
 *(*
ˇche_gë
Ë(
˝oﬁ_˘x_t
 
˘x
);

59 (*
ˇche_put
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

60 (*
èsk_öô
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

61 (*
èsk_deöô
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

62 (*
èsk_queue
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

63 (*
èsk_ªmove
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
di•©ched_by_poﬁ
);

64 (*
èsk_m¨k
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
lÊags
);

65 (*
èsk_dëach
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

66 (*
èsk_°©
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, *
vm
);

67 (*
èsk_waô
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
ms
);

68 (*
waô_™y2
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
íåy
[], 
n
, 
ms
);

69 (*
èsk_wsync
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

70 } 
	t˝oﬁ_basic_mëhod_t
;

73 
	s˝oﬁ_adv™˚_mëhod
 {

74 (*
group_¸óã
Ë(
˝oﬁ_˘x_t
 
˘x
, c⁄° *
desc
, 
¥i_q_num
, 
su•íd
);

75 (*
group_dñëe
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
);

76 (*
group_id
Ë(
˝oﬁ_˘x_t
 
˘x
, c⁄° *
desc
);

77 *(*
group_desc
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, *
desc_buff
, 
size_t
 
Àn
);

78 (*
group_°©
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
˘ask_group_°©
 *
g°©
);

79 (*
group_°©_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_group_°©
 **
g°©
);

80 (*
group_su•íd
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

81 (*
group_su•íd_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

82 (*
group_ªsume
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
);

83 (*
group_ªsume_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
);

84 (*
group_£èâr
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
scheduÀr_©å
 *
©å
);

85 (*
group_gë©å
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
scheduÀr_©å
 *
©å
);

86 (*
group_thrŸée_íabÀ
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
íabÀ
);

87 (*
group_thrŸée_waô
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

88 (*
group_ªmove_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
di•©ched_by_poﬁ
);

89 (*
group_m¨k_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
lÊags
);

90 (*
group_m¨k_cb
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
Visô_cb
 
wcb
, *
wcb_¨g
);

91 (*
group_waô_Æl
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

92 (*
group_waô_cb
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
Visô_cb
 
wcb
, *
wcb_¨g
, 
ms
);

93 (*
group_waô_™y
Ë(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

94 } 
	t˝oﬁ_adv™˚_mëhod_t
;

	@pool/cpool_wait.c

10 
	~<as£π.h
>

11 
	~"o•x.h
"

12 
	~"o•x_î∫o.h
"

13 
	~"msglog.h
"

14 
	~"˝oﬁ_waô.h
"

16 
LIST_HEAD
(
___glb_wq
);

17 
	g___öôülized
 = 0;

18 
OSPX_±hªad_muãx_t
 
	g___lock
;

19 
OSPX_±hªad_⁄˚_t
 
	g___o˘l
 = 
OSPX_PTHREAD_ONCE_INIT
;

21 
	$glbwq_öô
()

23 i‡((
î∫o
 = 
	`OSPX_±hªad_muãx_öô
(&
___lock
, 0)))

24 
	`MSG_log
(
M_WAIT
, 
LOG_ERR
,

26 
	`OSPX_sys_°ªº‹
(
î∫o
));

28 
___öôülized
 = 1;

29 
	}
}

32 
	$WWAKE_add
(
WWAKE_ªque°î
 *
ªque°î
)

34 
	`OSPX_±hªad_⁄˚
(&
___o˘l
, 
glbwq_öô
);

36 
	`as£π
 (
___öôülized
);

37 i‡(!
___öôülized
)

40 
	`OSPX_±hªad_muãx_lock
(&
___lock
);

41 
	`li°_add_èû
(&
ªque°î
->
lök
, &
___glb_wq
);

42 
	`OSPX_±hªad_muãx_u∆ock
(&
___lock
);

43 
	}
}

46 
	$WWAKE_îa£
(
id
, 
WWAKE_ªque°î
 **
ªque°î
)

48 
WWAKE_ªque°î
 *
r
, *
n
;

50 i‡(!
___öôülized
)

53 
	`OSPX_±hªad_muãx_lock
(&
___lock
);

54 i‡(-1 =
id
)

55 
	`INIT_LIST_HEAD
(&
___glb_wq
);

57 
	`li°_f‹_óch_íåy_ß„
(
r
, 
n
, &
___glb_wq
, 
WWAKE_ªque°î
, 
lök
) {

58 i‡(
r
->
id
 == id) {

59 
	`li°_dñ
(&
r
->
lök
);

61 i‡(
ªque°î
)

62 *
ªque°î
 = 
r
;

66 
	`OSPX_±hªad_muãx_u∆ock
(&
___lock
);

67 
	}
}

70 
	$WWAKE_îa£_dúe˘
(
WWAKE_ªque°î
 *
r
)

72 i‡(!
___öôülized
)

75 
	`OSPX_±hªad_muãx_lock
(&
___lock
);

76 
	`li°_dñ
(&
r
->
lök
);

77 
	`OSPX_±hªad_muãx_u∆ock
(&
___lock
);

78 
	}
}

81 
	$WWAKE_övoke
(
id
)

83 
c
 = 0;

84 
WWAKE_ªque°î
 *
r
, *
n
;

86 i‡(!
___öôülized
)

89 
	`OSPX_±hªad_muãx_lock
(&
___lock
);

90 
	`li°_f‹_óch_íåy_ß„
(
r
, 
n
, &
___glb_wq
, 
WWAKE_ªque°î
, 
lök
) {

91 i‡(-1 =
id
 || 
r
->id == id) {

92 
r
->
	`wakeup
(r);

93 ++ 
c
;

96 
	`OSPX_±hªad_muãx_u∆ock
(&
___lock
);

98  
c
;

99 
	}
}

102 
	$WWAKE_cb
(
WWAKE_wÆk
 
cb
, *
cb_¨g
)

104 
WWAKE_ªque°î
 *
r
, *
n
;

106 i‡(!
___öôülized
)

109 
	`OSPX_±hªad_muãx_lock
(&
___lock
);

110 
	`li°_f‹_óch_íåy_ß„
(
r
, 
n
, &
___glb_wq
, 
WWAKE_ªque°î
, 
lök
) {

111 i‡(
	`cb
(
r
, 
cb_¨g
))

114 
	`OSPX_±hªad_muãx_u∆ock
(&
___lock
);

115 
	}
}

	@pool/cpool_wait.h

1 #i‚de‡
__CPOOL_WAIT_H__


2 
	#__CPOOL_WAIT_H__


	)

14 
	~"li°.h
"

16 
	#M_WAIT
 "WAIT"

	)

18 
	sWWAKE_ªque°î
 {

19 
	mid
;

20 
	mb_öãºu±ed
;

21 
li°_hód
 
	mlök
;

22 (*
	mwakeup
)(
WWAKE_ªque°î
 *
	mr
);

23 *
	m›aque
;

25 (*
	tWWAKE_wÆk
)(
	tWWAKE_ªque°î
 *
	tr
, *
	twÆk_¨g
);

27 
	#DECLARE_WWAKE_REQUEST
(
«me
, 
id
, 
övoke
, 
›aque
) \

28 
WWAKE_ªque°î
 
«me
 = { \

29 
id
, 0, {0, 0}, 
övoke
, 
›aque
 \

30 
	}

	)
}

37 
	#WWAKE_id
(Ë(()
	`OSPX_±hªad_id
())

	)

39 
WWAKE_add
(
WWAKE_ªque°î
 *
r
);

40 
WWAKE_îa£
(
id
, 
WWAKE_ªque°î
 **
r
);

41 
WWAKE_îa£_dúe˘
(
WWAKE_ªque°î
 *
r
);

42 
WWAKE_övoke
(
id
);

43 
WWAKE_cb
(
WWAKE_wÆk
 
cb
, *
cb_¨g
);

	@pool/gp/cpool_gp_advance_method.c

11 
	~"timî.h
"

12 
	~"o•x_com∑tibÀ.h
"

13 
	~"˝oﬁ_gp_°ru˘.h
"

14 
	~"˝oﬁ_gp_mëhod.h
"

15 
	~"˝oﬁ_gp_íåy.h
"

16 
	~"˝oﬁ_gp_waô.h
"

17 
	~"˝oﬁ_gp_waô_öã∫Æ.h
"

18 
	~"˝oﬁ_gp_öã∫Æ.h
"

21 
	$˝oﬁ_gp_íåy_¸óã
(
˝oﬁ_˘x_t
 
˘x
, c⁄° *
desc
, 
¥iq_num
, 
su•íd
)

23 
idx
, 
q_num
 = 0, 
id
 = -1, 
öc
 = 3;

24 
time_t
 
now
 = 
	`time
(
NULL
);

25 
˘ask_íåy_t
 *
íåy
 = 
NULL
, **
a˘íåy
 = NULL;

26 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

31 
«me_fixed
 = 1;

32 *
«me_desc
 = (*)
desc
, 
buf„r
[80];

34 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

36 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, gpoﬁ->
íåy
 ? "" : "the default",

37 
desc
, 
	`˘ime
(&
now
));

39 i‡(!
desc
) {

40 
	`§™dom
(()
now
);

41 
	`•rötf
(
buf„r
, "?dummy_%u_%p", ()
now
, (*)
	`øndom
());

42 
desc
 = 
buf„r
;

49 i‡(*
desc
 == '?') {

50 
«me_fixed
 = 0;

51 
«me_desc
 = 
	`mÆloc
(
	`°æí
(
desc
));

52 i‡(!
«me_desc
)

53  
eERR_NOMEM
;

55 
	`°r˝y
(
«me_desc
, 
desc
 + 1);

61 
¥iq_num
 = 
	`max
(priq_num, 1);

62 
¥iq_num
 = 
	`mö
(priq_num, 99);

69 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

70 i‡(
gpoﬁ
->
n‰ìs
) {

74 
idx
=0; idx< 
gpoﬁ
->
num
 && 
q_num
 !
¥iq_num
; idx++) {

75 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

77 i‡(!(
íåy
->
lÊags
 & 
SLOT_F_FREE
))

80 i‡(-1 =
id
) {

81 
id
 = 
idx
;

82 
q_num
 = 
íåy
->
¥iq_max_num
;

85 } i‡(
íåy
->
¥iq_max_num
 >
¥iq_num
) {

86 i‡(
q_num
 < 
¥iq_num
) {

87 
id
 = 
idx
;

88 
q_num
 = 
íåy
->
¥iq_max_num
;

92 } i‡(
q_num
 < 
¥iq_num
 && q_num > 
íåy
->
¥iq_max_num
) {

93 
id
 = 
idx
;

94 
q_num
 = 
íåy
->
¥iq_max_num
;

97 
	`as£π
 (
id
 >= 0);

99 i‡(!(
a˘íåy
 = 
	`ªÆloc
(
gpoﬁ
->a˘íåy, (gpoﬁ->
num
 + 
öc
) * (*actentry))))

100 
out
;

101 
	`bzîo
(
a˘íåy
 + 
gpoﬁ
->
num
, 
öc
 * (*actentry));

102 
gpoﬁ
->
a˘íåy
 =áctentry;

107 i‡(!(
íåy
 = 
	`ªÆloc
(
gpoﬁ
->íåy, (gpoﬁ->
num
 + 
öc
) * (*entry)))) {

108 
id
 = -1;

109 
out
;

111 
	`bzîo
(
íåy
 + 
gpoﬁ
->
num
, 
öc
 * (*entry));

112 
gpoﬁ
->
íåy
 =Éntry;

118 
idx
=0; idx<
gpoﬁ
->
num
; idx++) {

119 
	`as£π
 (
íåy
[
idx
].
ödex
 < 
gpoﬁ
->
num
);

120 
a˘íåy
[
íåy
[
idx
].
ödex
] =Éntry + idx;

126 
idx
=
gpoﬁ
->
num
; idx<gpoﬁ->num + 
öc
; idx++) {

127 
a˘íåy
[
idx
] = 
íåy
 + idx;

128 
íåy
[
idx
].
id
 = -1;

129 
íåy
[
idx
].
ödex
 = idx;

130 
íåy
[
idx
].
ev_√ed_nŸify
 = &
gpoﬁ
->ev_need_notify;

131 
íåy
[
idx
].
c⁄d_ev
 = &
gpoﬁ
->cond_ev;

132 
íåy
[
idx
].
c⁄d_sync
 = &
gpoﬁ
->cond_sync;

133 
íåy
[
idx
].
c⁄d_èsk
 = &
gpoﬁ
->
c⁄d_èsk_íåy
;

134 
íåy
[
idx
].
lÊags
 = 
SLOT_F_FREE
;

135 
íåy
[
idx
].
poﬁ
 = 
gpoﬁ
;

138 
id
 = 
gpoﬁ
->
num
;

139 
gpoﬁ
->
num
 +
öc
;

140 
gpoﬁ
->
n‰ìs
 +
öc
;

142 
íåy
 = 
gpoﬁ
->íåy + 
id
;

147 i‡(!
íåy
->
c
.
¥iq
 ||É¡ry->
¥iq_max_num
 < 
¥iq_num
) {

148 *
mem
 = 
	`ªÆloc
(
íåy
->
c
.
¥iq
, (
˝riq_t
Ë* 
¥iq_num
 + 2 * (
li°_hód
));

150 i‡(!
mem
) {

151 
id
 = -1;

152 
out
;

154 
íåy
->
c
.
¥iq
 = 
mem
;

155 
íåy
->
¥iq_max_num
 = 
¥iq_num
;

157 
	`__˝oﬁ_com_¥iq_öô
(&
íåy
->
c
,É¡ry->c.
¥iq
, 
¥iq_num
, (
li°_hód
 *)(entry->c.priq +Öriq_num));

158 
íåy
->
åa˚_q
 =É¡ry->
c
.
ªady_q
 + 1;

160 
	`INIT_LIST_HEAD
(
íåy
->
åa˚_q
);

161 
íåy
->
«me
 = 
«me_desc
;

162 
íåy
->
«me_fixed
 =Çame_fixed;

163 
íåy
->
id
 = id;

164 
íåy
->
¸óãd
 = 
now
;

165 
íåy
->
tsk_wªf
 =É¡ry->
ev_wªf
 = 0;

166 
íåy
->
∑u£d
 = 
su•íd
;

167 
íåy
->
lÊags
 &~
SLOT_F_FREE
;

168 
íåy
->
¡asks_¥o˚s£d
 = 0;

169 
íåy
->
tsk_√ed_nŸify
 =É¡ry->
tsk_™y_waô
 = 0;

170 -- 
gpoﬁ
->
n‰ìs
;

172 
	`as£π
 (!
íåy
->
ƒu¬ögs
 && !íåy->
ndi•©chögs
 &&

173 !
íåy
->
≈ídögs
 && !íåy->
n_qåa˚s
);

177 
	`__˝oﬁ_gp_íåy_£t_©ål
(
gpoﬁ
, 
íåy
, 
NULL
);

178 
out
:

179 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

181 i‡(-1 =
id
)

182 
	`‰ì
(
«me_desc
);

184  
id
;

187 
	}
}

190 
	$˝oﬁ_gp_íåy_dñëe
(
˝oﬁ_˘x_t
 
˘x
, 
id
)

192 
w¨n
 = 1, 
e
;

193 *
«me_desc
 = 
NULL
;

194 
	`LIST_HEAD
(
rmq
);

195 
˘ask_íåy_t
 *
íåy
;

196 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

198 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

199 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

200 i‡(
	`IS_VALID_ENTRY
(&
gpoﬁ
->
íåy
[
id
])) {

201 i‡(
id
 !0 || (!(
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
)))) {

202 
w¨n
 = 0;

203 
íåy
 = 
gpoﬁ
->íåy + 
id
;

204 
íåy
->
lÊags
 |
SLOT_F_DESTROYING
;

205 
«me_desc
 = 
íåy
->
«me
;

210 
	`__˝oﬁ_gp_w_wakeup_íåy_thrŸéñ
(
íåy
);

215 i‡(
	`__˝oﬁ_gp_íåy_nŸifyl
(
gpoﬁ
, 
íåy
, 
eTASK_VM_F_GROUP_DESTROYING
) > 0)

216 
	`__˝oﬁ_gp_íåy_m¨k_cbl
(
gpoﬁ
, 
íåy
, 
NULL
, (*)
eTASK_VM_F_REMOVE
, &
rmq
);

219 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

221 i‡(!
w¨n
) {

222 
time_t
 
now
 = 
	`time
(
NULL
);

224 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

226 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
«me_desc
, 
id
, 
	`˘ime
(&
now
));

232 i‡(!
	`li°_em±y
(&
rmq
))

233 
	`__˝oﬁ_gp_èsk_di•©chî
(
gpoﬁ
, &
rmq
);

235 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

237 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
«me_desc
, 
id
);

239 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

240 
íåy
 = 
gpoﬁ
->íåy + 
id
;

241 
	`as£π
 (
id
 =
íåy
->id && 
SLOT_F_DESTROYING
 &É¡ry->
lÊags
);

247 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, 
id
, 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK_ALL
, 
NULL
, NULL, -1);

248 } 
e
 =
eERR_INTERRUPTED
);

253 
	`as£π
 (!
íåy
->
≈ídögs
 && !íåy->
≈ídögs_eff
 &&

254 !
íåy
->
ƒu¬ögs
 && !íåy->
ndi•©chögs
);

259 
	`˝oﬁ_gp_w_wakeup
(
gpoﬁ
, 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_ENTRY_ALL
, 
id
);

264 ;
íåy
->
tsk_wªf
 ||É¡ry->
ev_wªf
;) {

265 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

267 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy
->
tsk_wªf
,É¡ry->
ev_wªf
,É¡ry->
«me
, 
id
);

269 
	`OSPX_±hªad_c⁄d_waô
(
íåy
->
c⁄d_sync
, &
gpoﬁ
->
c‹e
->
mut
);

270 
íåy
 = 
gpoﬁ
->íåy + 
id
;

273 
«me_desc
 = 
íåy
->
«me_fixed
 ? 
NULL
 :É¡ry->
«me
;

276 
íåy
->
lÊags
 = 
SLOT_F_FREE
;

277 
gpoﬁ
->
¡asks_¥o˚s£d0
 +
íåy
->
¡asks_¥o˚s£d
;

278 ++ 
gpoﬁ
->
n‰ìs
;

279 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

281 i‡(
«me_desc
)

282 
	`‰ì
(
«me_desc
);

286 i‡(
w¨n
) {

287 i‡(
id
)

288 
	`MSG_log
(
M_GROUP
, 
LOG_WARN
,

290 
__FUNCTION__
, 
id
, 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ->
num
);

292 
	`MSG_log
(
M_GROUP
, 
LOG_WARN
,

294 
__FUNCTION__
, 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ->
num
);

296 
	}
}

299 
	$˝oﬁ_gp_íåy_id
(
˝oﬁ_˘x_t
 
˘x
, c⁄° *
desc
)

301 
idx
, 
id
 = -1;

302 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

304 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

305 
idx
=0; idx<
gpoﬁ
->
num
; idx++) {

306 i‡(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
idx
].
lÊags
)

309 i‡(!
	`°rcmp
(
desc
, 
gpoﬁ
->
íåy
[
idx
].
«me
)) {

310 
id
 = 
gpoﬁ
->
íåy
[
idx
].id;

314 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

316  
id
;

317 
	}
}

320 
	$˝oﬁ_gp_íåy_desc
(
˝oﬁ_˘x_t
 
˘x
, 
id
, *
desc_buff
, 
size_t
 
Àn
)

322 
gë
 = 0;

323 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

328 i‡(
desc_buff
) {

329 i‡(
Àn
 <= 0) {

330 
	`MSG_log
(
M_GROUP
, 
LOG_ERR
,

332 
id
, 
desc_buff
, 
Àn
);

333  
NULL
;

335 
desc_buff
[
Àn
 - 1] = '\0';

341 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

342 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

343 i‡(
id
 < 
gpoﬁ
->
num
 && 
	`IS_VALID_ENTRY
(&gpoﬁ->
íåy
[id])) {

344 i‡(
desc_buff
)

345 
	`°∫˝y
(
desc_buff
, 
gpoﬁ
->
íåy
[
id
].
«me
, 
Àn
 -1);

347 
desc_buff
 = 
gpoﬁ
->
íåy
[
id
].
«me
;

348 
gë
 = 1;

350 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

353  
gë
 ? 
desc_buff
 : 
NULL
;

354 
	}
}

357 
	$˝oﬁ_gp_íåy_su•íd
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
ms
)

359 
e
 = 0;

360 
˘ask_íåy_t
 *
íåy
;

361 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

363 i‡(
id
 < 0 || id > 
gpoﬁ
->
num
)

364  
eERR_GROUP_NOT_FOUND
;

366 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

367 
íåy
 = 
gpoﬁ
->íåy + 
id
;

368 i‡(!
	`IS_VALID_ENTRY
(
íåy
))

369 
e
 = 
eERR_GROUP_NOT_FOUND
;

371 i‡(!(
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
)))

372 
e
 = 
eERR_DESTROYING
;

375 i‡(!
íåy
->
∑u£d
) {

379 
íåy
->
∑u£d
 = 1;

381 #i‚de‡
NDEBUG


382 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

384 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
id
, 
íåy
->
«me
,É¡ry->
≈ídögs
, gpool->npendings,

385 
gpoﬁ
->
c‹e
->
¡hªads_ru¬ög
, gpoﬁ->
ndi•©chögs
, gpoﬁ->c‹e->
n_qths
);

387 i‡(
íåy
->
≈ídögs
) {

388 
gpoﬁ
->
≈ídögs
 -
íåy
->npendings;

389 
	`__˝oﬁ_gp_íåy_öa˘ivñ
(
gpoﬁ
, 
íåy
);

394 i‡(
íåy
->
ª˚ive_bíifôs
)

395 
gpoﬁ
->
c‹e
->
≈ídögs
 -
íåy
->npendings;

397 
gpoﬁ
->
c‹e
->
≈ídögs
 -
íåy
->
≈ídögs_eff
;

398 
íåy
->
≈ídögs_eff
 = 0;

401 
	`as£π
 (!
íåy
->
≈ídögs_eff
);

405 
	`__˝oﬁ_gp_íåy_shrök
(
gpoﬁ
);

413 i‡(
íåy
->
ndi•©chögs
 ||É¡ry->
ƒu¬ögs
) {

414 i‡(!
ms
)

415 
e
 = 
eERR_TIMEDOUT
;

417 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, 
id
, 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK
, 
__˝oﬁ_gp_wcb_∑u£d
, 
NULL
, 
ms
);

420 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

422  
e
;

423 
	}
}

426 
	$˝oﬁ_gp_íåy_su•íd_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

428 
idx
, 
e
 = 
eERR_TIMEDOUT
;

429 
˘ask_íåy_t
 *
íåy
;

430 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

431 
ids
[100], *
ids_idx
 = &ids[0];

433 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

434 i‡(!(
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
))) {

435 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

436  
eERR_DESTROYING
;

439 
idx
=0; idx<
gpoﬁ
->
num
; idx++) {

440 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

442 i‡(
	`IS_VALID_ENTRY
(
íåy
)) {

443 i‡(!
íåy
->
∑u£d
) {

447 
íåy
->
∑u£d
 = 1;

448 #i‚de‡
NDEBUG


449 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

451 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy
->
id
,É¡ry->
«me
,É¡ry->
≈ídögs
, gpool->npendings,

452 
gpoﬁ
->
c‹e
->
¡hªads_ru¬ög
, gpoﬁ->
ndi•©chögs
, gpoﬁ->c‹e->
n_qths
);

457 i‡(
íåy
->
≈ídögs
) {

458 
gpoﬁ
->
≈ídögs
 -
íåy
->npendings;

459 
	`__˝oﬁ_gp_íåy_öa˘ivñ
(
gpoﬁ
, 
íåy
);

464 i‡(
íåy
->
ª˚ive_bíifôs
)

465 
gpoﬁ
->
c‹e
->
≈ídögs
 -
íåy
->npendings;

467 
gpoﬁ
->
c‹e
->
≈ídögs
 -
íåy
->
≈ídögs_eff
;

468 
íåy
->
≈ídögs_eff
 = 0;

471 
	`as£π
 (
gpoﬁ
->
c‹e
->
≈ídögs
 >= 0 && gpool->npendings >= gpool->core->npendings);

473 
	`as£π
 (!
íåy
->
≈ídögs_eff
);

477 
	`__˝oﬁ_gp_íåy_shrök
(
gpoﬁ
);

480 
ids
[++ *
ids_idx
] = 
íåy
->
id
;

483 
	`as£π
 (!
gpoﬁ
->
≈ídögs
);

488 i‡(
gpoﬁ
->
ndi•©chögs
 || gpoﬁ->
c‹e
->
¡hªads_ru¬ög
) {

489 i‡(!
ms
)

490 
e
 = 
eERR_TIMEDOUT
;

492 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, -1, 
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK
, 
__˝oﬁ_gp_wcb_∑u£d
, (*)
ids
, 
ms
);

494 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

496  
e
;

497 
	}
}

500 
	$˝oﬁ_gp_íåy_ªsume
(
˝oﬁ_˘x_t
 
˘x
, 
id
)

502 
ok
 = 0;

503 
˘ask_íåy_t
 *
íåy
;

504 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

506 i‡(
id
 < 0 || id > 
gpoﬁ
->
num
)

509 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

510 
íåy
 = 
gpoﬁ
->íåy + 
id
;

511 
ok
 = 
	`IS_VALID_ENTRY
(
íåy
Ë&& 
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
);

513 i‡(
ok
 && 
íåy
->
∑u£d
) {

517 
íåy
->
∑u£d
 = 0;

518 #i‚de‡
NDEBUG


519 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

521 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy
->
id
,É¡ry->
«me
,É¡ry->
≈ídögs
, gpool->npendings,

522 
gpoﬁ
->
c‹e
->
¡hªads_ru¬ög
, gpoﬁ->
ndi•©chögs
, gpoﬁ->c‹e->
n_qths
);

524 i‡(
íåy
->
≈ídögs
) {

525 
gpoﬁ
->
≈ídögs
 +
íåy
->npendings;

530 i‡(
íåy
->
ª˚ive_bíifôs
)

531 
gpoﬁ
->
c‹e
->
≈ídögs
 +
íåy
->npendings;

533 
íåy
->
≈ídögs_eff
 = 
	`mö
”¡ry->
≈ídögs
,É¡ry->
limô_èsks
);

534 
gpoﬁ
->
c‹e
->
≈ídögs
 +
íåy
->
≈ídögs_eff
;

536 
	`__˝oﬁ_gp_íåy_a˘ivñ
(
gpoﬁ
, 
íåy
);

541 
	`as£π
 (
gpoﬁ
->
≈ídögs
 >gpoﬁ->
c‹e
->
n_qdi•©chs
);

542 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
))

543 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
, 
NULL
);

548 i‡(
gpoﬁ
->
¡asks_≥ak
 < gpoﬁ->
≈ídögs
)

549 
gpoﬁ
->
¡asks_≥ak
 = gpoﬁ->
≈ídögs
;

551 
	`as£π
 (
gpoﬁ
->
a˘ive_idx
 >gpoﬁ->
«˘ives_ok
);

553 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

554 
	}
}

557 
	$˝oﬁ_gp_íåy_ªsume_Æl
(
˝oﬁ_˘x_t
 
˘x
)

559 
idx
;

560 
˘ask_íåy_t
 *
íåy
;

561 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

563 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

564 i‡(!(
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
))) {

565 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

569 
idx
=0; idx<
gpoﬁ
->
num
; idx++) {

570 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

572 i‡(
	`IS_VALID_ENTRY
(
íåy
Ë&&É¡ry->
∑u£d
) {

576 
íåy
->
∑u£d
 = 0;

577 #i‚de‡
NDEBUG


578 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

580 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy
->
id
,É¡ry->
«me
,É¡ry->
≈ídögs
, gpool->npendings,

581 
gpoﬁ
->
c‹e
->
¡hªads_ru¬ög
, gpoﬁ->
ndi•©chögs
, gpoﬁ->c‹e->
n_qths
);

583 i‡(
íåy
->
≈ídögs
) {

584 
gpoﬁ
->
≈ídögs
 +
íåy
->npendings;

589 i‡(
íåy
->
ª˚ive_bíifôs
)

590 
gpoﬁ
->
c‹e
->
≈ídögs
 +
íåy
->npendings;

592 
íåy
->
≈ídögs_eff
 = 
	`mö
”¡ry->
≈ídögs
,É¡ry->
limô_èsks
);

593 
gpoﬁ
->
c‹e
->
≈ídögs
 +
íåy
->
≈ídögs_eff
;

595 
	`__˝oﬁ_gp_íåy_a˘ivñ
(
gpoﬁ
, 
íåy
);

597 
	`as£π
 (
gpoﬁ
->
≈ídögs
 >gpoﬁ->
c‹e
->
n_qdi•©chs
);

599 
	`as£π
 (
gpoﬁ
->
a˘ive_idx
 >gpoﬁ->
«˘ives_ok
);

606 i‡(
gpoﬁ
->
¡asks_≥ak
 < gpoﬁ->
≈ídögs
)

607 
gpoﬁ
->
¡asks_≥ak
 = gpoﬁ->
≈ídögs
;

612 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
))

613 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
, 
NULL
);

614 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

615 
	}
}

618 
	$˝oﬁ_gp_íåy_£èâr
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
scheduÀr_©å
 *
©å
)

620 
ok
 = 0;

621 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

623 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

624 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

625 i‡(
id
 < 
gpoﬁ
->
num
 && 
	`IS_VALID_ENTRY
(&gpoﬁ->
íåy
[id])) {

626 
ok
 = 1;

627 
	`__˝oﬁ_gp_íåy_£t_©ål
(
gpoﬁ
, gpoﬁ->
íåy
 + 
id
, 
©å
);

629 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

632  
ok
 ? 0 : 
eERR_GROUP_NOT_FOUND
;

633 
	}
}

636 
	$˝oﬁ_gp_íåy_gë©å
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
scheduÀr_©å
 *
©å
)

638 
ok
 = 0;

639 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

641 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

642 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

643 i‡(
id
 < 
gpoﬁ
->
num
 && 
	`IS_VALID_ENTRY
(&gpoﬁ->
íåy
[id])) {

644 
ok
 = 1;

646 i‡(
©å
)

647 
	`__˝oﬁ_gp_íåy_gë_©ål
(
gpoﬁ
, gpoﬁ->
íåy
 + 
id
, 
©å
);

649 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

652  
ok
 ? 
eERR_GROUP_NOT_FOUND
 : 0;

653 
	}
}

656 
	$˝oﬁ_gp_íåy_thrŸée_˘l
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
íabÀ
)

658 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

660 i‡(
id
 < 0 || id >
gpoﬁ
->
num
)

663 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

664 i‡(
	`IS_VALID_ENTRY
(&
gpoﬁ
->
íåy
[
id
])) {

665 i‡(!
íabÀ
) {

666 i‡(
SLOT_F_THROTTLE
 & 
gpoﬁ
->
íåy
[
id
].
lÊags
) {

667 
gpoﬁ
->
íåy
[
id
].
lÊags
 &~
SLOT_F_THROTTLE
;

672 
	`__˝oﬁ_gp_w_wakeup_poﬁ_thrŸéñ
(
gpoﬁ
);

676 
gpoﬁ
->
íåy
[
id
].
lÊags
 |
SLOT_F_THROTTLE
;

678 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

679 
	}
}

682 
	$˝oﬁ_gp_íåy_thrŸée_waô
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
ms
)

684 
e
 = 
eERR_GROUP_NOT_FOUND
;

685 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

687 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

688 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

689 i‡(
	`IS_VALID_ENTRY
(&
gpoﬁ
->
íåy
[
id
]))

690 
	`__˝oﬁ_gp_w_waôl_utûs
(

691 
gpoﬁ
, 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_THROTTLE
, 
id
, 
NULL
, 
ms
,

692 
e
, 
	`us_°¨å
(),

697 i‡(
CORE_F_de°royög
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
)) {

698 
e
 = 
eERR_DESTROYING
;

705 i‡(!(
gpoﬁ
->
íåy
[
id
].
lÊags
 & 
SLOT_F_THROTTLE
)) {

706 
e
 = 0;

710 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

713  
e
;

714 
	}
}

717 
	$˝oﬁ_gp_íåy_ªmove_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
di•©ched_by_poﬁ
)

719 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

720 
lÊags
 = 
di•©ched_by_poﬁ
 ? 
eTASK_VM_F_REMOVE_BYPOOL
 : 
eTASK_VM_F_REMOVE
;

722  
	`˝oﬁ_gp_íåy_m¨k_Æl
(
gpoﬁ
->
c‹e
, 
id
, 
lÊags
);

723 
	}
}

726 
	$˝oﬁ_gp_íåy_m¨k_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
lÊags
)

728 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

730  
	`˝oﬁ_gp_íåy_m¨k_cb
(
gpoﬁ
->
c‹e
, 
id
, 
NULL
, (*)
lÊags
);

731 
	}
}

734 
	$˝oﬁ_gp_íåy_m¨k_cb
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
Visô_cb
 
wcb
, *
wcb_¨g
)

736 
√ffs
 = 0;

737 
	`LIST_HEAD
(
rmq
);

738 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

740 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

741 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

742 i‡(!(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
id
].
lÊags
))

743 
√ffs
 = 
	`__˝oﬁ_gp_íåy_m¨k_cbl
(
gpoﬁ
, gpoﬁ->
íåy
 + 
id
, 
wcb
, 
wcb_¨g
, &
rmq
);

744 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

747 i‡(!
	`li°_em±y
(&
rmq
))

748 
	`__˝oﬁ_gp_èsk_di•©chî
(
gpoﬁ
, &
rmq
);

750  
√ffs
;

751 
	}
}

754 
	$˝oﬁ_gp_íåy_waô_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
ms
)

756 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

758  
	`˝oﬁ_gp_íåy_waô_cb
(
gpoﬁ
->
c‹e
, 
id
, 
NULL
, NULL, 
ms
);

759 
	}
}

762 
	$˝oﬁ_gp_íåy_waô_cb
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
Visô_cb
 
cb
, *
cb_¨g
, 
ms
)

764 
e
 = 
eERR_GROUP_NOT_FOUND
;

765 
ty≥
 = 
WAIT_CLASS_ENTRY
;

766 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

768 i‡(
cb
)

769 
ty≥
 |
WAIT_TYPE_TASK
;

771 
ty≥
 |
WAIT_TYPE_TASK_ALL
;

773 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

774 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

775 i‡(!(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
id
].
lÊags
))

776 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, 
id
, 
ty≥
, 
cb
, 
cb_¨g
, 
ms
);

777 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

780  
e
;

781 
	}
}

784 
	$˝oﬁ_gp_íåy_waô_™y
(
˝oﬁ_˘x_t
 
˘x
, 
id
, 
ms
)

786 
e
 = 
eERR_GROUP_NOT_FOUND
;

787 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

789 i‡(
id
 >0 && id < 
gpoﬁ
->
num
) {

790 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

791 i‡(!(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
id
].
lÊags
))

792 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, 
id
, 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK_ANY
, 
NULL
, NULL, 
ms
);

793 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

796  
e
;

797 
	}
}

800 
	$˝oﬁ_gp_íåy_°©
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
˘ask_group_°©
 *
g°©
)

802 
e
 = 
eERR_GROUP_NOT_FOUND
;

803 
˘ask_íåy_t
 *
íåy
;

804 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

809 i‡(
gid
 >0 && gid < 
gpoﬁ
->
num
) {

810 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

811 i‡(
	`IS_VALID_ENTRY
(&
gpoﬁ
->
íåy
[
gid
])) {

812 
e
 = 0;

813 
íåy
 = 
gpoﬁ
->íåy + 
gid
;

818 i‡(
g°©
)

819 
	`__˝oﬁ_gp_íåy_dump_°©l
(
gpoﬁ
, 
íåy
, 
g°©
);

821 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

824  
e
;

825 
	}
}

828 
	$˝oﬁ_gp_íåy_°©_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_group_°©
 **
g°©
)

830 
n
, 
m
 = 0, 
idx
;

831 
˘ask_íåy_t
 *
íåy
;

832 
˘ask_group_°©
 *
p
;

833 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

838 
size_t
 
desc_Àngth
 = 0;

839 *
«me_íd
, *
pos
;

841 
	`as£π
 (
g°©
);

842 *
g°©
 = 
NULL
;

847 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

848 
n
 = 
gpoﬁ
->
num
 - gpoﬁ->
n‰ìs
;

849 
idx
=0; idx < 
gpoﬁ
->
num
 && 
m
 < 
n
; idx++) {

850 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

852 i‡(
SLOT_F_FREE
 & 
íåy
->
lÊags
)

854 i‡(!
íåy
->
«me_fixed
)

855 
desc_Àngth
 +
	`°æí
(
íåy
->
«me
) + 1;

857 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

862 
	#EXTRA_NAME_BUFFER_SIZE
 250

	)

864 i‡(
n
 > 0) {

865 
desc_Àngth
 +
EXTRA_NAME_BUFFER_SIZE
;

870 i‡(!(
p
 = 
	`mÆloc
((*pË* 
n
 + 
desc_Àngth
))) {

871 
	`MSG_log
(
M_GROUP
, 
LOG_WARN
,

873 
__FUNCTION__
);

876 *
g°©
 = 
p
;

877 
pos
 = (*)(
p
 + 
n
);

878 
«me_íd
 = 
pos
 + 
desc_Àngth
;

883 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

884 
idx
=0; idx < 
gpoﬁ
->
num
 && 
m
 < 
n
; idx++) {

885 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

887 i‡(
SLOT_F_FREE
 & 
íåy
->
lÊags
)

890 i‡(
íåy
->
«me_fixed
)

891 
p
->
desc
 = 
NULL
;

897 i‡((
size_t
)(
«me_íd
 - 
pos
Ë< 
	`°æí
(
íåy
->
«me
) + 1)

900 
p
->
desc
 = (*)
pos
;

901 
p
->
desc_Àngth
 = 
	`°æí
(
íåy
->
«me
) + 1;

902 
pos
 +
p
->
desc_Àngth
;

904 
	`__˝oﬁ_gp_íåy_dump_°©l
(
gpoﬁ
, 
íåy
, 
p
 ++);

905 ++ 
m
;

907 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

912 i‡(!
m
) {

913 
	`‰ì
(
p
);

914 *
g°©
 = 
NULL
;

918  
m
;

919 
	}
}

	@pool/gp/cpool_gp_core_method.c

10 
	~"o•x_î∫o.h
"

11 
	~"˝oﬁ_Á˘‹y.h
"

12 
	~"˝oﬁ_c‹e_°ru˘.h
"

13 
	~"˝oﬁ_gp_mëhod.h
"

14 
	~"˝oﬁ_gp_öã∫Æ.h
"

15 
	~"˝oﬁ_gp_waô_öã∫Æ.h
"

18 
	$˝oﬁ_gp_c‹e_˘‹
(*
¥iv
)

20 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
¥iv
;

22 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

24 
gpoﬁ
->
c‹e
->
desc
, 
¥iv
);

26 
gpoﬁ
->
íåy_idx_max
 = 
MAX_WAIT_ENTRY
;

28 i‡((
î∫o
=
	`OSPX_±hªad_c⁄d_öô
(&
gpoﬁ
->
c⁄d_èsk
)))

29  
eERR_î∫o
;

31 i‡((
î∫o
=
	`OSPX_±hªad_c⁄d_öô
(&
gpoﬁ
->
c⁄d_èsk_íåy
)))

32 
‰ì_c⁄d_èsk
;

34 i‡((
î∫o
=
	`OSPX_±hªad_c⁄d_öô
(&
gpoﬁ
->
c⁄d_ev
)))

35 
‰ì_c⁄d_íåy
;

37 i‡((
î∫o
=
	`OSPX_±hªad_c⁄d_öô
(&
gpoﬁ
->
c⁄d_sync
)))

38 
‰ì_c⁄d_ev
;

43 i‡((0 > 
	`˝oﬁ_gp_íåy_¸óã
(
gpoﬁ
, "sys00", gpoﬁ->
¥iq_num
, 0))) {

44 
î∫o
 = 
ENOMEM
;

45 
‰ì_c⁄d_sync
;

47 
gpoﬁ
->
n
 = 4;

48 
	`INIT_LIST_HEAD
(&
gpoﬁ
->
wq
);

52 
‰ì_c⁄d_èsk
:

53 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_èsk
);

54 
‰ì_c⁄d_sync
:

55 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_sync
);

56 
‰ì_c⁄d_íåy
:

57 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_èsk_íåy
);

58 
‰ì_c⁄d_ev
:

59 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_ev
);

61 
	`MSG_log
(
M_GROUP
, 
LOG_ERR
,

63 
	`OSPX_sys_°ªº‹
(
î∫o
));

65  
eERR_î∫o
;

66 
	}
}

69 
	$˝oﬁ_gp_c‹e_dt‹
(*
¥iv
)

71 
idx
;

72 
˘ask_íåy_t
 *
íåy
;

73 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
¥iv
;

75 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

77 
gpoﬁ
->
c‹e
->
desc
, 
¥iv
);

82 
idx
=0; idx<
gpoﬁ
->
num
; idx++) {

83 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

85 i‡(!(
SLOT_F_FREE
 & 
íåy
->
lÊags
))

86 
	`˝oﬁ_gp_íåy_dñëe
(
gpoﬁ
, 
íåy
->
id
);

88 
	`as£π
 (
íåy
->
lÊags
 & 
SLOT_F_FREE
);

89 i‡(
íåy
->
c
.
¥iq
)

90 
	`‰ì
(
íåy
->
c
.
¥iq
);

93 i‡(
gpoﬁ
->
íåy
) {

94 
	`‰ì
(
gpoﬁ
->
íåy
);

95 
	`‰ì
(
gpoﬁ
->
a˘íåy
);

98 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_sync
);

99 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_èsk
);

100 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_èsk_íåy
);

101 
	`OSPX_±hªad_c⁄d_de°roy
(&
gpoﬁ
->
c⁄d_ev
);

102 
	}
}

104 
	$˝oﬁ_gp_c‹e_nŸifyl
(*
¥iv
, 
eEvít_t
 
evíts
)

106 
idx
 = 0;

107 
˘ask_íåy_t
 *
íåy
;

108 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
¥iv
;

110 #i‚de‡
NDEBUG


111 
	`MSG_log
(
M_GROUP
, 
LOG_TRACE
,

113 
gpoﬁ
->
c‹e
->
desc
, 
¥iv
, 
evíts
);

116 i‡(
eEvít_F_thªad
 & 
evíts
)

117 
	`__˝oﬁ_gp_íåy_upd©e_Æl_ívl
(
¥iv
);

119 i‡(
eEvít_F_de°royög
 & 
evíts
) {

120 
	`__˝oﬁ_gp_íåy_nŸifyl
(
gpoﬁ
, 
NULL
, 
eTASK_VM_F_POOL_DESTROYING
);

127 i‡(
gpoﬁ
->
c‹e
->
∑u£d
)

128 
	`__˝oﬁ_gp_íåy_m¨k_cbl
(
gpoﬁ
, 
NULL
, NULL, (*)
eTASK_VM_F_REMOVE_BYPOOL
, NULL);

130 ; 
idx
<
gpoﬁ
->
num
; idx++) {

131 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

133 i‡(
	`IS_VALID_ENTRY
(
íåy
Ë&&É¡ry->
∑u£d
)

134 
	`__˝oﬁ_gp_íåy_m¨k_cbl
(
gpoﬁ
, 
íåy
, 
NULL
, (*)
eTASK_VM_F_REMOVE_BYPOOL
, NULL);

139 
	`__˝oﬁ_gp_w_wakeup_íåy_thrŸéñ
(
íåy
);

143 i‡(
eEvít_F_shutdown
 & 
evíts
) {

148 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

149 
	`˝oﬁ_gp_w_wakeup
(
gpoﬁ
, 
WAIT_TYPE_ALL
, -1);

150 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

154 ;
gpoﬁ
->
tsk_wªf
 || gpoﬁ->
ev_wªf
;) {

155 
	`MSG_log
(
M_GROUP
, 
LOG_INFO
,

157 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, gpoﬁ->
tsk_wªf
, gpoﬁ->
ev_wªf
);

158 
	`OSPX_±hªad_c⁄d_waô
(&
gpoﬁ
->
c⁄d_sync
, &gpoﬁ->
c‹e
->
mut
);

161 
	}
}

164 
	$˝oﬁ_gp_c‹e_îr_ªas⁄s
(
basic_èsk_t
 *
±ask
)

166 
e
 = 0;

168 
	`as£π
 (
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 & 
eTASK_VM_F_REMOVE_FLAGS
);

170 i‡(
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 & 
eTASK_VM_F_POOL_DESTROYING
)

171 
e
 |
eEº_poﬁ_de°royög
;

173 i‡(
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 & 
eTASK_VM_F_GROUP_DESTROYING
)

174 
e
 |
eEº_group_de°royög
;

179 
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 &~(
eTASK_VM_F_POOL_DESTROYING
|
eTASK_VM_F_GROUP_DESTROYING
);

180 i‡(!
e
)

181  
eEº_ªmoved_byu£r
;

183  
e
;

184 
	}
}

187 
	$˝oﬁ_gp_c‹e_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
)

189 
˘ask_åa˚_t
 *
±ask
;

190 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
¥iv
;

192 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_NORMAL
;

196 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

197 i‡(
gpoﬁ
->
c‹e
->
n_qdi•©chs
) {

198 
gpoﬁ
->
ndi•©chögs
 +
	`__˝oﬁ_com_gë_di•©ch_èskl3
(gpoﬁ->
c‹e
, 
£lf
, gpoﬁ->
n
);

199 #i‚de‡
NDEBUG


200 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_DISPATCHED
;

202 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
gpoﬁ
->
c‹e
, 
£lf
, 
THREAD_STAT_RUN
);

203 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

208 
	`li°_f‹_óch_íåy
(
±ask
, &
£lf
->
di•©ch_q
, 
˘ask_åa˚_t
, 
lök
) {

209 
	`TASK_CAST_TRACE
(
±ask
)->
thªad
 = 
£lf
;

210 
	`TASK_CAST_TRACE
(
±ask
)->
pdëached
 = (
uöt16_t
*)&
£lf
->
åa˚_¨gs
;

212 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_DISPATCHED
;

221 i‡(
gpoﬁ
->
c‹e
->
∑u£d
 || !gpoﬁ->c‹e->
≈ídögs
)

224 
±ask
 = 
	`__˝oﬁ_gp_gë_≥ndög_èsk
(
gpoﬁ
);

225 
±ask
->
f_°©
 = 
eTASK_STAT_F_SCHEDULING
;

226 #i‚de‡
NDEBUG


227 
£lf
->
cuºít_èsk
 = 
	`TASK_CAST_CORE
(
±ask
);

229 ++ 
gpoﬁ
->
íåy
[
±ask
->
gid
].
ƒu¬ögs
;

230 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
gpoﬁ
->
c‹e
, 
£lf
, 
THREAD_STAT_RUN
);

231 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

236 i‡(
±ask
) {

237 
±ask
->
thªad
 = 
£lf
;

238 
±ask
->
pdëached
 = (
uöt16_t
 *)&
£lf
->
åa˚_¨gs
;

239 
£lf
->
cuºít_èsk
 = 
	`TASK_CAST_CORE
(
±ask
);

245 
	}
}

248 
	$˝oﬁ_gp_c‹e_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
)

250 
ªscheduÀ
 = 1;

251 
˘ask_íåy_t
 *
íåy
;

252 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
¥iv
;

253 
˘ask_åa˚_t
 *
±ask0
 = 
	`TASK_CAST_TRACE
(
±ask
);

255 
	`as£π
 (
£lf
->
èsk_ty≥
 !
TASK_TYPE_GC
);

259 i‡(
£lf
->
åa˚_¨gs
) {

260 
£lf
->
åa˚_¨gs
 = 0;

263 
	`as£π
 (
±ask0
->
thªad
 =
£lf
 && 
__cuπask
 =
±ask
);

267 
±ask0
->
thªad
 = 
NULL
;

268 
	`__˝oﬁ_com_èsk_ni˚_adju°
(
	`TASK_CAST_FAC
(
±ask
));

270 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

271 
íåy
 = 
gpoﬁ
->íåy + 
±ask0
->
gid
;

276 i‡(
	`likñy
(
TASK_TYPE_NORMAL
 =
£lf
->
èsk_ty≥
)) {

277 -- 
íåy
->
ƒu¬ögs
;

282 i‡(!
íåy
->
ª˚ive_bíifôs
 && !íåy->
∑u£d
 &&

283 (
íåy
->
≈ídögs_eff
 +É¡ry->
ƒu¬ögs
Ë<É¡ry->
limô_èsks
 &&

284 
íåy
->
≈ídögs_eff
 <É¡ry->
≈ídögs
) {

285 ++ 
gpoﬁ
->
c‹e
->
≈ídögs
;

286 ++ 
íåy
->
≈ídögs_eff
;

289 
	`as£π
 (
íåy
->
ndi•©chögs
 > 0 && 
gpoﬁ
->ndispatchings > 0);

290 -- 
íåy
->
ndi•©chögs
;

291 -- 
gpoﬁ
->
ndi•©chögs
;

293 
	`as£π
 (
gpoﬁ
->
c‹e
->
≈ídögs
 >0 && gpoﬁ->c‹e->
n_qdi•©chs
 >= 0 &&

294 
gpoﬁ
->
n_qåa˚s
 >gpoﬁ->
ndi•©chögs
 + gpoﬁ->
c‹e
->
n_qdi•©chs
 + gpoﬁ->
≈ídögs
);

296 i‡(
	`likñy
(!(
eTASK_STAT_F_WPENDING
 & 
±ask0
->
f_°©
))) {

297 
ªscheduÀ
 = 0;

299 
	`as£π
 (
íåy
->
n_qåa˚s
 > 0 && 
gpoﬁ
->n_qtraces >=Éntry->n_qtraces);

304 
	`li°_dñ
(&
±ask0
->
åa˚_lök
);

305 -- 
gpoﬁ
->
n_qåa˚s
;

306 -- 
íåy
->
n_qåa˚s
;

307 ++ 
íåy
->
¡asks_¥o˚s£d
;

312 
	`__˝oﬁ_gp_w_wakeup_èskl
(
gpoﬁ
, 
íåy
, 
±ask0
);

317 i‡(
	`likñy
((
±ask0
->
f_vmÊags
 & 
eTASK_VM_F_CACHE
Ë&& !±ask0->
ªf
))

318 
	`smˇche_addl_dú
(
gpoﬁ
->
c‹e
->
ˇche_èsk
, 
±ask0
);

320 
±ask0
->
f_°©
 = 0;

322 i‡(
	`li°_em±y
(&
£lf
->
di•©ch_q
))

323 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
gpoﬁ
->
c‹e
, 
£lf
, 
THREAD_STAT_COMPLETE
);

329 i‡(
	`u∆ikñy
(
ªscheduÀ
)) {

330 
	`__˝oﬁ_gp_èsk_¥i_queuñ
(
gpoﬁ
, 
íåy
, 
±ask0
);

331 i‡(!
íåy
->
∑u£d
)

332 
	`__˝oﬁ_gp_íåy_c⁄sumî_nŸifyl
(
gpoﬁ
, 
íåy
);

334 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

335 
	}
}

	@pool/gp/cpool_gp_entry.c

10 
	~"˝oﬁ_com_öã∫Æ.h
"

11 
	~"˝oﬁ_gp_íåy.h
"

12 
	~"˝oﬁ_gp_öã∫Æ.h
"

14 
ölöe
 const *

15 
	$__˝oﬁ_gp_°©_desc
(
˝oﬁ_gp_t
 *
gpoﬁ
)

17 i‡(
gpoﬁ
->
thrŸée_⁄
) {

18 i‡(
gpoﬁ
->
c‹e
->
∑u£d
)

22 } i‡(
gpoﬁ
->
c‹e
->
∑u£d
)

26 
	}
}

28 
ölöe
 const *

29 
	$__˝oﬁ_gp_íåy_°©_desc
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
)

31 
	sdummy0
 {

32 
lÊags
;

33 
∑u£d
;

34 c⁄° *
desc
;

35 } 
°èb
[] = {

38 {
SLOT_F_FREE
 , 0, " * "},

39 {
SLOT_F_FREE
 , 1, " * "},

40 {
SLOT_F_ACTIVE
, 0, " Active "},

41 {
SLOT_F_DESTROYING
|
SLOT_F_THROTTLE
, 1, "Fr+Th+Pa"},

42 {
SLOT_F_DESTROYING
|
SLOT_F_THROTTLE
, 0, " Fr+Th "},

43 {
SLOT_F_DESTROYING
, 1, " Fr+Pa "},

44 {
SLOT_F_DESTROYING
, 0, " Frozen "},

45 {
SLOT_F_THROTTLE
, 1, " Th+Pa "},

46 {
SLOT_F_THROTTLE
, 0, "Throttle"}

48 
idx
 = 0;

50 ; 
idx
<(
°èb
)/(*sttab); idx++)

51 i‡(
íåy
->
lÊags
 =
°èb
[
idx
].lflags &&

52 
íåy
->
∑u£d
 =
°èb
[
idx
].paused)

53  
°èb
[
idx
].
desc
;

56 
	}
}

59 
	$__˝oﬁ_gp_íåy_dum∂
(
˝oﬁ_gp_t
 *
gpoﬁ
, *
buf„r
, 
size_t
 
Àn
)

61 
idx
, 
n
, 
Àngth
 = 
Àn
;

62 *
pos
 = 
buf„r
;

63 
˘ask_åa˚_t
 *
±ask
;

64 
˘ask_íåy_t
 *
íåy
;

69 
__buf„r
[4000] = {0};

74 i‡(!
buf„r
) {

75 
pos
 = 
__buf„r
;

76 
Àn
 = (
__buf„r
);

78 *
pos
 = '\0';

84 
n
 = 
	`¢¥ötf
(
pos
, 
Àn
,

88 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ->c‹e, gpoﬁ->c‹e->
maxthªads
, gpoﬁ->c‹e->
möthªads
,

89 
gpoﬁ
->
c‹e
->
¡hªads_ru¬ög
, gpoﬁ->c‹e->
n_qths
, gpoﬁ->
tsk_wªf
, gpoﬁ->
ev_wªf
,

90 
gpoﬁ
->
n_qåa˚s
, gpoﬁ->
≈ídögs
, gpoﬁ->
c‹e
->≈ídögs, 
	`__˝oﬁ_gp_°©_desc
(gpool),

92 
idx
=0; 
n
 > 0 && 
Àn
 > 0 && idx < 
gpoﬁ
->
num
; ++idx) {

93 
íåy
 = 
gpoﬁ
->
a˘íåy
[
idx
];

95 i‡(
íåy
->
lÊags
 & 
SLOT_F_FREE
)

97 
Àn
 -
n
;

98 
pos
 +
n
;

99 
n
 = 
	`¢¥ötf
(
pos
, 
Àn
, "%s [%2d]\t%c%8s {%8s},%2d,%4ld, %5d,%2d,%3d,%5d,%9d ",

100 
gpoﬁ
->
a˘ive_idx
 =
idx
 + 1 ? "*" : " ",

101 
idx
, 
íåy
->
limô_èsks
 ? ' ' : '-',

102 
	`__˝oﬁ_gp_íåy_°©_desc
(
gpoﬁ
, 
íåy
),

103 
íåy
->
«me
,É¡ry->
id
,É¡ry->
tsk_wªf
 +É¡ry->
ev_wªf
,

104 
íåy
->
limô_èsks
,É¡ry->
ª˚ive_bíifôs
,

105 
íåy
->
ƒu¬ögs
,É¡ry->
≈ídögs
,

106 
íåy
->
ª˚ive_bíifôs
 ?É¡ry->
≈ídögs
 :É¡ry->
≈ídögs_eff
);

108 i‡(
n
 < 0)

111 
Àn
 -
n
;

112 
pos
 +
n
;

113 i‡(
Àn
) {

114 i‡(
íåy
->
≈ídögs
) {

115 
±ask
 = 
íåy
->
t›
;

117 
n
 = 
	`¢¥ötf
(
pos
, 
Àn
, "{%8s}, %2d,%4s,%u\n",

118 
±ask
->
èsk_desc
,Öèsk->
¥i
,

119 (
ï_TOP
 =
±ask
->
¥i_pﬁicy
) ? "Åop " : " back ",

120 
±ask
->
£q
);

122 
n
 = 
	`¢¥ötf
(
pos
, 
Àn
, "%s",

127 i‡(
n
 < 0)

128 
buf„r
[
Àngth
-1] = '\0';

130  
buf„r
 ? buf„∏: 
__buf„r
;

131 
	}
}

134 
	$__˝oﬁ_gp_íåy_m¨k_cbl0
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
Visô_cb
 
cb
, *
¨g
, 
li°_hód
 *
rmq
)

136 
√ffs
 = 0, 
ok
 = 0;

137 
lÊags
 = ()
¨g
;

138 
˘ask_åa˚_t
 *
±ask
, *
n
;

140 
	`li°_f‹_óch_íåy_ß„
(
±ask
, 
n
, 
íåy
->
åa˚_q
, 
˘ask_åa˚_t
, 
åa˚_lök
) {

141 i‡(
cb
) {

142 
lÊags
 = 
	`cb
((
˘ask_t
 *)
±ask
, 
¨g
);

144 i‡(
lÊags
 == -1)

147 i‡(!(
lÊags
 &
eTASK_VM_F_USER_FLAGS
))

151 i‡(
eTASK_VM_F_REMOVE_FLAGS
 & 
lÊags
 && 
±ask
->
f_°©
 & 
eTASK_STAT_F_REMOVABLE
) {

152 i‡(
±ask
->
f_°©
 & 
eTASK_STAT_F_WPENDING
)

153 
±ask
->
f_°©
 &~
eTASK_STAT_F_WPENDING
;

156 
	`__˝oﬁ_gp_èsk_ªmovñ
(
gpoﬁ
, 
íåy
, 
±ask
,

157 
eTASK_VM_F_REMOVE
 & 
lÊags
 ? 
rmq
: 
NULL


159 
±ask
->
f_vmÊags
 |(
eTASK_VM_F_REMOVE_FLAGS
 & 
lÊags
);

161 
ok
 = 1;

164 i‡(
	`__˝oﬁ_com_èsk_m¨k
((
˘ask_t
 *)
±ask
, 
lÊags
Ë|| 
ok
) {

165 
ok
 = 0;

166 ++ 
√ffs
;

170  
√ffs
;

171 
	}
}

173 
	$__˝oﬁ_gp_íåy_nŸifyl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
lÊags
)

175 
idx
 = 0;

176 
˘ask_åa˚_t
 *
±ask
;

178 i‡(!
gpoﬁ
->
n_qåa˚s
 || (
íåy
 && !entry->n_qtraces))

181 i‡(
íåy
) {

182 
	`li°_f‹_óch_íåy
(
±ask
, 
íåy
->
åa˚_q
, 
˘ask_åa˚_t
, 
åa˚_lök
) {

183 
±ask
->
f_vmÊags
 |
lÊags
;

186  
íåy
->
n_qåa˚s
;

189 ; 
idx
<
gpoﬁ
->
num
; idx++) {

190 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

192 i‡(
íåy
->
lÊags
 & 
SLOT_F_FREE
)

195 
	`li°_f‹_óch_íåy
(
±ask
, 
íåy
->
åa˚_q
, 
˘ask_åa˚_t
, 
åa˚_lök
) {

196 
±ask
->
f_vmÊags
 |
lÊags
;

200  
gpoﬁ
->
n_qåa˚s
;

201 
	}
}

203 
	$__˝oﬁ_gp_íåy_m¨k_cbl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
Visô_cb
 
cb
, *
¨g
, 
li°_hód
 *
rmq
)

205 
idx
 = 0, 
√ffs
 = 0;

207 i‡(
íåy
)

208  
	`__˝oﬁ_gp_íåy_m¨k_cbl0
(
gpoﬁ
, 
íåy
, 
cb
, 
¨g
, 
rmq
);

210 ; 
idx
<
gpoﬁ
->
num
; idx++) {

211 i‡(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
idx
].
lÊags
)

213 
√ffs
 +
	`__˝oﬁ_gp_íåy_m¨k_cbl0
(
gpoﬁ
, gpoﬁ->
íåy
 + 
idx
, 
cb
, 
¨g
, 
rmq
);

216 i‡(
√ffs
 && 
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
))

217 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
, 
NULL
);

219  
√ffs
;

220 
	}
}

	@pool/gp/cpool_gp_entry.h

1 #i‚de‡
____˝oﬁ_gp_íåy_H__


2 
	#____˝oﬁ_gp_íåy_H__


	)

14 
	~<°dlib.h
>

15 
	~"o•x_com∑tibÀ.h
"

16 
	~"msglog.h
"

17 
	~"˝oﬁ_c‹e.h
"

18 
	~"˝oﬁ_gp_°ru˘.h
"

20 *
__˝oﬁ_gp_íåy_dum∂
(
˝oﬁ_gp_t
 *
gpoﬁ
, *
buf„r
, 
size_t
 
Àn
);

22 
ölöe
 
	$__˝oﬁ_gp_íåy_£t_©ål
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
scheduÀr_©å
 *
©å
)

27 
ﬁd_ª˚ive_bíifôs
 = 
íåy
->
ª˚ive_bíifôs
;

32 i‡(
©å
) {

33 
íåy
->
limô_∑øŒe_èsks
 = 
©å
->limit_paralle_tasks;

34 
íåy
->
ª˚ive_bíifôs
 = 
©å
->receive_benifits;

37 
íåy
->
limô_∑øŒe_èsks
 = 
gpoﬁ
->
c‹e
->
maxthªads
;

38 
íåy
->
ª˚ive_bíifôs
 = 1;

41 i‡(
gpoﬁ
->
c‹e
->
maxthªads
 <
íåy
->
limô_∑øŒe_èsks
)

42 
íåy
->
limô_èsks
 = 
gpoﬁ
->
c‹e
->
maxthªads
;

44 i‡(
íåy
->
limô_∑øŒe_èsks
 <= 0)

45 
íåy
->
limô_èsks
 = 0;

48 
íåy
->
limô_èsks
 =É¡ry->
limô_∑øŒe_èsks
;

53 i‡(!
íåy
->
limô_èsks
 && !íåy->
ª˚ive_bíifôs
) {

54 
	`MSG_log
(
M_SCHEDULER
, 
LOG_WARN
,

56 
©å
->
limô_∑øŒe_èsks
,áâr->
ª˚ive_bíifôs
, 
íåy
->
«me
,É¡ry->
id
);

57 
íåy
->
ª˚ive_bíifôs
 = 1;

63 i‡(!
íåy
->
∑u£d
 &&É¡ry->
≈ídögs
) {

65 i‡(
ﬁd_ª˚ive_bíifôs
)

66 
gpoﬁ
->
c‹e
->
≈ídögs
 -
íåy
->npendings;

68 
gpoﬁ
->
c‹e
->
≈ídögs
 -
íåy
->
≈ídögs_eff
;

71 i‡(
íåy
->
ª˚ive_bíifôs
)

72 
gpoﬁ
->
c‹e
->
≈ídögs
 +
íåy
->npendings;

74 
íåy
->
≈ídögs_eff
 = 
	`mö
”¡ry->
limô_èsks
,É¡ry->
≈ídögs
);

75 
gpoﬁ
->
c‹e
->
≈ídögs
 +
íåy
->
≈ídögs_eff
;

78 
	}
}

80 
ölöe
 
	$__˝oﬁ_gp_íåy_gë_©ål
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
scheduÀr_©å
 *
©å
)

82 
©å
->
limô_∑øŒe_èsks
 = 
íåy
->limit_paralle_tasks;

83 
©å
->
ª˚ive_bíifôs
 = 
íåy
->receive_benifits;

84 
	}
}

86 
ölöe
 
	$__˝oﬁ_gp_íåy_upd©e_Æl_ívl
(
˝oﬁ_gp_t
 *
gpoﬁ
)

88 
idx
=0;

89 
scheduÀr_©å
 
©å
;

91 ; 
idx
<
gpoﬁ
->
num
; idx++) {

92 i‡(!(
gpoﬁ
->
íåy
[
idx
].
lÊags
 & 
SLOT_F_FREE
)) {

93 
	`__˝oﬁ_gp_íåy_gë_©ål
(
gpoﬁ
, gpoﬁ->
íåy
 + 
idx
, &
©å
);

94 
	`__˝oﬁ_gp_íåy_£t_©ål
(
gpoﬁ
, gpoﬁ->
íåy
 + 
idx
, &
©å
);

97 
	}
}

99 
__˝oﬁ_gp_íåy_nŸifyl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
lÊags
);

101 
ölöe
 
	$__˝oﬁ_gp_íåy_dump_°©l
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
˘ask_group_°©
 *
g°©
)

103 i‡(!
g°©
->
desc
 || g°©->
desc_Àngth
 <= 0)

104 
g°©
->
desc
 = 
íåy
->
«me
;

106 
	`°∫˝y
(
g°©
->
desc
, 
íåy
->
«me
, g°©->
desc_Àngth
 -1);

107 
g°©
->
desc
[g°©->
desc_Àngth
 - 1] = '\0';

109 
g°©
->
desc_Àngth
 = 
	`°æí
(g°©->
desc
);

110 
g°©
->
gid
 = 
íåy
->
id
;

111 
g°©
->
¸óãd
 = 
íåy
->created;

112 
	`__˝oﬁ_gp_íåy_gë_©ål
(
gpoﬁ
, 
íåy
, &
g°©
->
©å
);

113 
g°©
->
waôîs
 = 
íåy
->
tsk_wªf
 +É¡ry->
ev_wªf
;

114 
g°©
->
su•íded
 = 
íåy
->
∑u£d
;

115 
g°©
->
thrŸée_⁄
 = 
íåy
->
lÊags
 & 
SLOT_F_THROTTLE
;

116 
g°©
->
¥iq_num
 = 
íåy
->
c
.priq_num;

117 
g°©
->
≈ídögs
 = 
íåy
->npendings;

118 
g°©
->
ƒu¬ögs
 = 
íåy
->nrunnings;

119 
g°©
->
ndi•©chögs
 = 
íåy
->ndispatchings;

120 
	}
}

122 
ölöe
 
	$__˝oﬁ_gp_íåy_sw≠l
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
idx0
, 
idx1
)

124 
˘ask_íåy_t
 *
ßve
 = 
gpoﬁ
->
a˘íåy
[
idx0
];

126 
	`as£π
 (
idx0
 >0 && 
idx1
 >= 0 &&

127 
idx0
 <
gpoﬁ
->
num
 &&

128 
idx1
 <
gpoﬁ
->
num
);

133 
gpoﬁ
->
a˘íåy
[
idx0
]->
ödex
 = 
idx1
;

134 
gpoﬁ
->
a˘íåy
[
idx1
]->
ödex
 = 
idx0
;

139 
gpoﬁ
->
a˘íåy
[
idx0
] = gpoﬁ->a˘íåy[
idx1
];

140 
gpoﬁ
->
a˘íåy
[
idx1
] = 
ßve
;

141 
	}
}

143 
ölöe
 
	$__˝oﬁ_gp_íåy_a˘ivñ
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
)

145 
	`as£π
 (
íåy
 &&É¡ry->
t›
 && !íåy->
∑u£d
 &&É¡ry->
≈ídögs
);

147 
íåy
->
lÊags
 |
SLOT_F_ACTIVE
;

149 i‡(1 =++ 
gpoﬁ
->
«˘ives_ok
) {

150 i‡(
íåy
->
ödex
)

151 
	`__˝oﬁ_gp_íåy_sw≠l
(
gpoﬁ
, 0, 
íåy
->
ödex
);

152 
gpoﬁ
->
a˘ive_idx
 = 1;

154 } i‡(
gpoﬁ
->
a˘ive_idx
 <
íåy
->
ödex
) {

155 
	`__˝oﬁ_gp_íåy_sw≠l
(
gpoﬁ
, gpoﬁ->
a˘ive_idx
, 
íåy
->
ödex
);

156 ++ 
gpoﬁ
->
a˘ive_idx
;

158 #i‚de‡
NDEBUG


159 
	`MSG_log
(
M_SCHEDULER
, 
LOG_DEBUG
,

161 
íåy
->
«me
,É¡ry->
id
, 
gpoﬁ
->
«˘ives_ok
);

163 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

164 "\n%s\n", 
	`__˝oﬁ_gp_íåy_dum∂
(
gpoﬁ
, 
NULL
, 0));

166 
	}
}

168 
ölöe
 
	$__˝oﬁ_gp_íåy_shrök
(
˝oﬁ_gp_t
 *
gpoﬁ
)

170 
i
, 
j
;

172 i‡(
gpoﬁ
->
a˘ive_idx
 !gpoﬁ->
«˘ives_ok
) {

173 
	`as£π
 (
gpoﬁ
->
a˘ive_idx
 > gpoﬁ->
«˘ives_ok
);

175 
i
=0; i<
gpoﬁ
->
«˘ives_ok
; i++) {

176 i‡(!(
gpoﬁ
->
a˘íåy
[
i
]->
lÊags
 & 
SLOT_F_ACTIVE
)) {

177 
j
=
i
+1; j<
gpoﬁ
->
a˘ive_idx
; j++) {

178 i‡(
gpoﬁ
->
a˘íåy
[
j
]->
lÊags
 & 
SLOT_F_ACTIVE
) {

179 
	`__˝oﬁ_gp_íåy_sw≠l
(
gpoﬁ
, 
i
, 
j
);

185 
gpoﬁ
->
a˘ive_idx
 = gpoﬁ->
«˘ives_ok
;

187 
	}
}

189 
ölöe
 
	$__˝oﬁ_gp_íåy_öa˘ivñ
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
)

191 
	`as£π
 (
gpoﬁ
->
a˘ive_idx
 > 
íåy
->
ödex
 &&

192 
íåy
 && (íåy->
∑u£d
 || !íåy->
≈ídögs
));

194 
íåy
->
lÊags
 &~
SLOT_F_ACTIVE
;

195 i‡(!-- 
gpoﬁ
->
«˘ives_ok
)

196 
gpoﬁ
->
a˘ive_idx
 = 0;

201 i‡(
íåy
->
∑u£d
 || (
gpoﬁ
->
«˘ives_ok
 + 2 < gpoﬁ->
a˘ive_idx
))

202 
	`__˝oﬁ_gp_íåy_shrök
(
gpoﬁ
);

204 #i‚de‡
NDEBUG


205 
	`MSG_log
(
M_SCHEDULER
, 
LOG_DEBUG
,

207 
íåy
->
«me
,É¡ry->
id
, 
gpoﬁ
->
«˘ives_ok
);

209 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

210 "\n%s\n", 
	`__˝oﬁ_gp_íåy_dum∂
(
gpoﬁ
, 
NULL
, 0));

212 
	}
}

214 
__˝oﬁ_gp_íåy_m¨k_cbl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
Visô_cb
 
cb
, *
¨g
, 
li°_hód
 *
rmq
);

	@pool/gp/cpool_gp_extend_method.c

10 
	~"timî.h
"

11 
	~"˝oﬁ_Á˘‹y.h
"

12 
	~"˝oﬁ_com_öã∫Æ.h
"

13 
	~"˝oﬁ_gp_mëhod.h
"

14 
	~"˝oﬁ_gp_waô_öã∫Æ.h
"

17 
	$˝oﬁ_gp_thrŸée_˘l
(
˝oﬁ_˘x_t
 
˘x
, 
⁄
)

19 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

21 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

22 i‡(
gpoﬁ
->
thrŸée_⁄
 && !
⁄
)

23 
	`__˝oﬁ_gp_w_wakeup_poﬁ_thrŸéñ
(
gpoﬁ
);

24 
gpoﬁ
->
thrŸée_⁄
 = 
⁄
;

25 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

26 
	}
}

29 
	$˝oﬁ_gp_thrŸée_waô
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

31 
e
;

32 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

34 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

35 
	`__˝oﬁ_gp_w_waôl_utûs
(
gpoﬁ
, 
WAIT_CLASS_POOL
|
WAIT_TYPE_THROTTLE
,

36 -1, 
NULL
, 
ms
, 
e
, 
	`us_°¨å
(),

40 i‡(
CORE_F_de°royög
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
)) {

41 
e
 = 
eERR_DESTROYING
;

48 i‡(!
gpoﬁ
->
thrŸée_⁄
) {

49 
e
 = 0;

53 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

55  
e
;

56 
	}
}

59 
	$˝oﬁ_gp_waô_™y
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

61 
e
;

62 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

64 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

65 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
˘x
, -1, 
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ANY
, 
NULL
, NULL, 
ms
);

66 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

68  
e
;

69 
	}
}

72 
	$˝oﬁ_gp_èsk_wsync
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
)

74 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

76 i‡(
±ask
->
ªf
) {

77 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

78 ;
±ask
->
ªf
;)

79 
	`OSPX_±hªad_c⁄d_waô
(&
gpoﬁ
->
c⁄d_sync
, &gpoﬁ->
c‹e
->
mut
);

80 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

84 
	}
}

87 
	$˝oﬁ_gp_èsk_waô
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
ms
)

89 
e
;

90 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

92 i‡(!
±ask
->
f_°©
)

95 
	`as£π
 (
˘x
 =
±ask
->
poﬁ
->ctx);

96 i‡(!
ms
)

97  
eERR_TIMEDOUT
;

99 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

100 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
˘x
, 
±ask
->
gid
, 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK
, 
NULL
, (*Ìèsk, 
ms
);

101 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

103  
e
;

104 
	}
}

107 
	$˝oﬁ_gp_èsk_waô_™y
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
íåy
[], 
n
, 
ms
)

109 
idx
, 
e
, 
m
 = 0;

110 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

115 
idx
=0; idx<
n
; idx++) {

116 i‡(!
íåy
[
idx
])

122 i‡(!
íåy
[
idx
]->
poﬁ
 ||É¡ry[idx]->poﬁ->
˘x
 != ctx)

123  
eTASK_ERR_DESTINATION
;

127 i‡(!
íåy
[
idx
]->
f_°©
)

130 ++ 
m
;

136 i‡(!
m
)

139 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

140 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, 
n
, 
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ANY2
, 
NULL
, (
˘ask_t
 *)
íåy
, 
ms
);

141 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

143  
e
;

144 
	}
}

	@pool/gp/cpool_gp_factory.c

10 
	~<°dlib.h
>

12 
	~"msglog.h
"

13 
	~"˝oﬁ_com_mëhod.h
"

14 
	~"˝oﬁ_gp_mëhod.h
"

15 
	~"˝oﬁ_gp_Á˘‹y.h
"

17 
˝oﬁ_mëhod_t
 
	g__gpoﬁ_me
 = {

19 
˝oﬁ_gp_°©
,

20 
˝oﬁ_gp_scheduÀr_m≠_dump
,

21 
˝oﬁ_com_©exô
,

22 
˝oﬁ_com_addªf
,

23 
˝oﬁ_com_ªÀa£
,

24 
˝oﬁ_com_£èâr
,

25 
˝oﬁ_com_gë©å
,

26 
˝oﬁ_com_£t_a˘ivëimeo
,

27 
˝oﬁ_com_adju°
,

28 
˝oﬁ_com_adju°_abs
,

29 
˝oﬁ_com_Êush
,

30 
˝oﬁ_gp_su•íd
,

31 
˝oﬁ_com_ªsume
,

32 
˝oﬁ_gp_ªmove_Æl
,

33 
˝oﬁ_gp_m¨k_Æl
,

34 
˝oﬁ_gp_m¨k_cb
,

35 
˝oﬁ_gp_waô_Æl
,

36 
˝oﬁ_gp_thrŸée_˘l
,

37 
˝oﬁ_gp_thrŸée_waô
,

38 
˝oﬁ_gp_waô_™y
,

39 
˝oﬁ_gp_waô_cb
,

40 
˝oﬁ_com_ˇche_gë
,

41 
˝oﬁ_com_ˇche_put
,

42 (
˘ask_åa˚_t
),

43 
NULL
,

44 
NULL
,

45 
˝oﬁ_gp_èsk_queue
,

46 
˝oﬁ_gp_èsk_ªmove
,

47 
˝oﬁ_gp_èsk_m¨k
,

48 
˝oﬁ_gp_èsk_dëach
,

49 
˝oﬁ_gp_èsk_°©
,

50 
˝oﬁ_gp_èsk_waô
,

51 
˝oﬁ_gp_èsk_waô_™y
,

52 
˝oﬁ_gp_èsk_wsync
,

55 
˝oﬁ_gp_íåy_¸óã
,

56 
˝oﬁ_gp_íåy_dñëe
,

57 
˝oﬁ_gp_íåy_id
,

58 
˝oﬁ_gp_íåy_desc
,

59 
˝oﬁ_gp_íåy_°©
,

60 
˝oﬁ_gp_íåy_°©_Æl
,

61 
˝oﬁ_gp_íåy_su•íd
,

62 
˝oﬁ_gp_íåy_su•íd_Æl
,

63 
˝oﬁ_gp_íåy_ªsume
,

64 
˝oﬁ_gp_íåy_ªsume_Æl
,

65 
˝oﬁ_gp_íåy_£èâr
,

66 
˝oﬁ_gp_íåy_gë©å
,

67 
˝oﬁ_gp_íåy_thrŸée_˘l
,

68 
˝oﬁ_gp_íåy_thrŸée_waô
,

69 
˝oﬁ_gp_íåy_ªmove_Æl
,

70 
˝oﬁ_gp_íåy_m¨k_Æl
,

71 
˝oﬁ_gp_íåy_m¨k_cb
,

72 
˝oﬁ_gp_íåy_waô_Æl
,

73 
˝oﬁ_gp_íåy_waô_cb
,

74 
˝oﬁ_gp_íåy_waô_™y


79 
	$__Ác_gp_comm⁄_dt‹
(
˝oﬁ_t
 *
poﬁ
)

81 
	`˝oﬁ_gp_‰ì_ö°™˚
(
poﬁ
->
˘x
);

82 
	`‰ì
(
poﬁ
);

83 
	}
}

85 
˝oﬁ_t
 *

86 
	$__Ác_gp_comm⁄_˘‹
(
efuncs
, c⁄° 
˝oﬁ_mëhod_t
 *
me
,

87 c⁄° *
desc
, 
maxthªads
, 
möthªads
, 
¥iq_num
, 
su•íd
)

89 
e
;

90 
˝oﬁ_t
 *
poﬁ
 = 
	`ˇŒoc
(1, (cpool_t));

92 i‡(!
poﬁ
)

93  
NULL
;

95 
poﬁ
->
desc
 = desc;

96 
poﬁ
->
efuncs
 =Éfuncs;

97 
poﬁ
->
me
 = me;

98 
poﬁ
->
‰ì
 = 
__Ác_gp_comm⁄_dt‹
;

103 i‡((
e
=
	`˝oﬁ_gp_¸óã_ö°™˚
((
˝oﬁ_gp_t
 **)&
poﬁ
->
˘x
, 
desc
, 
maxthªads
, 
möthªads
, 
¥iq_num
, 
su•íd
, 
efuncs
))) {

104 
	`MSG_log
(
M_GROUP
, 
LOG_ERR
,

106 
e
);

107 
	`‰ì
(
poﬁ
);

108  
NULL
;

111  
poﬁ
;

112 
	}
}

114 
˝oﬁ_t
 *

115 
	$Ác_gp_dy«mic_¸óã
(c⁄° *
desc
, 
max
, 
mö
, 
¥iq_num
, 
su•íd
)

117 c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
 = 
	`gë_gp_dy«mic_Á˘‹y
();

119  
	`__Ác_gp_comm⁄_˘‹
(
Ác
->
efuncs
, fac->
mëhod
, 
desc
, 
max
, 
mö
, 
¥iq_num
, 
su•íd
);

120 
	}
}

123 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

124 
	$gë_gp_dy«mic_Á˘‹y
()

126 
˝oﬁ_Á˘‹y_t
 
__dummy_Ác
 = {

128 
eFUNC_F_TASK_EX
|
eFUNC_F_EXTEND
|
eFUNC_F_ADVANCE
|
eFUNC_F_DYNAMIC_THREADS
|
eFUNC_F_DISABLEQ
|

129 
eFUNC_F_TASK_WAITABLE
|
eFUNC_F_PRIORITY
|
eFUNC_F_TRACEABLE
,

130 &
__gpoﬁ_me
, 
Ác_gp_dy«mic_¸óã
,

133  &
__dummy_Ác
;

134 
	}
}

	@pool/gp/cpool_gp_factory.h

1 #i‚de‡
__CPOOL_DYNAMIC_GROUP_FACTORY_H__


2 
	#__CPOOL_DYNAMIC_GROUP_FACTORY_H__


	)

13 
	~"˝oﬁ_Á˘‹y.h
"

15 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

16 
gë_gp_dy«mic_Á˘‹y
();

	@pool/gp/cpool_gp_internal.c

10 
	~"˝oﬁ_gp_öã∫Æ.h
"

11 
	~"˝oﬁ_gp_mëhod.h
"

14 
	$__˝oﬁ_gp_wcb_∑u£d
(
˘ask_t
 *
±ask
, *
›aque
)

16 *
ids
 = 
›aque
, 
idx
;

18 i‡(
±ask
->
f_°©
 & (
eTASK_STAT_F_DISPATCHING
|
eTASK_STAT_F_SCHEDULING
)) {

19 i‡(!
›aque
)

25 
idx
=1; idx<
ids
[0]; idx++) {

26 i‡(
ids
[
idx
] =
±ask
->
gid
)

32 
	}
}

35 
	$__˝oﬁ_gp_èsk_di•©chî
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
li°_hód
 *
rmq
)

37 
uöt16_t
 
dëached
 = 0;

38 
˘ask_t
 *
p
, *
n
;

39 
˘ask_åa˚_t
 *
±ask
;

40 
˘ask_íåy_t
 *
íåy
;

42 
	`as£π
 (
rmq
 && !
	`li°_em±y
(rmq));

44 
	`li°_f‹_óch_íåy_ß„
(
p
, 
n
, 
rmq
, 
˘ask_t
, 
lök
) {

45 
±ask
 = 
	`TASK_CAST_TRACE
(
p
);

47 
	`as£π
 (
±ask
->
èsk_îr_h™dÀr
);

49 
±ask
->
pdëached
 = &
dëached
;

50 
±ask
->
	`èsk_îr_h™dÀr
(
p
, 
	`˝oﬁ_gp_c‹e_îr_ªas⁄s
(
	`TASK_CAST_CORE
(p)));

51 i‡(
dëached
) {

52 
dëached
 = 0;

56 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

57 
íåy
 = 
gpoﬁ
->íåy + 
±ask
->
gid
;

59 
	`as£π
 (
gpoﬁ
->
ndi•©chögs
 > 0 && 
íåy
->ndispatchings > 0);

60 -- 
gpoﬁ
->
ndi•©chögs
;

61 -- 
íåy
->
ndi•©chögs
;

63 i‡(
	`likñy
(!(
eTASK_STAT_F_WPENDING
 & 
±ask
->
f_°©
))) {

67 
	`li°_dñ
(&
±ask
->
åa˚_lök
);

68 -- 
gpoﬁ
->
n_qåa˚s
;

69 -- 
íåy
->
n_qåa˚s
;

70 ++ 
íåy
->
¡asks_¥o˚s£d
;

75 
	`__˝oﬁ_gp_w_wakeup_èskl
(
gpoﬁ
, 
íåy
, 
±ask
);

79 i‡(
	`likñy
((
±ask
->
f_vmÊags
 & 
eTASK_VM_F_CACHE
Ë&& !±ask->
ªf
))

80 
	`smˇche_addl_dú
(
gpoﬁ
->
c‹e
->
ˇche_èsk
, 
±ask
);

82 
±ask
->
f_°©
 = 0;

85 
	`__˝oﬁ_gp_èsk_¥i_queuñ
(
gpoﬁ
, 
íåy
, 
±ask
);

86 i‡(!
íåy
->
∑u£d
)

87 
	`__˝oﬁ_gp_íåy_c⁄sumî_nŸifyl
(
gpoﬁ
, 
íåy
);

89 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

95 
	`˝oﬁ_c‹e_åy_GC
(
gpoﬁ
->
c‹e
);

96 
	}
}

	@pool/gp/cpool_gp_internal.h

1 #i‚de‡
__CPOOL_GP_INTERNAL_H__


2 
	#__CPOOL_GP_INTERNAL_H__


	)

13 
	~"˝oﬁ_c‹e.h
"

14 
	~"˝oﬁ_com_öã∫Æ.h
"

15 
	~"˝oﬁ_com_¥iq.h
"

16 
	~"˝oﬁ_gp_íåy.h
"

17 
	~"˝oﬁ_gp_waô_öã∫Æ.h
"

19 
ölöe
 

20 
	$__˝oﬁ_gp_èsk_¥i_queuñ
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
˘ask_åa˚_t
 *
±ask
)

22 
±ask
->
£q
 = ++ 
gpoﬁ
->seq;

23 
±ask
->
f_°©
 = 
eTASK_STAT_F_WAITING
;

28 
	`__˝oﬁ_com_¥iq_ö£π
(&
íåy
->
c
, (
˘ask_t
 *)
±ask
);

29 
íåy
->
t›
 = 
	`TASK_CAST_TRACE
(
	`__˝oﬁ_com_¥iq_t›
(&íåy->
c
));

30 ++ 
íåy
->
≈ídögs
;

31 
	}
}

34 
ölöe
 

35 
	$__˝oﬁ_gp_íåy_c⁄sumî_nŸifyl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
)

37 
	`as£π
 (!
íåy
->
∑u£d
);

39 ++ 
gpoﬁ
->
≈ídögs
;

43 i‡(
	`likñy
(
íåy
->
ª˚ive_bíifôs
) ||

44 ((
íåy
->
ƒu¬ögs
 +É¡ry->
≈ídögs_eff
Ë<É¡ry->
limô_èsks
 &&

45 
gpoﬁ
->
≈ídögs
 > 
íåy
->
≈ídögs_eff
)) {

46 ++ 
gpoﬁ
->
c‹e
->
≈ídögs
;

48 i‡(
	`u∆ikñy
(!
íåy
->
ª˚ive_bíifôs
))

49 ++ 
íåy
->
≈ídögs_eff
;

51 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
Ë&& !gpoﬁ->c‹e->
∑u£d
)

52 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
, 
NULL
);

58 i‡(1 =
íåy
->
≈ídögs
)

59 
	`__˝oﬁ_gp_íåy_a˘ivñ
(
gpoﬁ
, 
íåy
);

64 i‡(
gpoﬁ
->
¡asks_≥ak
 < gpoﬁ->
≈ídögs
)

65 
gpoﬁ
->
¡asks_≥ak
 = gpoﬁ->
≈ídögs
;

71 
	`as£π
 (
gpoﬁ
->
c‹e
->
∑u£d
 || gpoﬁ->c‹e->
n_qths_waô
 <gpoﬁ->c‹e->
n_qths
);

72 
	}
}

74 
ölöe
 
˘ask_åa˚_t
 *

75 
	$__˝oﬁ_gp_gë_≥ndög_èsk
(
˝oﬁ_gp_t
 *
gpoﬁ
)

77 
idx
, 
bíifôs
 = 0;

78 
˘ask_íåy_t
 *
íåy
;

79 
˘ask_åa˚_t
 *
±ask
 = 
NULL
;

81 
	`as£π
 (
gpoﬁ
->
a˘ive_idx
 >= 0 &&

82 
gpoﬁ
->
a˘ive_idx
 >gpoﬁ->
«˘ives_ok
 &&

83 
gpoﬁ
->
a˘ive_idx
 < gpoﬁ->
num
);

85 
	`as£π
 (
gpoﬁ
->
≈ídögs
 > 0);

86 
ªgë
:

87 
idx
=0; idx<
gpoﬁ
->
a˘ive_idx
; idx++) {

88 
íåy
 = 
gpoﬁ
->
a˘íåy
[
idx
];

90 
	`as£π
 (!
íåy
->
∑u£d
);

95 i‡(
	`likñy
(
íåy
->
≈ídögs
)) {

96 
	`as£π
 (
íåy
->
ª˚ive_bíifôs
 || (íåy->
≈ídögs_eff
 >= 0 &&

97 
íåy
->
≈ídögs_eff
 <íåy->
≈ídögs
));

99 i‡(
íåy
->
ƒu¬ögs
 <É¡ry->
limô_èsks
 ||

100 (
bíifôs
 && 
íåy
->
ª˚ive_bíifôs
)) {

102 
	`as£π
 (
SLOT_F_ACTIVE
 & 
íåy
->
lÊags
 &&

103 
íåy
->
t›
->
¥iq
 <É¡ry->
c
.
¥iq_num
);

105 
	`as£π
 (!
bíifôs
 || 
íåy
->
ª˚ive_bíifôs
 ||

106 
íåy
->
≈ídögs_eff
 > 1);

108 i‡(!
±ask
) {

109 
±ask
 = 
íåy
->
t›
;

116 i‡(
	`likñy
(
íåy
->
t›
->
¥i
 =
±ask
->pri)) {

117 i‡(
íåy
->
t›
->
£q
 > 
±ask
->seq) {

118 i‡(
ï_TOP
 =
íåy
->
t›
->
¥i_pﬁicy
)

119 
±ask
 = 
íåy
->
t›
;

121 } i‡(
	`likñy
(
ï_BACK
 =
±ask
->
¥i_pﬁicy
))

122 
±ask
 = 
íåy
->
t›
;

124 } i‡(
íåy
->
t›
->
¥i
 > 
±ask
->pri)

125 
±ask
 = 
íåy
->
t›
;

130 i‡(
±ask
) {

131 
íåy
 = 
gpoﬁ
->íåy + 
±ask
->
gid
;

133 
	`as£π
 (
±ask
->
f_°©
 & 
eTASK_STAT_F_WAITING
);

134 
	`as£π
 (
	`TASK_CAST_FAC
(
±ask
Ë=
	`__˝oﬁ_com_¥iq_t›
(&
íåy
->
c
));

139 
	`__˝oﬁ_com_¥iq_p›
(&
íåy
->
c
);

141 #i‚de‡
NDEBUG


142 
	`MSG_log
(
M_SCHEDULER
, 
LOG_TRACE
,

144 
±ask
->
èsk_desc
,Öèsk->
£q
, 
íåy
->
«me
,É¡ry->
id
,É¡ry->
≈ídögs
 - 1,

145 
íåy
->
limô_èsks
,É¡ry->
ƒu¬ögs
);

150 i‡(
	`__˝oﬁ_com_¥iq_em±y
(&
íåy
->
c
)) {

151 
	`as£π
 (
íåy
->
≈ídögs
 == 1);

153 
íåy
->
≈ídögs
 = 0;

154 i‡(
	`u∆ikñy
(!
íåy
->
ª˚ive_bíifôs
)) {

155 
	`as£π
 (
íåy
->
≈ídögs_eff
 == 1);

156 
íåy
->
≈ídögs_eff
 = 0;

159 -- 
gpoﬁ
->
c‹e
->
≈ídögs
;

160 -- 
gpoﬁ
->
≈ídögs
;

162 
	`__˝oﬁ_gp_íåy_öa˘ivñ
(
gpoﬁ
, 
íåy
);

163 
	`as£π
 (
gpoﬁ
->
c‹e
->
≈ídögs
 >= 0 && gpool->npendings >= gpool->core->npendings);

165  
±ask
;

167 
íåy
->
t›
 = 
	`TASK_CAST_TRACE
(
	`__˝oﬁ_com_¥iq_t›
(&íåy->
c
));

168 
	`as£π
 (
íåy
->
≈ídögs
 > 0);

169 
	`as£π
 (
gpoﬁ
->
c‹e
->
≈ídögs
 >= 0 && gpool->npendings >= gpool->core->npendings);

171 -- 
íåy
->
≈ídögs
;

176 i‡(
	`u∆ikñy
(!
íåy
->
ª˚ive_bíifôs
))

177 -- 
íåy
->
≈ídögs_eff
;

179 
	`as£π
 (!
bíifôs
 || 
íåy
->
ª˚ive_bíifôs
);

180 -- 
gpoﬁ
->
c‹e
->
≈ídögs
;

181 -- 
gpoﬁ
->
≈ídögs
;

183 } i‡(
gpoﬁ
->
c‹e
->
≈ídögs
) {

184 
	`as£π
 (
gpoﬁ
->
«˘ives_ok
 > 0 && !
bíifôs
);

185 
bíifôs
 = 1;

186 
ªgë
;

189  
±ask
;

190 
	}
}

192 
ölöe
 

193 
	$__˝oﬁ_gp_èsk_ªmovñ
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
˘ask_åa˚_t
 *
±ask
, 
li°_hód
 *
q
)

195 
	`as£π
 (
eTASK_STAT_F_WAITING
 & 
±ask
->
f_°©
);

200 
	`__˝oﬁ_com_¥iq_îa£
(&
íåy
->
c
, 
	`TASK_CAST_FAC
(
±ask
));

202 i‡(!
±ask
->
èsk_îr_h™dÀr
) {

206 
	`li°_dñ
(&
±ask
->
åa˚_lök
);

207 -- 
gpoﬁ
->
n_qåa˚s
;

208 -- 
íåy
->
n_qåa˚s
;

209 ++ 
íåy
->
¡asks_¥o˚s£d
;

213 
	`__˝oﬁ_gp_w_wakeup_èskl
(
gpoﬁ
, 
íåy
, 
±ask
);

214 i‡(
eTASK_VM_F_CACHE
 & 
±ask
->
f_vmÊags
 && !±ask->
ªf
)

215 
	`smˇche_addl_dú
(
gpoﬁ
->
c‹e
->
ˇche_èsk
, 
±ask
);

217 
±ask
->
f_°©
 = 0;

223 
±ask
->
f_°©
 = 
eTASK_STAT_F_DISPATCHING
;

224 i‡(
	`likñy
(!
q
)) {

225 
	`li°_add_èû
(&
±ask
->
lök
, &
gpoﬁ
->
c‹e
->
di•©ch_q
);

226 ++ 
gpoﬁ
->
c‹e
->
n_qdi•©chs
;

229 
	`li°_add_èû
(&
±ask
->
lök
, 
q
);

230 ++ 
gpoﬁ
->
ndi•©chögs
;

232 ++ 
íåy
->
ndi•©chögs
;

237 -- 
íåy
->
≈ídögs
;

238 i‡(!
íåy
->
∑u£d
) {

239 -- 
gpoﬁ
->
≈ídögs
;

241 i‡(
	`likñy
(
íåy
->
ª˚ive_bíifôs
))

242 -- 
gpoﬁ
->
c‹e
->
≈ídögs
;

244 i‡(
íåy
->
≈ídögs_eff
 >É¡ry->
≈ídögs
) {

245 -- 
gpoﬁ
->
c‹e
->
≈ídögs
;

246 -- 
íåy
->
≈ídögs_eff
;

249 i‡(0 =
íåy
->
≈ídögs
)

250 
	`__˝oﬁ_gp_íåy_öa˘ivñ
(
gpoﬁ
, 
íåy
);

252 
	`as£π
 (
gpoﬁ
->
≈ídögs
 >0 && 
íåy
->
≈ídögs_eff
 >= 0 &&

253 
gpoﬁ
->
c‹e
->
≈ídögs
 >
íåy
->
≈ídögs_eff
 &&

254 
gpoﬁ
->
n_qåa˚s
 >gpoﬁ->
ndi•©chögs
 + gpoﬁ->
c‹e
->
n_qdi•©chs
 + gpoﬁ->
≈ídögs
);

258 i‡(!
	`__˝oﬁ_com_¥iq_em±y
(&
íåy
->
c
))

259 
íåy
->
t›
 = 
	`TASK_CAST_TRACE
(
	`__˝oﬁ_com_¥iq_t›
(&íåy->
c
));

260 
	}
}

262 
__˝oﬁ_gp_èsk_di•©chî
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
li°_hód
 *
rmq
);

263 
__˝oﬁ_gp_wcb_∑u£d
(
˘ask_t
 *
±ask
, *
›aque
);

264 
__˝oﬁ_gp_íåy_waô_cbl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
˘ask_íåy_t
 *
íåy
, 
ty≥
, 
Visô_cb
 
cb
, *
¨g
, 
ms
);

	@pool/gp/cpool_gp_method.c

10 
	~"o•x.h
"

11 
	~"o•x_î∫o.h
"

12 
	~"msglog.h
"

13 
	~"˝oﬁ_Á˘‹y.h
"

14 
	~"˝oﬁ_c‹e.h
"

15 
	~"˝oﬁ_gp_mëhod.h
"

16 
	~"˝oﬁ_gp_öã∫Æ.h
"

17 
	~"˝oﬁ_gp_waô_öã∫Æ.h
"

20 
	$˝oﬁ_gp_¸óã_ö°™˚
(
˝oﬁ_gp_t
 **
p_gpoﬁ
, c⁄° *
desc
, 
max
, 
mö
, 
¥i_q_num
, 
su•íd
, 
lÊags
)

22 
˝oﬁ_c‹e_mëhod_t
 
__me
 = {

24 (
˘ask_åa˚_t
),

25 
˝oﬁ_gp_c‹e_˘‹
,

26 
˝oﬁ_gp_c‹e_nŸifyl
,

27 
˝oﬁ_gp_c‹e_gëèsk
,

28 
˝oﬁ_gp_c‹e_îr_ªas⁄s
,

29 
˝oﬁ_gp_c‹e_föished
,

30 
˝oﬁ_gp_c‹e_dt‹


33 
c‹e_Êags
 = 
CORE_F_dy«mic
;

34 c⁄° 
˝oﬁ_c‹e_mëhod_t
 * 
me
 = &
__me
;

35 
˝oﬁ_gp_t
 *
gpoﬁ
;

40 i‡(!(
eFUNC_F_DYNAMIC_THREADS
 & 
lÊags
)) {

41 
	`MSG_log
(
M_GROUP
, 
LOG_ERR
,

43 
lÊags
);

45  
eERR_NSUPPORT
;

51 i‡(!
me
) {

52 
	`MSG_log
(
M_GROUP
, 
LOG_ERR
,

54 
lÊags
);

56  
eERR_OTHER
;

62 
gpoﬁ
 = 
	`ˇŒoc
(1, (
˝oﬁ_gp_t
Ë+ (
˝oﬁ_c‹e_t
));

63 i‡(!
gpoﬁ
)

64  
eERR_NOMEM
;

65 
gpoﬁ
->
c‹e
 = (
˝oﬁ_c‹e_t
 *)(gpool + 1);

70 
gpoﬁ
->
lÊags
 =Üflags;

71 
gpoﬁ
->
¥iq_num
 = 
¥i_q_num
;

72 
gpoﬁ
->
c‹e
->
¥iv
 = gpool;

77 i‡(
	`˝oﬁ_c‹e_˘‹
(
gpoﬁ
->
c‹e
, 
desc
, 
me
, 
max
, 
mö
, 
su•íd
, 
c‹e_Êags
)) {

78 
	`‰ì
(
gpoﬁ
);

79  
eERR_OTHER
;

81 *
p_gpoﬁ
 = 
gpoﬁ
;

84 
	}
}

87 
	$˝oﬁ_gp_‰ì_ö°™˚
(
˝oﬁ_gp_t
 *
gpoﬁ
)

93 
	`‰ì
(
gpoﬁ
);

94 
	}
}

97 
	$˝oﬁ_gp_èsk_queue
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
)

99 
e
 = 0, 
gid
 = 
±ask
->gid;

100 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

101 
˘ask_íåy_t
 *
íåy
;

106 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_REMOVE_FLAGS
;

111 i‡(
gpoﬁ
->
c‹e
->
°©us
 & 
CORE_F_de°royög
)

112  
eERR_DESTROYING
;

114 i‡(
gid
 < 0 || gid > 
gpoﬁ
->
num
)

115  
eERR_GROUP_NOT_FOUND
;

117 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

121 i‡(
±ask
->
f_°©
 & (
eTASK_STAT_F_WAITING
|
eTASK_STAT_F_WPENDING
)) {

122 
	`as£π
 ((
±ask
->
f_°©
 & 
eTASK_STAT_F_WAITING
) ||

123 (
±ask
->
f_°©
 & (
eTASK_STAT_F_SCHEDULING
|
eTASK_STAT_F_DISPATCHING
)));

124 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

130 i‡(
±ask
->
f_vmÊags
 & 
eTASK_VM_F_DISABLE_QUEUE
) {

131 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

132  
eTASK_ERR_DISABLE_QUEUE
;

138 i‡(
gpoﬁ
->
thrŸée_⁄
) {

139 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

141  
eERR_THROTTLE
;

143 
íåy
 = 
gpoﬁ
->íåy + 
gid
;

147 
	`__˝oﬁ_com_èsk_ni˚_¥ïro˚ss
(&
íåy
->
c
, 
±ask
);

152 i‡(
	`u∆ikñy
(
íåy
->
lÊags
 & (
SLOT_F_FREE
|
SLOT_F_DESTROYING
|
SLOT_F_THROTTLE
))) {

153 
e
 = 
íåy
->
lÊags
;

154 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

156 i‡((
SLOT_F_FREE
|
SLOT_F_DESTROYING
Ë& 
e
)

157  
eERR_GROUP_NOT_FOUND
;

158  
eERR_GROUP_THROTTLE
;

161 i‡(
	`likñy
(!
±ask
->
f_°©
)) {

162 ++ 
gpoﬁ
->
n_qåa˚s
;

163 ++ 
íåy
->
n_qåa˚s
;

164 
	`li°_add_èû
(&
	`TASK_CAST_TRACE
(
±ask
)->
åa˚_lök
, 
íåy
->
åa˚_q
);

166 
	`__˝oﬁ_gp_èsk_¥i_queuñ
(
gpoﬁ
, 
íåy
, 
	`TASK_CAST_TRACE
(
±ask
));

167 i‡(
	`likñy
(!
íåy
->
∑u£d
))

168 
	`__˝oﬁ_gp_íåy_c⁄sumî_nŸifyl
(
gpoﬁ
, 
íåy
);

170 
	`as£π
 (
±ask
->
f_°©
 & (
eTASK_STAT_F_DISPATCHING
|
eTASK_STAT_F_SCHEDULING
));

171 
±ask
->
f_°©
 |
eTASK_STAT_F_WPENDING
;

173 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

176 
	}
}

179 
	$˝oﬁ_gp_èsk_ªmove
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
di•©ched_by_poﬁ
)

181 
ok
 = 0;

182 
rmÊags
 = 
eTASK_VM_F_REMOVE
;

183 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

184 
	`LIST_HEAD
(
rmq
);

185 
li°_hód
 *
q
 = &
rmq
;

187 
	`as£π
 (
±ask
->
poﬁ
 &&Öèsk->poﬁ->
˘x
 == ctx);

189 i‡(!
±ask
->
f_°©
)

192 i‡(
±ask
->
f_°©
 & (
eTASK_STAT_F_DISPATCHING
|
eTASK_STAT_F_SCHEDULING
))

195 
	`as£π
 (
±ask
->
gid
 >0 &&Öèsk->gid < 
gpoﬁ
->
num
);

197 i‡(
di•©ched_by_poﬁ
) {

198 i‡(
±ask
->
èsk_îr_h™dÀr
)

199 
q
 = 
NULL
;

200 
rmÊags
 = 
eTASK_VM_F_REMOVE_BYPOOL
;

203 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

204 i‡(
±ask
->
f_°©
 & 
eTASK_STAT_F_WPENDING
)

205 
±ask
->
f_°©
 &~
eTASK_STAT_F_WPENDING
;

207 i‡(
±ask
->
f_°©
 & 
eTASK_STAT_F_WAITING
) {

208 
	`__˝oﬁ_gp_èsk_ªmovñ
(
gpoﬁ
, gpoﬁ->
íåy
 + 
±ask
->
gid
, 
	`TASK_CAST_TRACE
’èsk), 
q
);

210 i‡(!
q
 && 
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
))

211 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
, 
NULL
);

212 
±ask
->
f_vmÊags
 |
rmÊags
;

213 
ok
 = 1;

215 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

217 i‡(!
	`li°_em±y
(&
rmq
))

218 
	`__˝oﬁ_gp_èsk_di•©chî
(
gpoﬁ
, &
rmq
);

220  
ok
;

221 
	}
}

224 
	$˝oﬁ_gp_èsk_dëach
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
)

226 
˘ask_åa˚_t
 *
±ask0
 = 
	`TASK_CAST_TRACE
(
±ask
);

227 
thªad_t
 *
£lf
 = 
±ask0
->
thªad
;

228 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

229 
˘ask_íåy_t
 *
íåy
;

231 
	`as£π
 (
±ask0
 && 
gpoﬁ
 &&Öèsk0->
èsk_run
);

232 
	`as£π
 (
±ask0
->
f_°©
 & (
eTASK_STAT_F_DISPATCHING
|
eTASK_STAT_F_SCHEDULING
));

237 i‡(
±ask0
->
f_vmÊags
 & 
eTASK_VM_F_CACHE
) {

238 
	`MSG_log
(
M_GROUP
, 
LOG_WARN
,

240 
±ask
->
èsk_desc
,Öèsk, 
gpoﬁ
->
c‹e
->
desc
);

244 
	`__˝oﬁ_com_èsk_ni˚_adju°
(
±ask
);

245 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

249 i‡(
±ask0
->
pdëached
)

250 *
±ask0
->
pdëached
 = 1;

251 
íåy
 = 
gpoﬁ
->íåy + 
±ask0
->
gid
;

256 
	`li°_dñ
(&
±ask0
->
åa˚_lök
);

257 -- 
gpoﬁ
->
n_qåa˚s
;

258 -- 
íåy
->
n_qåa˚s
;

259 ++ 
íåy
->
¡asks_¥o˚s£d
;

264 
	`__˝oﬁ_gp_w_wakeup_èskl
(
gpoﬁ
, 
íåy
, 
±ask0
);

269 i‡(
	`likñy
((
±ask0
->
f_vmÊags
 & 
eTASK_VM_F_CACHE
Ë&& !±ask0->
ªf
))

270 
	`smˇche_addl_dú
(
gpoﬁ
->
c‹e
->
ˇche_èsk
, 
±ask0
);

272 
±ask0
->
f_°©
 = 0;

278 i‡(
	`likñy
(
£lf
)) {

279 i‡(
	`likñy
(
TASK_TYPE_NORMAL
 =
£lf
->
èsk_ty≥
)) {

280 -- 
íåy
->
ƒu¬ögs
;

286 i‡(
	`u∆ikñy
(!
íåy
->
ª˚ive_bíifôs
Ë&& !íåy->
∑u£d
 &&

287 (
íåy
->
≈ídögs_eff
 +É¡ry->
ƒu¬ögs
Ë<É¡ry->
limô_èsks
 &&

288 
íåy
->
≈ídögs_eff
 <É¡ry->
≈ídögs
) {

289 ++ 
gpoﬁ
->
c‹e
->
≈ídögs
;

290 ++ 
íåy
->
≈ídögs_eff
;

293 -- 
íåy
->
ndi•©chögs
;

294 -- 
gpoﬁ
->
ndi•©chögs
;

297 i‡(
	`li°_em±y
(&
£lf
->
di•©ch_q
))

298 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
gpoﬁ
->
c‹e
, 
£lf
, 
THREAD_STAT_COMPLETE
);

301 
	`as£π
 (
gpoﬁ
->
ndi•©chögs
 > 0 && 
íåy
->ndispatchings > 0);

302 -- 
gpoﬁ
->
ndi•©chögs
;

303 -- 
íåy
->
ndi•©chögs
;

305 
	`as£π
 (
íåy
->
ndi•©chögs
 >0 &&É¡ry->
ƒu¬ögs
 >= 0);

307 
	`as£π
 (
gpoﬁ
->
c‹e
->
≈ídögs
 >0 && gpoﬁ->c‹e->
n_qdi•©chs
 >= 0 &&

308 
íåy
->
n_qåa˚s
 >0 && 
gpoﬁ
->n_qtraces >=Éntry->n_qtraces &&

309 
gpoﬁ
->
n_qåa˚s
 >gpoﬁ->
ndi•©chögs
 + gpoﬁ->
c‹e
->
n_qdi•©chs
 + gpoﬁ->
≈ídögs
);

314 i‡(
±ask0
->
ªf
) {

315 #i‚de‡
NDEBUG


316 
	`MSG_log
(
M_GROUP
, 
LOG_DEBUG
,

318 
±ask0
->
èsk_desc
,Öèsk0,Öèsk0->
ªf
);

323 
±ask0
->
f_vmÊags
 |
eTASK_VM_F_DETACHED
;

324 ;
±ask0
->
ªf
;)

325 
	`OSPX_±hªad_c⁄d_waô
(
gpoﬁ
->
íåy
[
±ask0
->
gid
].
c⁄d_sync
, &gpoﬁ->
c‹e
->
mut
);

326 
±ask0
->
f_vmÊags
 &~
eTASK_VM_F_DETACHED
;

328 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

330 
±ask0
->
thªad
 = 
NULL
;

331 
	}
}

334 
	$˝oﬁ_gp_èsk_m¨k
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
lÊags
)

336 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

338 
lÊags
 &
eTASK_VM_F_USER_FLAGS
;

340 i‡(!
lÊags
)

343 i‡(
lÊags
 =÷Êag†& 
eTASK_VM_F_REMOVE_FLAGS
))

344 
	`˝oﬁ_gp_èsk_ªmove
(
˘x
, 
±ask
, 
lÊags
 & 
eTASK_VM_F_REMOVE_BYPOOL
);

347 
rmÊags
 = 
lÊags
 & 
eTASK_VM_F_REMOVE_FLAGS
;

348 
	`LIST_HEAD
(
rmq
);

349 
li°_hód
 *
q
 = (
lÊags
 & 
eTASK_VM_F_REMOVE_BYPOOL
 && 
±ask
->
èsk_îr_h™dÀr
Ë? 
NULL
 : &
rmq
;

351 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

352 i‡(
rmÊags
 & 
eTASK_VM_F_REMOVE_FLAGS
) {

353 i‡(
±ask
->
f_°©
 & 
eTASK_STAT_F_WPENDING
)

354 
±ask
->
f_°©
 &~
eTASK_STAT_F_WPENDING
;

356 i‡(
±ask
->
f_°©
 & 
eTASK_STAT_F_WAITING
) {

357 
	`__˝oﬁ_gp_èsk_ªmovñ
(
gpoﬁ
, gpoﬁ->
íåy
 + 
±ask
->
gid
, 
	`TASK_CAST_TRACE
’èsk), 
q
);

359 
±ask
->
f_vmÊags
 |
rmÊags
;

360 i‡(!
q
 && 
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
))

361 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
gpoﬁ
->
c‹e
, 
NULL
);

364 
	`__˝oﬁ_com_èsk_m¨k
(
±ask
, 
lÊags
);

365 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

367 i‡(!
	`li°_em±y
(&
rmq
))

368 
	`__˝oﬁ_gp_èsk_di•©chî
(
gpoﬁ
, &
rmq
);

370 
	}
}

373 
	$˝oﬁ_gp_èsk_°©
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, *
vm
)

375 
f_°©
 = 0, 
f_vm
 = 0, 
íåy_°©
 = 0;

376 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

378 
	`as£π
 (
±ask
->
poﬁ
 &&Öèsk->poﬁ->
˘x
 == ctx);

383 i‡(
±ask
->
gid
 >0 &&Öèsk->gid < 
gpoﬁ
->
num
 &&Öèsk->
f_°©
) {

384 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

385 
íåy_°©
 = 
gpoﬁ
->
íåy
[
±ask
->
gid
].
lÊags
;

386 
f_°©
 = 
±ask
->f_stat;

387 
f_vm
 = 
±ask
->
f_vmÊags
;

388 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

393 i‡(
íåy_°©
 & 
SLOT_F_FREE
)

394 
f_°©
 = 0;

397 i‡(
vm
)

398 *
vm
 = 
f_vm
;

400  
f_°©
;

401 
	}
}

404 
	$˝oﬁ_gp_su•íd
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

406 
e
 = 0;

407 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

409 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

413 
	`˝oﬁ_c‹e_su•ídl
(
gpoﬁ
->
c‹e
);

417 i‡(
gpoﬁ
->
ndi•©chögs
 || gpoﬁ->
c‹e
->
n_qdi•©chs
 || gpoﬁ->c‹e->
¡hªads_ru¬ög
) {

418 i‡(!
ms
)

419 
e
 = 
eERR_TIMEDOUT
;

421 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, -1, 
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK
, 
__˝oﬁ_gp_wcb_∑u£d
, 
NULL
, 
ms
);

423 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

425  
e
;

426 
	}
}

429 
	$˝oﬁ_gp_waô_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

431 
e
;

432 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

434 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

435 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, -1, 
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ALL
, 
NULL
, NULL, 
ms
);

436 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

438  
e
;

439 
	}
}

442 
	$˝oﬁ_gp_ªmove_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
di•©ched_by_poﬁ
)

444 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

446  
	`˝oﬁ_gp_m¨k_Æl
(
gpoﬁ
, 
di•©ched_by_poﬁ
 ? 
eTASK_VM_F_REMOVE_BYPOOL
 : 
eTASK_VM_F_REMOVE
);

447 
	}
}

450 
	$˝oﬁ_gp_m¨k_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
lÊags
)

452 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

454  
	`˝oﬁ_gp_m¨k_cb
(
gpoﬁ
, 
NULL
, (*)
lÊags
);

455 
	}
}

458 
	$˝oﬁ_gp_m¨k_cb
(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
cb
, *
cb_¨g
)

460 
√ffs
;

461 
	`LIST_HEAD
(
rmq
);

462 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

464 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

465 
√ffs
 = 
	`__˝oﬁ_gp_íåy_m¨k_cbl
(
gpoﬁ
, 
NULL
, 
cb
, 
cb_¨g
, &
rmq
);

466 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

472 i‡(!
	`li°_em±y
(&
rmq
))

473 
	`__˝oﬁ_gp_èsk_di•©chî
(
gpoﬁ
, &
rmq
);

475  
√ffs
;

476 
	}
}

479 
	$˝oﬁ_gp_waô_cb
(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
cb
, *
cb_¨g
, 
ms
)

481 
e
;

482 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

484 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

485 
e
 = 
	`__˝oﬁ_gp_w_waô_cbl
(
gpoﬁ
, -1, 
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK
, 
cb
, 
cb_¨g
, 
ms
);

486 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

488  
e
;

489 
	}
}

491 
˝oﬁ_°©
 *

492 
	$˝oﬁ_gp_°©
(
˝oﬁ_˘x_t
 
˘x
, 
˝oﬁ_°©
 *
°©
)

494 
idx
 = 0;

495 
˝oﬁ_c‹e_°©
 
c‹e_°©
;

496 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

498 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

499 
	`˝oﬁ_c‹e_°©l
(
gpoﬁ
->
c‹e
, &
c‹e_°©
);

500 
°©
->
waôîs
 = 
gpoﬁ
->
tsk_wªf
 + gpoﬁ->
ev_wªf
;

501 
°©
->
èsks_≥ak
 = 
gpoﬁ
->
¡asks_≥ak
;

502 
°©
->
èsks_added
 = 
gpoﬁ
->
£q
;

503 
°©
->
èsks_¥o˚s£d
 = 
gpoﬁ
->
¡asks_¥o˚s£d0
;

504 ; 
idx
<
gpoﬁ
->
num
; idx++) {

505 i‡(
gpoﬁ
->
íåy
[
idx
].
lÊags
 & 
SLOT_F_FREE
)

507 
°©
->
èsks_¥o˚s£d
 +
gpoﬁ
->
íåy
[
idx
].
¡asks_¥o˚s£d
;

509 
°©
->
cuπasks_≥ndög
 = 
gpoﬁ
->
≈ídögs
;

510 
°©
->
cuπasks_ªmovög
 = 
gpoﬁ
->
ndi•©chögs
;

511 
°©
->
thrŸée_⁄
 = 
gpoﬁ
->throttle_on;

512 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

514 
°©
->
desc
 = 
c‹e_°©
.desc;

515 
°©
->
¸óãd
 = 
c‹e_°©
.
°¨t
;

516 
°©
->
a˘timeo
 = 
c‹e_°©
.acttimeo;

517 
°©
->
øndtimeo
 = 
c‹e_°©
.randtimeo;

518 
°©
->
¥iq_num
 = 
gpoﬁ
->priq_num;

519 
°©
->
ªf
 = 
c‹e_°©
.
u£r_ªf
;

520 
°©
->
su•íded
 = 
c‹e_°©
.
∑u£d
;

521 
°©
->
maxthªads
 = 
c‹e_°©
.
max
;

522 
°©
->
möthªads
 = 
c‹e_°©
.
mö
;

523 
°©
->
cuπhªads
 = 
c‹e_°©
.
n_qths
;

524 
°©
->
cuπhªads_a˘ive
 = 
c‹e_°©
.
¡hs_ru¬ög
;

525 
°©
->
cuπhªads_dyög
 = 
c‹e_°©
.
¡hs_dyög
;

526 
°©
->
thªads_≥ak
 = 
c‹e_°©
.
¡hs_≥ak
;

527 
°©
->
cuπasks_schedulög
 = sèt->
cuπhªads_a˘ive
;

528 
°©
->
èsks_ªmoved
 = -1;

530  
°©
;

531 
	}
}

534 
	$˝oﬁ_gp_scheduÀr_m≠_dump
(
˝oﬁ_˘x_t
 
˘x
, *
buff
, 
size_t
 
bufÊí
)

536 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
˘x
;

538 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

539 
buff
 = 
	`__˝oﬁ_gp_íåy_dum∂
(
gpoﬁ
, buff, 
bufÊí
);

540 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

542  
buff
;

543 
	}
}

	@pool/gp/cpool_gp_method.h

1 #i‚de‡
__CPOOL_GP_METHOD_H__


2 
	#__CPOOL_GP_METHOD_H__


	)

13 
	~"˝oﬁ_mëhod.h
"

14 
	~"˝oﬁ_c‹e_°ru˘.h
"

15 
	~"˝oﬁ_gp_°ru˘.h
"

18 
˝oﬁ_gp_c‹e_˘‹
(*
¥iv
);

19 
˝oﬁ_gp_c‹e_nŸifyl
(*
¥iv
, 
eEvít_t
 
evít
);

20 
˝oﬁ_gp_c‹e_dt‹
(*
¥iv
);

21 
˝oﬁ_gp_c‹e_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
);

22 
˝oﬁ_gp_c‹e_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
);

23 
˝oﬁ_gp_c‹e_îr_ªas⁄s
(
basic_èsk_t
 *
±ask
);

26 
˝oﬁ_gp_su•íd
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

27 
˝oﬁ_gp_ªmove_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
di•©ched_by_poﬁ
);

28 
˝oﬁ_gp_m¨k_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
lÊags
);

29 
˝oﬁ_gp_waô_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

30 
˝oﬁ_gp_waô_cb
(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
cb
, *
cb_¨g
, 
ms
);

31 
˝oﬁ_gp_m¨k_cb
(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
cb
, *
cb_¨g
);

33 
˝oﬁ_°©
 *
˝oﬁ_gp_°©
(
˝oﬁ_˘x_t
 
˘x
, ˝oﬁ_°© *
°©
);

34 * 
˝oﬁ_gp_scheduÀr_m≠_dump
(
˝oﬁ_˘x_t
 
˘x
, *
buff
, 
size_t
 
bufÊí
);

36 
˝oﬁ_gp_èsk_queue
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

37 
˝oﬁ_gp_èsk_ªmove
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
di•©ched_by_poﬁ
);

38 
˝oﬁ_gp_èsk_dëach
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

39 
˝oﬁ_gp_èsk_m¨k
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
lÊags
);

40 
˝oﬁ_gp_èsk_°©
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, *
vm
);

43 
˝oﬁ_gp_thrŸée_˘l
(
˝oﬁ_˘x_t
 
˘x
, 
⁄
);

44 
˝oﬁ_gp_thrŸée_waô
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

45 
˝oﬁ_gp_waô_™y
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

46 
˝oﬁ_gp_èsk_wsync
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

47 
˝oﬁ_gp_èsk_waô
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
ms
);

48 
˝oﬁ_gp_èsk_waô_™y
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
íåy
[], 
n
, 
ms
);

51 
˝oﬁ_gp_íåy_¸óã
(
˝oﬁ_˘x_t
 
˘x
, c⁄° *
desc
, 
¥i_q_num
, 
su•íd
);

52 
˝oﬁ_gp_íåy_dñëe
(
˝oﬁ_˘x_t
 
˘x
, 
gid
);

53 
˝oﬁ_gp_íåy_id
(
˝oﬁ_˘x_t
 
˘x
, c⁄° *
desc
);

54 *
˝oﬁ_gp_íåy_desc
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, *
desc_buff
, 
size_t
 
Àn
);

55 
˝oﬁ_gp_íåy_°©
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
˘ask_group_°©
 *
g°©
);

56 
˝oﬁ_gp_íåy_°©_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_group_°©
 **
g°©
);

57 
˝oﬁ_gp_íåy_su•íd
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

58 
˝oﬁ_gp_íåy_su•íd_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

59 
˝oﬁ_gp_íåy_ªsume
(
˝oﬁ_˘x_t
 
˘x
, 
gid
);

60 
˝oﬁ_gp_íåy_ªsume_Æl
(
˝oﬁ_˘x_t
 
˘x
);

61 
˝oﬁ_gp_íåy_£èâr
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
scheduÀr_©å
 *
©å
);

62 
˝oﬁ_gp_íåy_gë©å
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
scheduÀr_©å
 *
©å
);

63 
˝oﬁ_gp_íåy_thrŸée_˘l
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
íabÀ
);

64 
˝oﬁ_gp_íåy_thrŸée_waô
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

65 
˝oﬁ_gp_íåy_ªmove_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
di•©ched_by_poﬁ
);

66 
˝oﬁ_gp_íåy_m¨k_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
lÊags
);

67 
˝oﬁ_gp_íåy_m¨k_cb
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
Visô_cb
 
wcb
, *
wcb_¨g
);

68 
˝oﬁ_gp_íåy_waô_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

69 
˝oﬁ_gp_íåy_waô_cb
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
Visô_cb
 
wcb
, *
wcb_¨g
, 
ms
);

70 
˝oﬁ_gp_íåy_waô_™y
(
˝oﬁ_˘x_t
 
˘x
, 
gid
, 
ms
);

73 
˝oﬁ_gp_¸óã_ö°™˚
(
˝oﬁ_gp_t
 **
p_gpoﬁ
, c⁄° *
desc
, 
max
, 
mö
, 
¥i_q_num
, 
su•íd
, 
lÊags
);

74 
˝oﬁ_gp_‰ì_ö°™˚
(
˝oﬁ_gp_t
 *
gpoﬁ
);

	@pool/gp/cpool_gp_struct.h

1 #i‚de‡
__CPOOL_GORUP_STRUCT_H__


2 
	#__CPOOL_GORUP_STRUCT_H__


	)

13 
	~"˝oﬁ_Á˘‹y.h
"

14 
	~"˝oﬁ_c‹e_°ru˘.h
"

15 
	~"˝oﬁ_com_¥iq.h
"

17 
	#M_GROUP
 "PGroup"

	)

19 
˘ask_åa˚
 
	t˘ask_åa˚_t
;

20 
˘ask_íåy
 
	t˘ask_íåy_t
;

21 
˝oﬁ_gp
 
	t˝oﬁ_gp_t
;

23 
	s˘ask_åa˚


30 c⁄° *
	mèsk_desc
;

37 (*
	mèsk_run
)(
˘ask
 *
	m±ask
);

44 (*
	mèsk_îr_h™dÀr
)(
˘ask
 *
	m±ask
, 
	meRós⁄s
);

51 *
	mèsk_¨g
;

56 
	mèsk_code
;

63 
li°_hód
 
	mlök
;

70 
˝oﬁ_t
 *
	mpoﬁ
;

75 
uöt8_t
 
	mf_sys_Êags
;

82 
uöt8_t
 
	m¥i
;

89 
uöt8_t
 
	m¥i_pﬁicy
;

96 
uöt8_t
 
	m¥iq
;

101 
uöt16_t
 
	mu£r_Êags
;

106 
uöt8_t
 
	mgid
;

115 
uöt8_t
 
	mf_°©
;

120 
uöt16_t
 
	mf_vmÊags
;

125 
uöt8_t
 
	mªf
;

130 
uöt8_t
 
	mf_globÆ_waô
;

135 
uöt32_t
 
	m£q
;

140 
uöt16_t
 *
	mpdëached
;

145 
uöt16_t
 
	mª£rved
;

150 
thªad_t
 *
	mthªad
;

155 
li°_hód
 
	måa˚_lök
;

157 
	#TASK_CAST_TRACE
(
±ask
Ë((
˘ask_åa˚_t
 *)’èsk))

	)

159 
	#SLOT_F_FREE
 0x01

	)

160 
	#SLOT_F_DESTROYING
 0x02

	)

161 
	#SLOT_F_THROTTLE
 0x04

	)

162 
	#SLOT_F_ACTIVE
 0x08

	)

164 
	s˘ask_íåy


169 
time_t
 
	m¸óãd
;

174 
	mid
;

179 
	mtsk_wªf
, 
	mev_wªf
;

184 *
	m«me
;

185 
	m«me_fixed
;

190 
	mlÊags
;

195 
˝oﬁ_gp_t
 *
	mpoﬁ
;

196 
	mödex
;

201 
	m¥iq_max_num
;

202 
˝riq_c⁄èöî_t
 
	mc
;

207 
	mn_qåa˚s
;

208 
li°_hód
 *
	måa˚_q
;

213 
	m∑u£d
;

214 
	mlimô_èsks
;

215 
	mlimô_∑øŒe_èsks
;

216 
	mª˚ive_bíifôs
;

218 
	m≈ídögs_eff
;

219 
˘ask_åa˚_t
 *
	mt›
;

224 
	m≈ídögs
;

225 
	mndi•©chögs
, 
	mƒu¬ögs
;

226 
	m¡asks_¥o˚s£d
;

231 *
	mev_√ed_nŸify
;

232 
	mtsk_√ed_nŸify
;

233 
	mtsk_™y_waô
;

234 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_èsk
;

235 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_ev
;

236 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_sync
;

239 
	s˝oﬁ_gp
 {

243 
˝oﬁ_c‹e_t
 *
	mc‹e
;

248 
	mlÊags
;

253 
	m¥iq_num
;

258 
	m£q
;

263 
	mthrŸée_⁄
;

264 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_evít
;

269 
	mev_wªf
;

270 
	mev_√ed_nŸify
;

271 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_ev
;

276 
	mtsk_wªf
;

277 
	mtsk_√ed_nŸify
;

278 
	mtsk_™y_waô
;

279 
	#MAX_WAIT_ENTRY
 64

	)

280 
	míåy_idx
, 
	míåy_idx_max
;

281 
˘ask_åa˚_t
 *
	mglbíåy
[
MAX_WAIT_ENTRY
];

282 
li°_hód
 
	mwq
;

283 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_èsk
;

288 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_com
;

293 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_sync
;

297 
	#IS_VALID_ENTRY
(
íåy
Ë(!((
SLOT_F_FREE
|
SLOT_F_DESTROYING
Ë& (íåy)->
lÊags
))

	)

298 
	mnum
, 
	mn‰ìs
;

299 
	ma˘ive_idx
, 
	m«˘ives_ok
;

300 
˘ask_íåy_t
 *
	míåy
, **
	ma˘íåy
;

305 
	mn
;

310 
	m≈ídögs
;

311 
	mndi•©chögs
;

312 
	mn_qåa˚s
;

313 
	m¡asks_¥o˚s£d0
;

318 
	m¡asks_≥ak
;

323 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_èsk_íåy
;

	@pool/gp/cpool_gp_wait.c

10 
	~"o•x_î∫o.h
"

11 
	~"msglog.h
"

12 
	~"timî.h
"

13 
	~"˝oﬁ_c‹e.h
"

14 
	~"˝oﬁ_waô.h
"

15 
	~"˝oﬁ_gp_waô.h
"

16 
	~"˝oﬁ_gp_waô_öã∫Æ.h
"

17 
	~"˝oﬁ_gp_íåy.h
"

19 
˝oﬁ_gp_wªque°î
 
	t˝oﬁ_gp_wªque°î_t
;

21 
	s˝oﬁ_gp_wªque°î
 {

25 
WWAKE_ªque°î
 
	mglbr
;

30 
li°_hód
 
	mŒök
;

31 
	mty≥
;

32 
	mid
;

33 
˝oﬁ_gp_t
 *
	mgpoﬁ
;

37 
	$__˝oﬁ_gp_evít_övoke
(
WWAKE_ªque°î
 *
r
)

39 
˝oﬁ_gp_wªque°î_t
 *
wr
 = (˝oﬁ_gp_wªque°î_à*)
r
;

40 
˘ask_íåy_t
 *
íåy
 = 
wr
->
gpoﬁ
->íåy + wr->
id
;

42 i‡(
r
->
b_öãºu±ed
)

45 
r
->
b_öãºu±ed
 = 1;

47 i‡(
wr
->
ty≥
 & 
WAIT_CLASS_ENTRY
)

48 i‡(
wr
->
ty≥
 & 
WAIT_TYPE_THROTTLE
)

49 
	`__˝oﬁ_gp_w_wakeup_íåy_thrŸéñ
(
íåy
);

51 
	`__˝oﬁ_gp_w_wakeup_íåy_èskl
(
íåy
);

53 
	`as£π
 (
wr
->
ty≥
 & 
WAIT_CLASS_POOL
);

55 i‡(
wr
->
ty≥
 & 
WAIT_TYPE_THROTTLE
)

56 
	`__˝oﬁ_gp_w_wakeup_poﬁ_thrŸéñ
(
wr
->
gpoﬁ
);

58 
	`__˝oﬁ_gp_w_wakeup_poﬁ_èskl
(
wr
->
gpoﬁ
);

60 
	}
}

62 
	#DECLARE_WREQUEST
(
r
, 
wty≥
, 
poﬁ
, 
íåy_id
) \

63 
˝oﬁ_gp_wªque°î
 
r
 = { \

65 
	`WWAKE_id
(), \

68 
__˝oﬁ_gp_evít_övoke
, \

69 
NULL
 \

72 
wty≥
, \

73 
íåy_id
, \

74 
poﬁ
\

75 }

	)

81 
	$__˝oﬁ_gp_w_waôl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
ty≥
, 
id
, *
¨g
, 
ms
)

83 
e
, 
idx
, 
¡sks
 = 
id
, 
sync
 = 0;

84 
˘ask_åa˚_t
 **
±asks
 = 
¨g
, *
±ask
 = 
ty≥
 & 
WAIT_TYPE_TASK
 ?árg : 
NULL
;

85 
˘ask_íåy_t
 *
íåy
 = 
NULL
;

86 
OSPX_±hªad_c⁄d_t
 *
c⁄d
 = 
NULL
;

91 
idx0
, 
ids
[100] = {0}, 
ids_idx
 = 0;

93 i‡(
ms
 == 0)

94  
eERR_TIMEDOUT
;

96 
	`as£π
 (!(
ty≥
 & 
WAIT_CLASS_POOL
 &&Åy≥ & 
WAIT_CLASS_ENTRY
));

97 
	`as£π
 (
ty≥
 & (~(
WAIT_CLASS_POOL
|
WAIT_CLASS_ENTRY
)));

102 
	`as£π
 (!(
ty≥
 & 
WAIT_CLASS_POOL
 &&Åy≥ & 
WAIT_TYPE_TASK
));

104 i‡(
ty≥
 & 
WAIT_CLASS_POOL
) {

105 i‡(
ty≥
 & 
WAIT_TYPE_THROTTLE
) {

106 ++ 
gpoﬁ
->
ev_wªf
;

107 
gpoﬁ
->
ev_√ed_nŸify
 = 1;

108 
c⁄d
 = &
gpoﬁ
->
c⁄d_ev
;

110 } i‡(
ty≥
 & (
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ALL
)) {

111 
gpoﬁ
->
tsk_√ed_nŸify
 = 1;

112 i‡(
WAIT_TYPE_TASK_ANY
 & 
ty≥
)

113 
gpoﬁ
->
tsk_™y_waô
 = 1;

114 
c⁄d
 = &
gpoﬁ
->
c⁄d_èsk
;

116 } i‡(
ty≥
 & 
WAIT_TYPE_TASK_ANY2
) {

117 
idx
=0; idx<
¡sks
; idx++) {

121 i‡(!
±asks
[
idx
])

127 i‡(!
±asks
[
idx
]->
f_°©
)

134 i‡(
±asks
[
idx
]->
poﬁ
->
˘x
 !(*)
gpoﬁ
)

135  
eTASK_ERR_DESTINATION
;

140 i‡(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
id
].
lÊags
)

141  
eERR_GROUP_NOT_FOUND
;

142 
íåy
 = 
gpoﬁ
->íåy + 
±asks
[
idx
]->
gid
;

148 
	`as£π
 (
±asks
[
idx
]->
ªf
 || !(
eTASK_VM_F_CACHE
 &Öèsks[idx]->
f_vmÊags
));

150 ++ 
±asks
[
idx
]->
ªf
;

151 
±asks
[
idx
]->
f_globÆ_waô
 = 1;

153 
	`as£π
 (
ids_idx
 < (
ids
)/(*ids));

158 
idx0
=0; idx0<
ids_idx
 && 
ids
[idx0] !
±asks
[
idx
]->
gid
; idx0++);

159 i‡(
idx0
 =
ids_idx
) {

160 ++ 
íåy
->
tsk_wªf
;

161 
íåy
->
tsk_√ed_nŸify
 = 1;

162 
ids
[
ids_idx
++] = 
±asks
[
idx
]->
gid
;

169 i‡(
gpoﬁ
->
íåy_idx
 + 1 <gpoﬁ->
íåy_idx_max
) {

170 
gpoﬁ
->
glbíåy
[gpoﬁ->
íåy_idx
 ++] = 
±asks
[
idx
];

171 i‡(
gpoﬁ
->
íåy_idx
 =gpoﬁ->
íåy_idx_max
)

172 
	`MSG_log
(
M_WAIT
, 
LOG_WARN
,

174 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, gpoﬁ->
íåy_idx_max
);

181 
gpoﬁ
->
tsk_√ed_nŸify
 = 1;

182 
c⁄d
 = &
gpoﬁ
->
c⁄d_èsk
;

185 } i‡(
ty≥
 & 
WAIT_CLASS_ENTRY
) {

189 i‡(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
id
].
lÊags
)

190  
eERR_GROUP_NOT_FOUND
;

191 
íåy
 = 
gpoﬁ
->íåy + 
id
;

194 i‡(
ty≥
 & 
WAIT_TYPE_THROTTLE
) {

195 ++ 
íåy
->
ev_wªf
;

196 *
íåy
->
ev_√ed_nŸify
 = 1;

197 
c⁄d
 = 
íåy
->
c⁄d_ev
;

199 } i‡(
ty≥
 & (
WAIT_TYPE_TASK
|
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ALL
)) {

200 
íåy
->
tsk_√ed_nŸify
 = 1;

201 ++ 
íåy
->
tsk_wªf
;

202 i‡(
WAIT_TYPE_TASK_ANY
 & 
ty≥
)

203 
íåy
->
tsk_™y_waô
 = 1;

204 
c⁄d
 = 
íåy
->
c⁄d_èsk
;

210 i‡(
ty≥
 & 
WAIT_TYPE_TASK
)

211 ++ 
±ask
->
ªf
;

216 
ids
[
ids_idx
 ++] = 
íåy
->
id
;

220 i‡(!
c⁄d
) {

221 
	`MSG_log
(
M_WAIT
, 
LOG_ERR
,

223 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
ty≥
, 
id
);

224  
eERR_NSUPPORT
;

227 i‡(
ty≥
 & (
WAIT_TYPE_TASK
|
WAIT_TYPE_TASK_ALL
|
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ANY2
))

228 ++ 
gpoﬁ
->
tsk_wªf
;

231 
	`DECLARE_WREQUEST
(
r
, 
ty≥
, 
gpoﬁ
, 
id
);

236 
	`WWAKE_add
(&
r
.
glbr
);

238 
	`li°_add_èû
(&
r
.
Œök
, &
gpoﬁ
->
wq
);

239 i‡(
ms
 > 0)

240 
e
 = 
	`OSPX_±hªad_c⁄d_timedwaô
(
c⁄d
, &
gpoﬁ
->
c‹e
->
mut
, 
ms
);

242 
e
 = 
	`OSPX_±hªad_c⁄d_waô
(
c⁄d
, &
gpoﬁ
->
c‹e
->
mut
);

243 
	`li°_dñ
(&
r
.
Œök
);

245 
	`WWAKE_îa£_dúe˘
(&
r
.
glbr
);

250 i‡(
r
.
glbr
.
b_öãºu±ed
)

251 
e
 = 
eERR_INTERRUPTED
;

253 i‡(
ETIMEDOUT
 =
e
)

254 
e
 = 
eERR_TIMEDOUT
;

256 i‡(
e
) {

257 
	`MSG_log
(
M_WAIT
, 
LOG_ERR
,

259 
	`OSPX_sys_°ªº‹
(
e
));

260 
e
 = 
eERR_OTHER
;

263 i‡(
ty≥
 & (
WAIT_TYPE_TASK
|
WAIT_TYPE_TASK_ALL
|
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ANY2
))

264 -- 
gpoﬁ
->
tsk_wªf
;

271 i‡(
ty≥
 & 
WAIT_CLASS_POOL
) {

273 i‡(
ty≥
 & 
WAIT_TYPE_THROTTLE
)

274 -- 
gpoﬁ
->
ev_wªf
;

276 i‡(
ty≥
 & 
WAIT_TYPE_TASK_ANY2
) {

277 
idx
=0; idx<
¡sks
; idx++) {

278 i‡(!
±asks
[
idx
])

281 
±ask
 = 
±asks
[
idx
];

286 i‡(!
±ask
->
f_°©
)

287 
e
 = 0;

289 
	`as£π
 (
±ask
->
poﬁ
->
˘x
 =(*)
gpoﬁ
 &&Öèsk->
ªf
 > 0);

294 
sync
 +(0 =-- 
±ask
->
ªf
 &&Öèsk->
f_vmÊags
 & 
eTASK_VM_F_DETACHED
);

298 } i‡(
ty≥
 & 
WAIT_CLASS_ENTRY
) {

299 
íåy
 = 
gpoﬁ
->íåy + 
id
;

301 i‡(
ty≥
 & 
WAIT_TYPE_THROTTLE
)

302 -- 
íåy
->
ev_wªf
;

304 i‡(
ty≥
 & 
WAIT_TYPE_TASK
) {

305 
	`as£π
 (
±ask
->
ªf
 > 0);

310 
sync
 +(0 =-- 
±ask
->
ªf
 &&Öèsk->
f_vmÊags
 & 
eTASK_VM_F_DETACHED
);

314 
idx0
=0; idx0<
ids_idx
; idx0++) {

315 
	`as£π
 (
ids
[
idx0
] >0 && ids[idx0] < 
gpoﬁ
->
num
);

317 
íåy
 = 
gpoﬁ
->íåy + 
ids
[
idx0
];

319 
	`as£π
 (
íåy
->
tsk_wªf
 > 0);

320 -- 
íåy
->
tsk_wªf
;

327 i‡(
ty≥
 & 
WAIT_CLASS_ENTRY
)

328 
sync
 +!
íåy
->
tsk_wªf
 && !íåy->
ev_wªf
 && 
SLOT_F_DESTROYING
 &É¡ry->
lÊags
;

334 i‡(
ty≥
 & 
WAIT_CLASS_POOL
)

335 
sync
 +!
gpoﬁ
->
ev_wªf
 && !gpoﬁ->
tsk_wªf
 && 
	`˝oﬁ_c‹e_°©u¶
(gpoﬁ->
c‹e
Ë& 
CORE_F_de°royög
;

337 i‡(
sync
)

338 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
gpoﬁ
->
c⁄d_sync
);

340  
e
;

341 
	}
}

344 
	$__˝oﬁ_gp_w_övoke_r
(
˝oﬁ_gp_wªque°î_t
 *
r
)

346 
idx
 = 0;

347 
˝oﬁ_gp_t
 *
gpoﬁ
 = 
r
->gpool;

349 i‡(
r
->
glbr
.
b_öãºu±ed
)

352 
r
->
glbr
.
b_öãºu±ed
 = 1;

354 i‡(
r
->
ty≥
 & 
WAIT_CLASS_ENTRY
) {

355 
˘ask_íåy_t
 *
íåy
 = 
NULL
;

360 
idx
=0; idx<
gpoﬁ
->
num
; idx++) {

361 i‡(
SLOT_F_FREE
 & 
gpoﬁ
->
íåy
[
idx
].
lÊags
)

364 i‡(
gpoﬁ
->
íåy
[
idx
].
id
 =
r
->id) {

365 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

369 
	`as£π
 (
idx
 !
gpoﬁ
->
num
);

371 i‡(
r
->
ty≥
 & 
WAIT_TYPE_THROTTLE
)

372 
	`__˝oﬁ_gp_w_wakeup_íåy_thrŸéñ
(
íåy
);

374 i‡(
r
->
ty≥
 & (
WAIT_TYPE_TASK
|
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ALL
))

375 
	`__˝oﬁ_gp_w_wakeup_íåy_èskl
(
íåy
);

377 } i‡(
r
->
ty≥
 & 
WAIT_CLASS_POOL
) {

378 i‡(
WAIT_TYPE_THROTTLE
 & 
r
->
ty≥
)

379 
	`__˝oﬁ_gp_w_wakeup_poﬁ_thrŸéñ
(
r
->
gpoﬁ
);

381 i‡((
WAIT_TYPE_ALL
|
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ANY2
Ë& 
r
->
ty≥
)

382 
	`__˝oﬁ_gp_w_wakeup_poﬁ_èskl
(
r
->
gpoﬁ
);

384 
	}
}

387 
	$˝oﬁ_gp_w_wakeup
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
ty≥
, 
id
)

389 
n
 = 0;

390 
˝oﬁ_gp_wªque°î_t
 *
r
, *
ƒ
;

392 i‡(
ty≥
 =
WAIT_TYPE_ALL
) {

393 
	`MSG_log
(
M_WAIT
, 
LOG_INFO
,

395 
gpoﬁ
->
c‹e
->
desc
, gpool);

397 } i‡(
ty≥
 & 
WAIT_CLASS_POOL
 &&Åy≥ & 
WAIT_TYPE_TASK
) {

398 
	`MSG_log
(
M_WAIT
, 
LOG_WARN
,

400 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
ty≥
, 
id
);

405 
	#MATCH
(
r
, 
ty≥
Ë(
WAIT_TYPE_ALL
 =ty≥)

	)

406 
	#ENTRY_MATCH
(
r
, 
ty≥
Ë—y≥ & 
WAIT_CLASS_ENTRY
 &&Ñ->
id
 == id && \

407 (
ty≥
 & (
WAIT_TYPE_ENTRY_ALL
 & ~
WAIT_CLASS_ENTRY
)))

	)

408 
	#POOL_MATCH
(
r
, 
ty≥
Ë—y≥ & 
WAIT_CLASS_POOL
 &&Åype & \

409 (
WAIT_TYPE_POOL_ALL
 &~(
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK
)))

	)

415 
	`OSPX_±hªad_muãx_lock
(&
gpoﬁ
->
c‹e
->
mut
);

416 
	`li°_f‹_óch_íåy_ß„
(
r
, 
ƒ
, &
gpoﬁ
->
wq
, 
˝oﬁ_gp_wªque°î_t
, 
Œök
) {

417 i‡(
	`MATCH
(
r
, 
ty≥
) ||

418 (
r
->
ty≥
 & 
WAIT_CLASS_ENTRY
 && 
	`ENTRY_MATCH
(r,Åype)) ||

419 (
r
->
ty≥
 & 
WAIT_CLASS_POOL
 && 
	`POOL_MATCH
(r,Åype))) {

420 
	`as£π
 (
r
->
gpoﬁ
 == gpool);

421 
	`__˝oﬁ_gp_w_övoke_r
(
r
);

422 ++ 
n
;

425 
	`OSPX_±hªad_muãx_u∆ock
(&
gpoﬁ
->
c‹e
->
mut
);

427  
n
;

428 
	}
}

431 
	$__˝oﬁ_gp_w_waô_cbl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
íåy_id
, 
ty≥
, 
Visô_cb
 
cb
, *
¨g
, 
ms
)

433 
idx
, 
e
 = 0, 
times
 = 0, 
ok
 = 0;

434 
íåy_de°royög_w¨n
 = 0;

435 
poﬁ_de°royög_w¨n
 = 0;

436 
uöt64_t
 
¡asks_¥o˚s£d_¥ev
 = 0;

437 
˘ask_åa˚_t
 *
±ask
, *
≥ek
 = 
NULL
, **
±asks
 = NULL;

438 
˘ask_íåy_t
 *
íåy
 = 
NULL
;

443 *
w¨g
 = 
NULL
;

444 
wty≥
 = 
ty≥
;

449 
uöt64_t
 
us_°¨t_˛ock
 = 
	`us_°¨å
();

454 i‡(
ty≥
 & 
WAIT_TYPE_TASK
) {

455 
ok
 = (
¨g
 || 
cb
 !
NULL
);

456 
w¨g
 = 
≥ek
 = 
¨g
;

458 } i‡(
ty≥
 & 
WAIT_TYPE_TASK_ANY2
) {

459 
	`as£π
 (
ty≥
 =(
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ANY2
Ë&& 
¨g
);

461 
w¨g
 = 
±asks
 = 
¨g
;

468 i‡(!(
CORE_F_¸óãd
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
))) {

469 i‡(
CORE_F_de°royög
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
)) {

470 i‡(!
poﬁ_de°royög_w¨n
) {

471 
	`MSG_log
(
M_WAIT
, 
LOG_INFO
,

473 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy_id
, 
ty≥
);

474 
poﬁ_de°royög_w¨n
 = 1;

477 } i‡(
CORE_F_de°royed
 & 
	`˝oﬁ_c‹e_°©u¶
(
gpoﬁ
->
c‹e
)) {

478 
	`MSG_log
(
M_WAIT
, 
LOG_INFO
,

480 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
ty≥
);

485 
	`MSG_log
(
M_WAIT
, 
LOG_ERR
,

487 
gpoﬁ
, 
ty≥
);

489  
eERR_OTHER
;

495 i‡(
WAIT_CLASS_ENTRY
 & 
ty≥
) {

496 
íåy
 = 
gpoﬁ
->íåy + 
íåy_id
;

498 i‡(
íåy_id
 > 
gpoﬁ
->
num
 || 
íåy
->
lÊags
 & 
SLOT_F_FREE
) {

499 
	`MSG_log
(
M_WAIT
, 
LOG_WARN
,

501 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy_id
, 
	`__˝oﬁ_gp_íåy_dum∂
(gpoﬁ, 
NULL
, 0));

505 i‡(
times
 && 
SLOT_F_DESTROYING
 & 
íåy
->
lÊags
) {

506 i‡(!
íåy_de°royög_w¨n
) {

507 
	`MSG_log
(
M_WAIT
, 
LOG_WARN
,

509 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
íåy
->
«me
, 
íåy_id
, 
ty≥
);

510 
íåy_de°royög_w¨n
 = 1;

521 i‡(
WAIT_TYPE_TASK
 & 
ty≥
 && 
≥ek
 && !≥ek->
f_°©
) {

525 i‡(!
≥ek
->
ªf
 &&Öìk->
f_vmÊags
 & 
eTASK_VM_F_CACHE
)

526 
	`smˇche_addl
(
gpoﬁ
->
c‹e
->
ˇche_èsk
, 
≥ek
);

527 i‡(!
cb
)

529 
≥ek
 = 
NULL
;

532 i‡(!
≥ek
) {

533 
wty≥
 = 
ty≥
;

534 
ty≥
) {

535 (
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK
):

539 
	`li°_f‹_óch_íåy
(
±ask
, 
íåy
->
åa˚_q
, 
˘ask_åa˚_t
, 
åa˚_lök
) {

540 i‡(
	`cb
(
	`TASK_CAST_FAC
(
±ask
), 
¨g
)) {

541 
w¨g
 = 
≥ek
 = 
±ask
;

546 (
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK_ALL
):

547 i‡(!
íåy
->
n_qåa˚s
)

550 (
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK_ANY
):

551 i‡(!
times
)

552 
¡asks_¥o˚s£d_¥ev
 = 
íåy
->
¡asks_¥o˚s£d
;

553 i‡(
¡asks_¥o˚s£d_¥ev
 !
íåy
->
¡asks_¥o˚s£d
)

556 (
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK
):

560 
idx
=0; idx<
gpoﬁ
->
num
 && !
≥ek
; idx++) {

561 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

563 i‡(
íåy
->
lÊags
 & 
SLOT_F_FREE
 || !íåy->
n_qåa˚s
)

566 
	`li°_f‹_óch_íåy
(
±ask
, 
íåy
->
åa˚_q
, 
˘ask_åa˚_t
, 
åa˚_lök
) {

567 i‡(
	`cb
(
	`TASK_CAST_FAC
(
±ask
), 
¨g
)) {

568 
w¨g
 = 
≥ek
 = 
±ask
;

569 
íåy_id
 = 
≥ek
->
gid
;

574 
wty≥
 = 
WAIT_CLASS_ENTRY
|
WAIT_TYPE_TASK
;

579 i‡(!
≥ek
)

582 (
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ANY
): {

583 
uöt64_t
 
¡asks_¥o˚s£d
 = 0;

589 
idx
=0; idx<
gpoﬁ
->
num
 && !
≥ek
; idx++) {

590 
íåy
 = 
gpoﬁ
->íåy + 
idx
;

592 i‡(
íåy
->
lÊags
 & 
SLOT_F_FREE
)

594 
	`as£π
 (
íåy
->
¡asks_¥o˚s£d
 >= 0);

595 
¡asks_¥o˚s£d
 +
íåy
->ntasks_processed;

597 
¡asks_¥o˚s£d
 +
gpoﬁ
->
¡asks_¥o˚s£d0
;

598 i‡(!
times
)

599 
¡asks_¥o˚s£d_¥ev
 = 
¡asks_¥o˚s£d
;

600 i‡(
¡asks_¥o˚s£d_¥ev
 !
¡asks_¥o˚s£d
)

604 (
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ANY2
):

605 
idx
=0, 
ok
=0; idx<
íåy_id
; idx++) {

606 i‡(!
±asks
[
idx
] || (±asks[idx]->
f_°©
 &&Öèsks[idx]->
poﬁ
->
˘x
 !(*)
gpoﬁ
))

609 i‡(!
±asks
[
idx
]->
f_°©
)

615 
íåy
 = 
gpoﬁ
->íåy + 
±asks
[
idx
]->
gid
;

616 i‡(
±asks
[
idx
]->
gid
 < 0 ||Öèsks[idx]->gid > 
gpoﬁ
->
num
 ||

617 !
	`IS_VALID_ENTRY
(
íåy
)) {

618 
	`MSG_log
(
M_WAIT
, 
LOG_WARN
,

621 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
±asks
[
idx
]->
èsk_desc
,Öèsks[idx],Öèsks[idx]->
gid
);

622  
eERR_GROUP_NOT_FOUND
;

624 ++ 
ok
;

627 i‡(!
ok
) {

628 
	`MSG_log
(
M_WAIT
, 
LOG_WARN
,

630 
gpoﬁ
->
c‹e
->
desc
, gpoﬁ, 
times
);

634 (
WAIT_CLASS_POOL
|
WAIT_TYPE_TASK_ALL
):

641 i‡(!
gpoﬁ
->
n_qåa˚s
)

645 
	`as£π
 (0);

648 ++ 
times
;

653 i‡(
ms
 >= 0) {

654 i‡(
ms
 > 0)

655 
ms
 -
	`us_ídr
(
us_°¨t_˛ock
) / 1000;

656 i‡(
ms
 <= 0)

657 
e
 = 
eERR_TIMEDOUT
;

660 i‡(
e
)

661  
e
;

662 
e
 = 
	`__˝oﬁ_gp_w_waôl
(
gpoﬁ
, 
wty≥
, 
íåy_id
, 
w¨g
, 
ms
);

664 
	}
}

	@pool/gp/cpool_gp_wait.h

1 #i‚de‡
__CPOOL_GP_WAIT_H__


2 
	#__CPOOL_GP_WAIT_H__


	)

4 
	~"˝oﬁ_gp_°ru˘.h
"

22 
	#WAIT_CLASS_ENTRY
 0x0001

	)

25 
	#WAIT_CLASS_POOL
 0x0002

	)

27 
	#WAIT_CLASS_ALL
 (
WAIT_CLASS_ENTRY
|
WAIT_CLASS_POOL
)

	)

34 
	#WAIT_TYPE_TASK
 0x0010

	)

37 
	#WAIT_TYPE_TASK_ANY
 0x0020

	)

40 
	#WAIT_TYPE_TASK_ALL
 0x0040

	)

43 
	#WAIT_TYPE_THROTTLE
 0x0080

	)

47 
	#WAIT_TYPE_TASK_ANY2
 0x0400

	)

49 
	#WAIT_TYPE_ENTRY_ALL
 (
WAIT_TYPE_TASK
|
WAIT_TYPE_TASK_ANY
|
WAIT_TYPE_TASK_ALL
|\

50 
WAIT_TYPE_THROTTLE
)

	)

51 
	#WAIT_TYPE_POOL_ALL
 (
WAIT_TYPE_ENTRY_ALL
|
WAIT_TYPE_TASK_ANY2
)

	)

52 
	#WAIT_TYPE_ALL
 (
WAIT_CLASS_ALL
|
WAIT_TYPE_ENTRY_ALL
|
WAIT_TYPE_POOL_ALL
)

	)

61 
˝oﬁ_gp_w_wakeup
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
ty≥
, 
id
);

	@pool/gp/cpool_gp_wait_internal.h

1 #i‚de‡
__CPOOL_GP_WAIT_INTERNAL_H__


2 
	#__CPOOL_GP_WAIT_INTERNAL_H__


	)

13 
	~"˝oﬁ_gp_waô.h
"

18 
__˝oﬁ_gp_w_waô_cbl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
íåy_id
, 
ty≥
, 
Visô_cb
 
cb
, *
¨g
, 
ms
);

23 
__˝oﬁ_gp_w_waôl
(
˝oﬁ_gp_t
 *
gpoﬁ
, 
ty≥
, 
íåy_id
, *
¨g
, 
ms
);

28 
	#__˝oﬁ_gp_w_waôl_utûs
(
gpoﬁ
, 
ty≥
, 
id
, 
¨g
, 
ms
, 
e
, 
us_°¨t_˛ock
, 
ªady_judge
) \

30 
uöt64_t
 
__us_˛ock
 = (
us_°¨t_˛ock
); \

32 (
e
)=0;;) { \

33 
ªady_judge
 \

35 i‡((
ms
) > 0) { \

36 (
ms
Ë-
	`us_ídr
(
__us_˛ock
) / 1000; \

37 i‡((
ms
)<= 0) {\

38 (
ms
) = 0; \

39 (
e
Ë
eERR_TIMEDOUT
; \

42 i‡(
e
) \

47 
e
 = 
	`__˝oﬁ_gp_w_waôl
(
gpoﬁ
, 
ty≥
, 
id
, 
¨g
, 
ms
); \

49 } 0)

	)

51 
	#__åy_övoke
(
p_√ed_nŸify
, 
pc⁄d
, 
ex¥
) \

53 i‡(*(
p_√ed_nŸify
)) {\

54 *(
p_√ed_nŸify
) = 0; \

55 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
pc⁄d
); \

56 
ex¥
 \

58 } 0)

	)

63 
	#__˝oﬁ_gp_w_wakeup_poﬁ_thrŸéñ
(
poﬁ
) \

64 
	`__åy_övoke
(&(
poﬁ
)->
ev_√ed_nŸify
, &’oﬁ)->
c⁄d_ev
, ;)

	)

69 
	#__˝oﬁ_gp_w_wakeup_íåy_thrŸéñ
(
íåy
) \

70 
	`__åy_övoke
((
íåy
)->
ev_√ed_nŸify
, (íåy)->
c⁄d_ev
, ;)

	)

77 
	#__˝oﬁ_gp_w_wakeup_poﬁ_èskl
(
p
) \

78 dÿ{(
p
)->
tsk_√ed_nŸify
 = 0; \

79 (
p
)->
tsk_™y_waô
 = 0; \

80 (
p
)->
íåy_idx
) { \

81 -- (
p
)->
íåy_idx
; \

82 i‡((
p
)->
glbíåy
[’)->
íåy_idx
]->
poﬁ
->
˘x
 == (*)(p)) \

83 (
p
)->
glbíåy
[’)->
íåy_idx
]->
f_globÆ_waô
 = 0; \

85 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&(
p
)->
c⁄d_èsk
);\

86 } 0)

	)

93 
	#__˝oﬁ_gp_w_wakeup_íåy_èskl
(
ít
) \

94 dÿ{ 
___idx0
 = 0; \

95 ;
___idx0
<(
ít
)->
poﬁ
->
num
; ___idx0++) { \

96 i‡(!(
SLOT_F_FREE
 & (
ít
)->
poﬁ
->
íåy
[
___idx0
].
lÊags
)) {\

97 (
ít
)->
poﬁ
->
íåy
[
___idx0
].
tsk_√ed_nŸify
 = 0; \

98 (
ít
)->
poﬁ
->
íåy
[
___idx0
].
tsk_™y_waô
 = 0; \

101 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
((
ít
)->
c⁄d_èsk
); \

102 } 0)

	)

111 
	#__˝oﬁ_gp_w_wakeup_èskl
(
poﬁ
, 
íåy
, 
±ask
) \

116 i‡((
poﬁ
)->
tsk_wªf
) {\

120 i‡((
íåy
)->
tsk_√ed_nŸify
 && ((
±ask
)->
ªf
 || (íåy)->
tsk_™y_waô
 || !”¡ry)->
n_qåa˚s
)) {\

121 i‡((
±ask
)->
f_globÆ_waô
) {\

125 (
poﬁ
)->
tsk_√ed_nŸify
 = 1;\

126 (
poﬁ
)->
tsk_™y_waô
 = 1; \

128 
	`__˝oﬁ_gp_w_wakeup_íåy_èskl
(
íåy
); \

133 i‡((
poﬁ
)->
tsk_√ed_nŸify
 && (’oﬁ)->
tsk_™y_waô
 || !’oﬁ)->
n_qåa˚s
)) \

134 
	`__˝oﬁ_gp_w_wakeup_poﬁ_èskl
(
poﬁ
); \

136 } 0)

	)

	@pool/rt/cpool_rt_core_method.c

10 
	~"o•x_î∫o.h
"

11 
	~"msglog.h
"

12 
	~"˝oﬁ_Á˘‹y.h
"

13 
	~"˝oﬁ_com_öã∫Æ.h
"

14 
	~"˝oﬁ_π_öã∫Æ.h
"

15 
	~"˝oﬁ_π_mëhod.h
"

16 
	~"˝oﬁ_c‹e_thªad_°©us.h
"

19 
	$˝oﬁ_π_c‹e_˘‹
(*
¥iv
)

21 
e
;

22 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

23 
ˇche_©å_t
 
©å
;

25 
	`MSG_log
(
M_RT
, 
LOG_INFO
,

27 
πp
->
c‹e
->
desc
, 
¥iv
,Ñç->
lÊags
);

29 i‡((
e
=
	`OSPX_±hªad_c⁄d_öô
(&
πp
->
c⁄d_com
))) {

30 
	`MSG_log2
(
M_RT
, 
LOG_ERR
,

32 
	`OSPX_sys_°ªº‹
(
e
));

35 
πp
->
c⁄d_sync
 =Ñç->
c⁄d_evít
 =Ñç->
c⁄d_èsk
 = &πp->
c⁄d_com
;

36 
πp
->
n
 = 5;

41 
	`˝oﬁ_c‹e_adju°_ˇchñ
(
πp
->
c‹e
, 
NULL
, &
©å
);

42 i‡(
	`objpoﬁ_˘‹2
(&
πp
->
c‹e
->
objp_èsk
, "FObjp-π-loˇl-ˇche", (
˘ask_t
), 0,

43 
©å
.
nGC_ˇche
, 
NULL
)) {

44 
	`MSG_log2
(
M_CORE
, 
LOG_ERR
,

46 
‰ì_c⁄d_com
;

48 
πp
->
c‹e
->
ˇche_èsk
 = 
	`objpoﬁ_gë_ˇche
(&πp->c‹e->
objp_èsk
);

53 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
) {

54 
πp
->
¥iq_num
 = 
	`max
(rtp->priq_num, 1);

55 
πp
->
¥iq_num
 = 
	`mö
(rtp->priq_num, 100);

57 i‡(!(
πp
->
¥iq
 = 
	`ˇŒoc
(1,Ñç->
¥iq_num
 * (
˝riq_t
)))) {

58 
	`MSG_log2
(
M_RT
, 
LOG_ERR
,

61 
‰ì_ˇche
;

63 
	`__˝oﬁ_com_¥iq_öô
(&
πp
->
c
,Ñç->
¥iq
,Ñç->
¥iq_num
, &πp->
ªady_q
);

66 
	`INIT_LIST_HEAD
(&
πp
->
ªady_q
);

70 
‰ì_ˇche
:

71 
	`objpoﬁ_dt‹
(&
πp
->
c‹e
->
objp_èsk
);

72 
πp
->
c‹e
->
ˇche_èsk
 = 
NULL
;

74 
‰ì_c⁄d_com
:

75 
	`OSPX_±hªad_c⁄d_de°roy
(&
πp
->
c⁄d_com
);

78 
	}
}

81 
	$˝oﬁ_π_c‹e_dt‹
(*
¥iv
)

83 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

85 
	`MSG_log
(
M_RT
, 
LOG_INFO
,

87 
πp
->
c‹e
->
desc
, 
¥iv
);

89 
	`as£π
 (!
πp
->
tsk_wªf
 && !πp->
ev_wªf
);

91 
	`objpoﬁ_dt‹
(&
πp
->
c‹e
->
objp_èsk
);

92 
	`OSPX_±hªad_c⁄d_de°roy
(&
πp
->
c⁄d_com
);

93 i‡(
πp
->
¥iq
)

94 
	`‰ì
(
πp
->
¥iq
);

95 
	}
}

98 
	$˝oﬁ_π_c‹e_nŸifyl
(*
¥iv
, 
eEvít_t
 
evíts
)

100 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

102 #i‚de‡
NDEBUG


103 
	`MSG_log
(
M_RT
, 
LOG_TRACE
,

105 
evíts
);

108 i‡(
evíts
 & 
eEvít_F_‰ì
) {

109 
	`as£π
 (
	`˝oﬁ_c‹e_Æl_d⁄ñ
(
πp
->
c‹e
));

111 i‡(
πp
->
tsk_√ed_nŸify
 && !πp->
tsks_hñd_by_di•©chî
) {

112 
πp
->
tsk_√ed_nŸify
 = 0;

113 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_èsk
);

116 i‡(
evíts
 =
eEvít_F_‰ì
)

120 i‡(
evíts
 & 
eEvít_F_c‹e_ªsume
) {

121 i‡(!(
πp
->
lÊags
 & 
eFUNC_F_DYNAMIC_THREADS
Ë&&Ñç->
c‹e
->
≈ídögs
)

122 
	`˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
πp
->
c‹e
,Ñç->c‹e->
≈ídögs
);

125 i‡(
evíts
 & 
eEvít_F_thªad
) {

126 i‡(!(
πp
->
lÊags
 & 
eFUNC_F_DYNAMIC_THREADS
))

127 
πp
->
c‹e
->
möthªads
 =Ñç->c‹e->
maxthªads
;

130 i‡(
evíts
 & 
eEvít_F_de°royög
) {

131 
	`LIST_HEAD
(
rmq
);

136 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_evít
);

142 i‡(
πp
->
c‹e
->
∑u£d
 &&Ñç->c‹e->
≈ídögs
) {

143 
πp
->
c‹e
->
n_qdi•©chs
 +πp->c‹e->
≈ídögs
;

145 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
)

146 
	`__˝oﬁ_π_¥iq_ªmove_Æl
(
πp
, &
rmq
);

148 
	`__˝oﬁ_π_ªmove_Æl
(
πp
, &
rmq
);

150 
	`__˝oﬁ_com_èsk_m¨k_≠≥nd
(&
rmq
, 
eTASK_VM_F_POOL_DESTROYING
|
eTASK_VM_F_REMOVE_BYPOOL
);

151 
	`li°_•li˚
(&
rmq
, &
πp
->
c‹e
->
di•©ch_q
);

152 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
πp
->
c‹e
, 
NULL
);

156 i‡(
evíts
 & 
eEvít_F_shutdown
) {

160 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(&
πp
->
c⁄d_com
);

161 ;
πp
->
tsk_wªf
 ||Ñç->
ev_wªf
;) {

162 ++ 
πp
->
ªf_sync
;

163 
	`OSPX_±hªad_c⁄d_waô
(
πp
->
c⁄d_sync
, &πp->
c‹e
->
mut
);

164 -- 
πp
->
ªf_sync
;

167 
	}
}

169 
ölöe
 

170 
	$__˝oﬁ_π_gëèsk_po°
(
˝oﬁ_π_t
 *
πp
, 
thªad_t
 *
£lf
, 
˘ask_t
 *
±ask
)

175 
±ask
->
f_°©
 = 
eTASK_STAT_F_SCHEDULING
;

176 
£lf
->
cuºít_èsk
 = 
	`TASK_CAST_CORE
(
±ask
);

177 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_NORMAL
;

179 #i‡!
	`deföed
(
NDEBUG
Ë&& deföed(
HAVE_PRCTL
)

180 i‡(
±ask
->
èsk_desc
)

181 
	`¥˘l
(
PR_SET_NAME
, 
±ask
->
èsk_desc
);

184 
	}
}

187 
	$˝oﬁ_π_c‹e_dy«mic_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
)

189 
˘ask_t
 *
±ask
;

190 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

195 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

196 i‡(
πp
->
c‹e
->
n_qdi•©chs
)

197  
	`__˝oﬁ_com_gë_di•©ch_èskl2
(
πp
->
c‹e
, 
£lf
,Ñç->
n
);

203 i‡(
πp
->
c‹e
->
∑u£d
 || !πp->c‹e->
≈ídögs
)

210 
	`as£π
 (!
	`li°_em±y
(&
πp
->
ªady_q
));

211 -- 
πp
->
c‹e
->
≈ídögs
;

217 
±ask
 = 
	`li°_fú°_íåy
(&
πp
->
ªady_q
, 
˘ask_t
, 
lök
);

218 
	`__li°_dñ
(
±ask
->
lök
.
¥ev
,Öèsk->lök.
√xt
);

223 #i‚de‡
NDEBUG


224 
__cuπask
 = 
	`TASK_CAST_CORE
(
±ask
);

229 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
πp
->
c‹e
, 
£lf
, 
THREAD_STAT_RUN
);

230 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

232 
	`__˝oﬁ_π_gëèsk_po°
(
πp
, 
£lf
, 
±ask
);

234 
	}
}

237 
	$˝oﬁ_π_c‹e_îr_ªas⁄s
(
basic_èsk_t
 *
±ask
)

239 
	`as£π
 (
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 & 
eTASK_VM_F_REMOVE_FLAGS
);

241 i‡(
	`likñy
(!(
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 & 
eTASK_VM_F_POOL_DESTROYING
)))

242  
eEº_ªmoved_byu£r
;

247 
	`TASK_CAST_FAC
(
±ask
)->
f_vmÊags
 &~
eTASK_VM_F_POOL_DESTROYING
;

248  
eEº_poﬁ_de°royög
;

249 
	}
}

252 
	$˝oﬁ_π_c‹e_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
)

254 
˘ask_t
 *
±ask
;

255 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

260 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

261 i‡(
πp
->
c‹e
->
n_qdi•©chs
) {

262 
	`__˝oﬁ_com_gë_di•©ch_èskl
(
πp
->
c‹e
, 
£lf
,Ñç->
n
);

263 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

265 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_DISPATCHED
;

273 i‡(
πp
->
c‹e
->
∑u£d
 || !πp->c‹e->
≈ídögs
)

279 
	`as£π
 (!
	`li°_em±y
(&
πp
->
ªady_q
));

280 -- 
πp
->
c‹e
->
≈ídögs
;

286 
±ask
 = 
	`li°_fú°_íåy
(&
πp
->
ªady_q
, 
˘ask_t
, 
lök
);

287 
	`__li°_dñ
(
±ask
->
lök
.
¥ev
,Öèsk->lök.
√xt
);

288 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

290 
	`__˝oﬁ_π_gëèsk_po°
(
πp
, 
£lf
, 
±ask
);

292 
	}
}

295 
	$˝oﬁ_π_c‹e_¥i_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
)

297 
˘ask_t
 *
±ask
;

298 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

303 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

304 i‡(
πp
->
c‹e
->
n_qdi•©chs
) {

305 
	`__˝oﬁ_com_gë_di•©ch_èskl
(
πp
->
c‹e
, 
£lf
,Ñç->
n
);

306 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

307 
£lf
->
èsk_ty≥
 = 
TASK_TYPE_DISPATCHED
;

315 i‡(
πp
->
c‹e
->
∑u£d
 || !πp->c‹e->
≈ídögs
)

317 -- 
πp
->
c‹e
->
≈ídögs
;

322 
±ask
 = 
	`__˝oﬁ_com_¥iq_p›
(&
πp
->
c
);

323 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

325 
	`__˝oﬁ_π_gëèsk_po°
(
πp
, 
£lf
, 
±ask
);

327 
	}
}

330 
	$˝oﬁ_π_c‹e_dy«mic_¥i_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
)

332 
˘ask_t
 *
±ask
;

333 
˝oﬁ_π_t
 *
πp
 = 
¥iv
;

338 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

339 i‡(
πp
->
c‹e
->
n_qdi•©chs
)

340  
	`__˝oﬁ_com_gë_di•©ch_èskl2
(
πp
->
c‹e
, 
£lf
,Ñç->
n
);

346 i‡(
πp
->
c‹e
->
∑u£d
 || !πp->c‹e->
≈ídögs
)

348 -- 
πp
->
c‹e
->
≈ídögs
;

353 
±ask
 = 
	`__˝oﬁ_com_¥iq_p›
(&
πp
->
c
);

357 #i‚de‡
NDEBUG


358 
__cuπask
 = 
	`TASK_CAST_CORE
(
±ask
);

364 
	`˝oﬁ_c‹e_thªad_°©us_ch™gñ
(
πp
->
c‹e
, 
£lf
, 
THREAD_STAT_RUN
);

365 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

367 
	`__˝oﬁ_π_gëèsk_po°
(
πp
, 
£lf
, 
±ask
);

369 
	}
}

372 
	$˝oﬁ_π_c‹e_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
)

374 i‡(
	`likñy
(!(
eTASK_STAT_F_WPENDING
 & 
	`TASK_CAST_FAC
(
±ask
)->
f_°©
)))

375 
	`˝oﬁ_c‹e_objs_loˇl_°‹e
(
£lf
, 
±ask
);

377 
	`__˝oﬁ_π_èsk_queue
(
¥iv
, 
	`TASK_CAST_FAC
(
±ask
));

378 
	}
}

381 
	$˝oﬁ_π_c‹e_¥i_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
)

383 i‡(
	`likñy
(!(
eTASK_STAT_F_WPENDING
 & 
	`TASK_CAST_FAC
(
±ask
)->
f_°©
)))

384 
	`˝oﬁ_c‹e_objs_loˇl_°‹e
(
£lf
, 
±ask
);

386 
	`__˝oﬁ_com_èsk_ni˚_adju°
(
	`TASK_CAST_FAC
(
±ask
));

387 
	`__˝oﬁ_π_¥i_èsk_queue
(
¥iv
, 
	`TASK_CAST_FAC
(
±ask
));

389 
	}
}

392 
	$˝oﬁ_π_c‹e_dy«mic_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
)

398 
	`as£π
 (
eFUNC_F_DYNAMIC_THREADS
 & ((
˝oﬁ_π_t
 *)
¥iv
)->
lÊags
);

400 i‡(
	`li°_em±y
(&
£lf
->
di•©ch_q
))

401 
	`˝oﬁ_c‹e_thªad_°©us_ch™ge
(((
˝oﬁ_π_t
 *)
¥iv
)->
c‹e
, 
£lf
, 
THREAD_STAT_COMPLETE
);

403 i‡(
	`likñy
(!(
eTASK_STAT_F_WPENDING
 & 
	`TASK_CAST_FAC
(
±ask
)->
f_°©
)))

404 
	`˝oﬁ_c‹e_objs_loˇl_°‹e
(
£lf
, 
±ask
);

406 
	`__˝oﬁ_π_èsk_queue
(
¥iv
, 
	`TASK_CAST_FAC
(
±ask
));

407 
	}
}

410 
	$˝oﬁ_π_c‹e_dy«mic_¥i_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
)

416 
	`as£π
 (
eFUNC_F_DYNAMIC_THREADS
 & ((
˝oﬁ_π_t
 *)
¥iv
)->
lÊags
);

418 i‡(
	`li°_em±y
(&
£lf
->
di•©ch_q
))

419 
	`˝oﬁ_c‹e_thªad_°©us_ch™ge
(((
˝oﬁ_π_t
 *)
¥iv
)->
c‹e
, 
£lf
, 
THREAD_STAT_COMPLETE
);

421 i‡(
	`likñy
(!(
eTASK_STAT_F_WPENDING
 & 
	`TASK_CAST_FAC
(
±ask
)->
f_°©
)))

422 
	`˝oﬁ_c‹e_objs_loˇl_°‹e
(
£lf
, 
±ask
);

424 
	`__˝oﬁ_com_èsk_ni˚_adju°
(
	`TASK_CAST_FAC
(
±ask
));

425 
	`__˝oﬁ_π_¥i_èsk_queue
(
¥iv
, 
	`TASK_CAST_FAC
(
±ask
));

427 
	}
}

	@pool/rt/cpool_rt_extend_method.c

10 
	~"timî.h
"

11 
	~"˝oﬁ_Á˘‹y.h
"

12 
	~"˝oﬁ_waô.h
"

13 
	~"˝oﬁ_com_öã∫Æ.h
"

14 
	~"˝oﬁ_π_öã∫Æ.h
"

15 
	~"˝oﬁ_π_mëhod.h
"

18 
	$˝oﬁ_π_wakeup_thrŸée_waô
(
WWAKE_ªque°î
 *
r
)

20 
˝oﬁ_π_t
 *
πp
 = ((
˝oﬁ_c‹e_t
 *)
r
->
›aque
)->
¥iv
;

22 i‡(!
r
->
b_öãºu±ed
) {

23 
r
->
b_öãºu±ed
 = 1;

25 
πp
->
ev_√ed_nŸify
 = 0;

26 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_evít
);

28 
	}
}

31 
	$˝oﬁ_π_thrŸée_˘l
(
˝oﬁ_˘x_t
 
˘x
, 
⁄
)

33 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

35 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

36 
πp
->
thrŸée_⁄
 = 
⁄
;

37 i‡(!
⁄
 && 
πp
->
ev_√ed_nŸify
) {

38 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_evít
);

39 
πp
->
ev_√ed_nŸify
 = 0;

41 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

42 
	}
}

45 
	$˝oﬁ_π_thrŸée_waô
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

47 
e
 = 0;

48 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

49 
uöt64_t
 
us_˛ock
;

51 
	`DECLARE_WWAKE_REQUEST
(
r
,

52 
	`WWAKE_id
(),

53 
˝oﬁ_π_wakeup_thrŸée_waô
,

54 
πp
);

56 i‡(!
πp
->
thrŸée_⁄
)

59 i‡(!
ms
)

60  
eERR_TIMEDOUT
;

61 
us_˛ock
 = 
	`us_°¨å
();

65 
	`WWAKE_add
(&
r
);

67 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

69 i‡(!
πp
->
thrŸée_⁄
) {

70 
e
 = 0;

74 i‡(
CORE_F_de°royög
 & 
	`˝oﬁ_c‹e_°©u¶
(
πp
->
c‹e
)) {

75 
e
 = 
eERR_DESTROYING
;

79 i‡(
r
.
b_öãºu±ed
) {

80 
e
 = 
eERR_INTERRUPTED
;

87 i‡(
ms
 >= 0) {

88 i‡(
ms
 > 0)

89 
ms
 -
	`us_ídr
(
us_˛ock
) / 1000;

91 i‡(
ms
 <= 0) {

92 
e
 = 
eERR_TIMEDOUT
; 
	`¥ötf
("Timeout\n");

97 
πp
->
ev_√ed_nŸify
 = 1;

98 ++ 
πp
->
ev_wªf
;

99 
	`OSPX_±hªad_c⁄d_timedwaô
(
πp
->
c⁄d_evít
, &πp->
c‹e
->
mut
, 
ms
);

100 -- 
πp
->
ev_wªf
;

105 i‡(!
πp
->
ev_wªf
 &&Ñç->
ªf_sync
) {

106 
πp
->
ªf_sync
 = 0;

107 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_sync
);

110 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

111 
	`WWAKE_îa£_dúe˘
(&
r
);

113  
e
;

114 
	}
}

	@pool/rt/cpool_rt_factory.c

10 
	~"o•x.h
"

11 
	~"msglog.h
"

12 
	~"˝oﬁ_π_Á˘‹y.h
"

13 
	~"˝oﬁ_com_mëhod.h
"

14 
	~"˝oﬁ_π_mëhod.h
"

15 
	~"˝oﬁ_π_°ru˘.h
"

17 
˝oﬁ_mëhod_t
 
	g__fixed_me
;

18 
˝oﬁ_mëhod_t
 
	g__fixed_¥i_me
;

19 
˝oﬁ_mëhod_t
 
	g__dy«mic_me
;

20 
˝oﬁ_mëhod_t
 
	g__dy«mic_¥i_me
;

22 
OSPX_±hªad_⁄˚_t
 
	g__o˘l
 = 
OSPX_PTHREAD_ONCE_INIT
;

25 
	$__˝oﬁ_π_mëhod_öô
()

27 
˝oﬁ_mëhod_t
 
__def_me
 = {

29 
˝oﬁ_π_°©
,

30 
˝oﬁ_π_scheduÀr_m≠_dump
,

31 
˝oﬁ_com_©exô
,

32 
˝oﬁ_com_addªf
,

33 
˝oﬁ_com_ªÀa£
,

34 
˝oﬁ_com_£èâr
,

35 
˝oﬁ_com_gë©å
,

36 
˝oﬁ_com_£t_a˘ivëimeo
,

37 
˝oﬁ_com_adju°
,

38 
˝oﬁ_com_adju°_abs
,

39 
˝oﬁ_com_Êush
,

40 
˝oﬁ_π_su•íd
,

41 
˝oﬁ_com_ªsume
,

42 
˝oﬁ_π_ªmove_Æl
,

43 
˝oﬁ_π_m¨k_Æl
,

44 
˝oﬁ_π_m¨k_cb
,

45 
˝oﬁ_π_waô_Æl
,

46 
˝oﬁ_π_thrŸée_˘l
,

47 
˝oﬁ_π_thrŸée_waô
,

48 
NULL
,

49 
NULL
,

50 (
˘ask_t
),

51 
˝oﬁ_com_ˇche_gë
,

52 
˝oﬁ_com_ˇche_put
,

53 
˝oﬁ_π_èsk_öô
,

54 
NULL
,

55 
˝oﬁ_π_èsk_queue
,

56 
˝oﬁ_π_èsk_ªmove
,

57 
˝oﬁ_π_èsk_m¨k
,

58 
NULL
,

59 
˝oﬁ_π_èsk_°©
,

60 
NULL
,

61 
NULL
,

62 
NULL


67 
	`mem˝y
(&
__fixed_me
, &
__def_me
, (__def_me));

68 
	`mem˝y
(&
__fixed_¥i_me
, &
__def_me
, (__def_me));

69 
	`mem˝y
(&
__dy«mic_me
, &
__def_me
, (__def_me));

70 
	`mem˝y
(&
__dy«mic_¥i_me
, &
__def_me
, (__def_me));

73 
	}
}

76 
	$__Ác_π_comm⁄_dt‹
(
˝oﬁ_t
 *
Ác_ös
)

78 
	`˝oﬁ_π_‰ì_ö°™˚
(
Ác_ös
->
˘x
);

79 
	`‰ì
(
Ác_ös
);

80 
	}
}

82 
˝oﬁ_t
 *

83 
	$__Ác_π_comm⁄_˘‹
(
efuncs
, c⁄° 
˝oﬁ_mëhod_t
 *
me
,

84 c⁄° *
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
)

86 
e
;

87 
˝oﬁ_t
 *
poﬁ
 = 
	`ˇŒoc
(1, (cpool_t));

89 i‡(!
poﬁ
)

90  
NULL
;

92 
poﬁ
->
desc
 = desc;

93 
poﬁ
->
efuncs
 =Éfuncs;

94 
poﬁ
->
me
 = me;

95 
poﬁ
->
‰ì
 = 
__Ác_π_comm⁄_dt‹
;

96 
	`as£π
 (!(
efuncs
 & 
eFUNC_F_ADVANCE
));

101 i‡((
e
=
	`˝oﬁ_π_¸óã_ö°™˚
((
˝oﬁ_π_t
 **)&
poﬁ
->
˘x
, 
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
, 
efuncs
))) {

102 
	`MSG_log2
(
M_RT
, 
LOG_ERR
,

104 
e
);

105 
	`‰ì
(
poﬁ
);

106  
NULL
;

109  
poﬁ
;

110 
	}
}

112 
˝oﬁ_t
 *

113 
	$Ác_π_fixed_˘‹
(c⁄° *
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
)

115 c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
 = 
	`gë_π_fixed_Á˘‹y
();

117  
	`__Ác_π_comm⁄_˘‹
(
Ác
->
efuncs
, fac->
mëhod
, 
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
);

118 
	}
}

120 
˝oﬁ_t
 *

121 
	$Ác_π_fixed_¥i_˘‹
(c⁄° *
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
)

123 c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
 = 
	`gë_π_fixed_¥i_Á˘‹y
();

125  
	`__Ác_π_comm⁄_˘‹
(
Ác
->
efuncs
, fac->
mëhod
, 
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
);

126 
	}
}

128 
˝oﬁ_t
 *

129 
	$Ác_π_dy«mic_˘‹
(c⁄° *
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
)

131 c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
 = 
	`gë_π_dy«mic_Á˘‹y
();

133  
	`__Ác_π_comm⁄_˘‹
(
Ác
->
efuncs
, fac->
mëhod
, 
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
);

134 
	}
}

136 
˝oﬁ_t
 *

137 
	$Ác_π_dy«mic_¥i_˘‹
(c⁄° *
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
)

139 c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
 = 
	`gë_π_dy«mic_¥i_Á˘‹y
();

141  
	`__Ác_π_comm⁄_˘‹
(
Ác
->
efuncs
, fac->
mëhod
, 
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
);

142 
	}
}

145 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

146 
	$gë_π_dy«mic_Á˘‹y
()

148 
˝oﬁ_Á˘‹y_t
 
__Ác
 = {

149 92, 
eFUNC_F_EXTEND
|
eFUNC_F_DYNAMIC_THREADS
|
eFUNC_F_DISABLEQ
, &
__dy«mic_me
, 
Ác_π_dy«mic_˘‹


152 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__˝oﬁ_π_mëhod_öô
);

154  &
__Ác
;

155 
	}
}

157 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

158 
	$gë_π_dy«mic_¥i_Á˘‹y
()

160 
˝oﬁ_Á˘‹y_t
 
__Ác
 = {

161 89, 
eFUNC_F_EXTEND
|
eFUNC_F_DYNAMIC_THREADS
|
eFUNC_F_PRIORITY
|
eFUNC_F_DISABLEQ
, &
__dy«mic_¥i_me
, 
Ác_π_dy«mic_¥i_˘‹
,

164 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__˝oﬁ_π_mëhod_öô
);

166  &
__Ác
;

167 
	}
}

169 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

170 
	$gë_π_fixed_Á˘‹y
()

172 
˝oﬁ_Á˘‹y_t
 
__Ác
 = {

173 100, 
eFUNC_F_EXTEND
|
eFUNC_F_DISABLEQ
, &
__fixed_me
, 
Ác_π_fixed_˘‹
,

176 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__˝oﬁ_π_mëhod_öô
);

178  &
__Ác
;

179 
	}
}

181 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

182 
	$gë_π_fixed_¥i_Á˘‹y
()

184 
˝oﬁ_Á˘‹y_t
 
__Ác
 = {

185 95, 
eFUNC_F_EXTEND
|
eFUNC_F_PRIORITY
|
eFUNC_F_DISABLEQ
, &
__fixed_¥i_me
, 
Ác_π_fixed_¥i_˘‹
,

188 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__˝oﬁ_π_mëhod_öô
);

190  &
__Ác
;

191 
	}
}

	@pool/rt/cpool_rt_factory.h

1 #i‚de‡
__CPOOL_RT_FACTORY_H__


2 
	#__CPOOL_RT_FACTORY_H__


	)

13 
	~"˝oﬁ_Á˘‹y.h
"

18 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

19 
gë_π_dy«mic_Á˘‹y
();

24 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

25 
gë_π_dy«mic_¥i_Á˘‹y
();

30 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

31 
gë_π_fixed_Á˘‹y
();

36 c⁄° 
˝oﬁ_Á˘‹y_t
 *const

37 
gë_π_fixed_¥i_Á˘‹y
();

	@pool/rt/cpool_rt_internal.c

10 
	~"˝oﬁ_com_öã∫Æ.h
"

11 
	~"˝oﬁ_π_öã∫Æ.h
"

12 
	~"˝oﬁ_π_mëhod.h
"

14 
˝oﬁ_°©
 *

15 
	$__˝oﬁ_π_°©_c⁄v
(
˝oﬁ_π_t
 *
πp
, 
˝oﬁ_c‹e_°©
 *
§c
, 
˝oﬁ_°©
 *
d°
)

17 
d°
->
desc
 = 
§c
->desc;

18 
d°
->
¸óãd
 = 
§c
->
°¨t
;

19 
d°
->
a˘timeo
 = 
§c
->acttimeo;

20 
d°
->
øndtimeo
 = 
§c
->randtimeo;

21 
d°
->
ªf
 = 
§c
->
u£r_ªf
;

22 
d°
->
¥iq_num
 = 
πp
->priq_num;

23 
d°
->
su•íded
 = 
§c
->
∑u£d
;

24 
d°
->
maxthªads
 = 
§c
->
max
;

25 
d°
->
möthªads
 = 
§c
->
mö
;

26 
d°
->
cuπhªads
 = 
§c
->
n_qths
;

27 i‡(
πp
->
lÊags
 & 
eFUNC_F_DYNAMIC_THREADS
)

28 
d°
->
cuπhªads_a˘ive
 = 
§c
->
¡hs_ru¬ög
;

30 
d°
->
cuπhªads_a˘ive
 = 
§c
->
n_qths
 - src->
n_qths_waked
 - src->
n_qths_waô
;

31 
d°
->
cuπhªads_dyög
 = 
§c
->
¡hs_dyög
;

32 
d°
->
thªads_≥ak
 = 
§c
->
¡hs_≥ak
;

33 
d°
->
èsks_≥ak
 = -1;

34 
d°
->
èsks_added
 = -1;

35 
d°
->
èsks_¥o˚s£d
 = -1;

36 
d°
->
èsks_ªmoved
 = -1;

37 
d°
->
cuπasks_≥ndög
 = 
§c
->
n_q≥ndögs
;

38 
d°
->
cuπasks_ªmovög
 +
§c
->
n_qdi•©chs
;

40 i‡(
d°
->
cuπhªads_a˘ive
 < 0)

41 
d°
->
cuπhªads_a˘ive
 = 0;

42 
d°
->
cuπasks_schedulög
 = d°->
cuπhªads_a˘ive
;

44  
d°
;

45 
	}
}

48 
	$__˝oﬁ_π_èsk_di•©ch
(
˝oﬁ_π_t
 *
πp
, 
li°_hód
 *
rmq
, 
di•©ched_bypoﬁ
)

50 
n
;

51 
èsk_cou¡î
 = 0;

52 
˘ask_t
 *
±ask
, *
≈èsk
;

53 
	`SMLINK_Q_HEAD
(
qˇche
);

54 
	`LIST_HEAD
(
q_nuŒ
);

59 
n
 =
	`__˝oﬁ_com_gë_îr_h™dÀr_q
(
rmq
, &
q_nuŒ
);

60 i‡(!
	`li°_em±y
(&
q_nuŒ
))

61 
	`__˝oﬁ_com_li°_to_smq
(&
q_nuŒ
, &
qˇche
);

63 i‡(
	`li°_em±y
(
rmq
))

64 
out
;

66 i‡(
di•©ched_bypoﬁ
) {

67 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

73 
πp
->
c‹e
->
n_qdi•©chs
 +
n
;

74 
	`li°_•li˚
(
rmq
, &
πp
->
c‹e
->
di•©ch_q
);

80 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
πp
->
c‹e
))

81 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
πp
->
c‹e
, 
NULL
);

82 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

86 
	`OSPX_öãæocked_add
(&
πp
->
tsks_hñd_by_di•©chî
, ()-
n
);

89 
	`li°_f‹_óch_íåy_ß„
(
±ask
, 
≈èsk
, 
rmq
, 
˘ask_t
, 
lök
) {

90 
	`as£π
 (
±ask
->
èsk_îr_h™dÀr
);

95 
±ask
->
f_°©
 = (
eTASK_STAT_F_DISPATCHING
|
eTASK_STAT_F_SCHEDULING
);

96 
±ask
->
	`èsk_îr_h™dÀr
’èsk, 
	`˝oﬁ_π_c‹e_îr_ªas⁄s
(
	`TASK_CAST_CORE
(ptask)));

101 i‡(
eTASK_STAT_F_WPENDING
 & 
±ask
->
f_°©
) {

102 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
)

103 
	`__˝oﬁ_π_¥i_èsk_queue
(
πp
, 
±ask
);

105 
	`__˝oﬁ_π_èsk_queue
(
πp
, 
±ask
);

107 ++ 
èsk_cou¡î
;

109 
	`smlök_q_push
(&
qˇche
, 
±ask
);

112 i‡(
èsk_cou¡î
)

113 
	`OSPX_öãæocked_add
(&
πp
->
tsks_hñd_by_di•©chî
, -
èsk_cou¡î
);

116 
out
:

120 i‡(!
	`smlök_q_em±y
(&
qˇche
)) {

121 
èsk_cou¡î
 = 
	`smlök_q_size
(&
qˇche
);

123 
	`smˇche_add_q
(
πp
->
c‹e
->
ˇche_èsk
, &
qˇche
);

127 
	`OSPX_öãæocked_add
(&
πp
->
tsks_hñd_by_di•©chî
, -
èsk_cou¡î
);

128 
	`as£π
 (
πp
->
tsks_hñd_by_di•©chî
 >= 0);

129 
	`˝oﬁ_c‹e_åy_GC
(
πp
->
c‹e
);

135 i‡(!
πp
->
c‹e
->
≈ídögs
)

136 
	`__˝oﬁ_π_åy_wakeup
(
πp
);

137 
	}
}

	@pool/rt/cpool_rt_internal.h

1 #i‚de‡
__CPOOL_RT_INTERNAL_H__


2 
	#__CPOOL_RT_INTERNAL_H__


	)

12 
	~"˝oﬁ_c‹e.h
"

13 
	~"˝oﬁ_π_°ru˘.h
"

14 
	~"˝oﬁ_Á˘‹y.h
"

16 
ölöe
 

17 
	$__˝oﬁ_π_èsk_queue
(
˝oﬁ_π_t
 *
πp
, 
˘ask_t
 *
±ask
)

19 
±ask
->
f_°©
 = 
eTASK_STAT_F_WAITING
;

21 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

22 
	`li°_add_èû
(&
±ask
->
lök
, &
πp
->
ªady_q
);

23 ++ 
πp
->
c‹e
->
≈ídögs
;

27 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
πp
->
c‹e
Ë&& !πp->c‹e->
∑u£d
)

28 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
πp
->
c‹e
, 
NULL
);

29 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

30 
	}
}

32 
ölöe
 

33 
	$__˝oﬁ_π_¥i_èsk_queue
(
˝oﬁ_π_t
 *
πp
, 
˘ask_t
 *
±ask
)

35 
±ask
->
f_°©
 = 
eTASK_STAT_F_WAITING
;

36 
	`__˝oﬁ_com_èsk_ni˚_¥ïro˚ss
(&
πp
->
c
, 
±ask
);

38 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

39 
	`__˝oﬁ_com_¥iq_ö£π
(&
πp
->
c
, 
±ask
);

40 ++ 
πp
->
c‹e
->
≈ídögs
;

44 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
πp
->
c‹e
Ë&& !πp->c‹e->
∑u£d
)

45 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
πp
->
c‹e
, 
NULL
);

46 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

47 
	}
}

49 
ölöe
 

50 
	$__˝oﬁ_π_ªmove_Æl
(
˝oﬁ_π_t
 *
πp
, 
li°_hód
 *
rmq
)

52 
	`__li°_•li˚
(&
πp
->
ªady_q
, 
rmq
,Ñmq->
√xt
);

53 
	`INIT_LIST_HEAD
(&
πp
->
ªady_q
);

54 
πp
->
c‹e
->
≈ídögs
 = 0;

55 
	}
}

57 
ölöe
 

58 
	$__˝oﬁ_π_¥iq_ªmove_Æl
(
˝oﬁ_π_t
 *
πp
, 
li°_hód
 *
rmq
)

60 
˝riq_t
 *
¥iq
;

62 !
	`li°_em±y
(&
πp
->
ªady_q
)) {

63 
¥iq
 = 
	`li°_fú°_íåy
(&
πp
->
ªady_q
, 
˝riq_t
, 
lök
);

64 
	`li°_dñ
(&
¥iq
->
lök
);

66 
	`as£π
 (!
	`li°_em±y
(&
¥iq
->
èsk_q
));

67 
	`__li°_•li˚
(&
¥iq
->
èsk_q
, 
rmq
,Ñmq->
√xt
);

68 
	`INIT_LIST_HEAD
(&
¥iq
->
èsk_q
);

71 
πp
->
c‹e
->
≈ídögs
 = 0;

72 
	}
}

74 
ölöe
 

75 
	$__˝oﬁ_π_åy_wakeup
(
˝oﬁ_π_t
 *
πp
)

77 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

78 i‡(
	`˝oﬁ_c‹e_Æl_d⁄ñ
(
πp
->
c‹e
))

79 
πp
->
c‹e
->
me
->
	`nŸifyl
‘ç->c‹e, 
eEvít_F_‰ì
);

80 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

81 
	}
}

83 
˝oﬁ_°©
 *

84 
__˝oﬁ_π_°©_c⁄v
(
˝oﬁ_π_t
 *
πp
, 
˝oﬁ_c‹e_°©
 *
§c
, 
˝oﬁ_°©
 *
d°
);

87 
__˝oﬁ_π_èsk_di•©ch
(
˝oﬁ_π_t
 *
πp
, 
li°_hód
 *
rmq
, 
di•©ch_by_poﬁ
);

	@pool/rt/cpool_rt_method.c

10 
	~"msglog.h
"

11 
	~"timî.h
"

12 
	~"˝oﬁ_c‹e.h
"

13 
	~"˝oﬁ_waô.h
"

14 
	~"˝oﬁ_Á˘‹y.h
"

15 
	~"˝oﬁ_com_mëhod.h
"

16 
	~"˝oﬁ_com_öã∫Æ.h
"

17 
	~"˝oﬁ_π_mëhod.h
"

18 
	~"˝oﬁ_π_öã∫Æ.h
"

20 
	s˝oﬁ_c‹e_mëhod_£ts
 {

21 c⁄° 
	mlÊags
;

22 c⁄° 
˝oﬁ_c‹e_mëhod_t
 
	mme
;

23 } 
	g__c‹e_me
[] = {

28 
˝oﬁ_π_c‹e_˘‹
,

29 
˝oﬁ_π_c‹e_nŸifyl
,

30 
˝oﬁ_π_c‹e_gëèsk
,

31 
˝oﬁ_π_c‹e_îr_ªas⁄s
,

32 
˝oﬁ_π_c‹e_föished
,

33 
˝oﬁ_π_c‹e_dt‹


36 { 
eFUNC_F_PRIORITY
,

40 
˝oﬁ_π_c‹e_˘‹
,

41 
˝oﬁ_π_c‹e_nŸifyl
,

42 
˝oﬁ_π_c‹e_¥i_gëèsk
,

43 
˝oﬁ_π_c‹e_îr_ªas⁄s
,

44 
˝oﬁ_π_c‹e_¥i_föished
,

45 
˝oﬁ_π_c‹e_dt‹


48 { 
eFUNC_F_DYNAMIC_THREADS
,

52 
˝oﬁ_π_c‹e_˘‹
,

53 
˝oﬁ_π_c‹e_nŸifyl
,

54 
˝oﬁ_π_c‹e_dy«mic_gëèsk
,

55 
˝oﬁ_π_c‹e_îr_ªas⁄s
,

56 
˝oﬁ_π_c‹e_dy«mic_föished
,

57 
˝oﬁ_π_c‹e_dt‹


60 { 
eFUNC_F_DYNAMIC_THREADS
|
eFUNC_F_PRIORITY
,

64 
˝oﬁ_π_c‹e_˘‹
,

65 
˝oﬁ_π_c‹e_nŸifyl
,

66 
˝oﬁ_π_c‹e_dy«mic_¥i_gëèsk
,

67 
˝oﬁ_π_c‹e_îr_ªas⁄s
,

68 
˝oﬁ_π_c‹e_dy«mic_¥i_föished
,

69 
˝oﬁ_π_c‹e_dt‹


75 
	$˝oﬁ_π_¸óã_ö°™˚
(
˝oﬁ_π_t
 **
p_πp
, c⁄° *
c‹e_desc
, 
max
, 
mö
, 
¥iq_num
, 
su•íd
, 
lÊags
)

77 
idx
;

78 c⁄° 
˝oﬁ_c‹e_mëhod_t
 *
me
 = 
NULL
;

79 
c‹e_Êags
 = 
lÊags
 & (
eFUNC_F_DYNAMIC_THREADS
|
eFUNC_F_PRIORITY
);

80 
˝oﬁ_π_t
 *
πp
;

85 
idx
=0; idx<(
__c‹e_me
)/(*__core_me); idx++) {

86 i‡(
__c‹e_me
[
idx
].
lÊags
 =
c‹e_Êags
) {

87 
me
 = &
__c‹e_me
[
idx
].me;

92 i‡(!
me
) {

93 
	`MSG_log2
(
M_RT
, 
LOG_ERR
,

95 
lÊags
);

103 i‡(!(
eFUNC_F_DYNAMIC_THREADS
 & 
lÊags
)) {

104 
mö
 = 
max
;

105 
c‹e_Êags
 = 0;

107 
c‹e_Êags
 = 
CORE_F_dy«mic
;

112 
πp
 = 
	`ˇŒoc
(1, (
˝oﬁ_π_t
Ë+ (
˝oﬁ_c‹e_t
));

113 i‡(!
πp
)

114  
eERR_NOMEM
;

115 
πp
->
c‹e
 = (
˝oﬁ_c‹e_t
 *)(rtp + 1);

120 
πp
->
lÊags
 =Üflags;

121 
πp
->
¥iq_num
 =Öriq_num;

122 
πp
->
c‹e
->
¥iv
 =Ñtp;

127 i‡(
	`˝oﬁ_c‹e_˘‹
(
πp
->
c‹e
, 
c‹e_desc
, 
me
, 
max
, 
mö
, 
su•íd
, 
c‹e_Êags
)) {

128 
	`˝oﬁ_π_‰ì_ö°™˚
(
πp
);

129  
eERR_OTHER
;

131 *
p_πp
 = 
πp
;

134 
	}
}

137 
	$˝oﬁ_π_‰ì_ö°™˚
(
˝oﬁ_π_t
 *
πp
)

139 
	`‰ì
(
πp
);

140 
	}
}

143 
	$˝oﬁ_π_wakeup_èsk_waô
(
WWAKE_ªque°î
 *
r
)

145 
˝oﬁ_π_t
 *
πp
 = 
r
->
›aque
;

147 i‡(!
r
->
b_öãºu±ed
) {

148 
r
->
b_öãºu±ed
 = 1;

149 
πp
->
tsk_√ed_nŸify
 = 0;

150 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_èsk
);

152 
	}
}

155 
	$˝oﬁ_π_su•íd
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

157 
e
 = 0;

158 
uöt64_t
 
us_˛ock
 = 
	`us_°¨å
();

159 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

161 
	`DECLARE_WWAKE_REQUEST
(
r
,

162 
	`WWAKE_id
(),

163 
˝oﬁ_π_wakeup_èsk_waô
,

164 
πp
);

165 #i‚de‡
NDEBUG


166 
times
 = 0;

172 
	`WWAKE_add
(&
r
);

174 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

178 
	`˝oﬁ_c‹e_su•ídl
(
πp
->
c‹e
);

181 i‡(
	`˝oﬁ_c‹e_Æl_d⁄ñ
(
πp
->
c‹e
Ë&& !πp->
tsks_hñd_by_di•©chî
) {

182 
e
 = 0;

185 #i‚de‡
NDEBUG


186 i‡(++ 
times
 > 1)

187 
	`MSG_log
(
M_RT
, 
LOG_TRACE
,

189 
πp
->
c‹e
->
n_qths
,Ñç->c‹e->
n_qths_waô
,Ñç->c‹e->
n_qths_waked
,Ñç->c‹e->
¡hªads_ªÆ_‰ì
,Ñç->c‹e->
≈ídögs
,

190 
πp
->
c‹e
->
∑u£d
,Ñç->c‹e->
GC
,Ñç->c‹e->GC ? (*Ïç->c‹e->GC->
°©us
 : 
NULL
);

192 i‡(
r
.
b_öãºu±ed
) {

193 
e
 = 
eERR_INTERRUPTED
;

200 i‡(
ms
 >= 0) {

201 i‡(
ms
 > 0)

202 
ms
 -
	`us_ídr
(
us_˛ock
) / 1000;

204 i‡(
ms
 <= 0) {

205 
e
 = 
eERR_TIMEDOUT
;

210 
πp
->
tsk_√ed_nŸify
 = 1;

211 ++ 
πp
->
tsk_wªf
;

212 
	`OSPX_±hªad_c⁄d_timedwaô
(
πp
->
c⁄d_èsk
, &πp->
c‹e
->
mut
, 
ms
);

213 -- 
πp
->
tsk_wªf
;

218 i‡(!
πp
->
tsk_wªf
 &&Ñç->
ªf_sync
) {

219 
πp
->
ªf_sync
 = 0;

220 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_sync
);

223 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

227 
	`WWAKE_îa£_dúe˘
(&
r
);

229  
e
;

230 
	}
}

233 
	$˝oﬁ_π_ªmove_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
di•©ched_bypoﬁ
)

235  
	`˝oﬁ_π_m¨k_Æl
(
˘x
, 
di•©ched_bypoﬁ
 ? 
eTASK_VM_F_REMOVE_BYPOOL
 : 
eTASK_VM_F_REMOVE
);

236 
	}
}

239 
	$˝oﬁ_π_waô_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
ms
)

241 
e
 = 0;

242 
uöt64_t
 
us_˛ock
 = 
	`us_°¨å
();

243 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

245 
	`DECLARE_WWAKE_REQUEST
(
r
,

246 
	`WWAKE_id
(),

247 
˝oﬁ_π_wakeup_èsk_waô
,

248 
πp
);

249 #i‚de‡
NDEBUG


250 
times
 = 0;

256 
	`WWAKE_add
(&
r
);

258 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

260 i‡(
	`˝oﬁ_c‹e_Æl_d⁄ñ
(
πp
->
c‹e
Ë&& !πp->c‹e->
≈ídögs
 && !πp->
tsks_hñd_by_di•©chî
) {

261 
e
 = 0;

264 #i‚de‡
NDEBUG


265 i‡(++ 
times
 > 1)

266 
	`MSG_log
(
M_RT
, 
LOG_TRACE
,

268 
πp
->
c‹e
->
n_qths
,Ñç->c‹e->
n_qths_waô
,Ñç->c‹e->
n_qths_waked
,Ñç->c‹e->
¡hªads_ªÆ_‰ì
,Ñç->c‹e->
≈ídögs
,

269 
πp
->
c‹e
->
∑u£d
,Ñç->c‹e->
GC
,Ñç->c‹e->GC ? (*Ïç->c‹e->GC->
°©us
 : 
NULL
);

271 i‡(
r
.
b_öãºu±ed
) {

272 
e
 = 
eERR_INTERRUPTED
;

279 i‡(
ms
 >= 0) {

280 i‡(
ms
 > 0)

281 
ms
 -
	`us_ídr
(
us_˛ock
) / 1000;

283 i‡(
ms
 <= 0) {

284 
e
 = 
eERR_TIMEDOUT
;

289 
πp
->
tsk_√ed_nŸify
 = 1;

290 ++ 
πp
->
tsk_wªf
;

291 
	`OSPX_±hªad_c⁄d_timedwaô
(
πp
->
c⁄d_èsk
, &πp->
c‹e
->
mut
, 
ms
);

292 -- 
πp
->
tsk_wªf
;

297 i‡(!
πp
->
tsk_wªf
 &&Ñç->
ªf_sync
) {

298 
πp
->
ªf_sync
 = 0;

299 
	`OSPX_±hªad_c⁄d_brﬂdˇ°
(
πp
->
c⁄d_sync
);

302 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

306 
	`WWAKE_îa£_dúe˘
(&
r
);

308  
e
;

309 
	}
}

311 
˝oﬁ_°©
 *

312 
	$˝oﬁ_π_°©
(
˝oﬁ_˘x_t
 
˘x
, 
˝oﬁ_°©
 *
°©
)

314 
˝oﬁ_c‹e_°©
 
c‹e_°©
;

315 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

317 
	`bzîo
(
°©
, (*stat));

319 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

320 
	`˝oﬁ_c‹e_°©l
(
πp
->
c‹e
, &
c‹e_°©
);

321 
°©
->
waôîs
 = 
πp
->
tsk_wªf
 +Ñç->
ev_wªf
;

322 
°©
->
cuπasks_ªmovög
 = 
πp
->
tsks_hñd_by_di•©chî
;

323 
°©
->
thrŸée_⁄
 = 
πp
->throttle_on;

324 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

326  
	`__˝oﬁ_π_°©_c⁄v
(
πp
, &
c‹e_°©
, 
°©
);

327 
	}
}

330 
	$˝oﬁ_π_èsk_öô
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
)

332 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

334 i‡(
eTASK_VM_F_CACHE
 & 
±ask
->
f_vmÊags
)

337 
	`MSG_log
(
M_RT
, 
LOG_ERR
,

339 
πp
->
c‹e
,Ñç->c‹e->
desc
,Ñç->c‹e->
¥iv
, 
±ask
->
èsk_desc
,Ötask);

341  
eERR_NSUPPORT
;

342 
	}
}

344 
ölöe
 

345 
	$__˝oﬁ_π_èsk_queue_¥ïro˚ss
(
˝oﬁ_π_t
 *
πp
, 
˘ask_t
 *
±ask
)

347 
	`as£π
 (
eTASK_VM_F_CACHE
 & 
±ask
->
f_vmÊags
 &&

348 (!
±ask
->
f_°©
 || 
eTASK_STAT_F_SCHEDULING
 &Ötask->f_stat));

353 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_REMOVE_FLAGS
;

355 i‡(
CORE_F_de°royög
 & 
	`˝oﬁ_c‹e_°©u¶
(
πp
->
c‹e
))

356  
eERR_DESTROYING
;

358 i‡(
eTASK_VM_F_DISABLE_QUEUE
 & 
±ask
->
f_vmÊags
)

359  
eTASK_ERR_DISABLE_QUEUE
;

361 i‡(
πp
->
thrŸée_⁄
)

362  
eERR_THROTTLE
;

364 i‡(
±ask
->
f_°©
)

368 
±ask
->
f_°©
 |
eTASK_STAT_F_WPENDING
;

370 
±ask
->
f_°©
 = 
eTASK_STAT_F_WAITING
;

372 i‡(
πp
->
c
.
¥iq_num
) {

373 
	`as£π
 (
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
);

374 
	`__˝oﬁ_com_èsk_ni˚_¥ïro˚ss
(&
πp
->
c
, 
±ask
);

378 
	}
}

381 
	$˝oﬁ_π_èsk_queue
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
)

383 
uöt8_t
 
f_°©
;

384 
e
, 
ªscheduÀ
 = 0;

385 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

391 
	`as£π
 (
eTASK_VM_F_CACHE
 & 
±ask
->
f_vmÊags
 &&

392 (!
±ask
->
f_°©
 || (
eTASK_STAT_F_WAITING
|
eTASK_STAT_F_SCHEDULING
) &Ötask->f_stat));

394 i‡(
±ask
->
f_°©
) {

395 i‡(
±ask
->
f_°©
 & (
eTASK_STAT_F_WAITING
|
eTASK_STAT_F_WPENDING
))

397 
ªscheduÀ
 = 1;

403 
f_°©
 = 
±ask
->f_stat;

404 i‡((
e
 = 
	`__˝oﬁ_π_èsk_queue_¥ïro˚ss
(
πp
, 
±ask
))) {

408 
±ask
->
f_°©
 = f_stat;

410  
e
;

413 i‡(!
ªscheduÀ
) {

414 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

418 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
)

419 
	`__˝oﬁ_com_¥iq_ö£π
(&
πp
->
c
, 
±ask
);

421 
	`li°_add_èû
(&
±ask
->
lök
, &
πp
->
ªady_q
);

422 ++ 
πp
->
c‹e
->
≈ídögs
;

427 i‡(
πp
->
lÊags
 & 
eFUNC_F_DYNAMIC_THREADS
) {

428 i‡(
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(
πp
->
c‹e
Ë&& !πp->c‹e->
∑u£d
)

429 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
πp
->
c‹e
, 
NULL
);

431 } i‡(
	`˝oﬁ_c‹e_waôq_sizñ
(
πp
->
c‹e
Ë&& !πp->c‹e->
∑u£d
)

432 
	`˝oﬁ_c‹e_wakeup_n_¶ìpög_thªad¶
(
πp
->
c‹e
, 1);

433 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

437 
	}
}

440 
	$˝oﬁ_π_èsk_ªmove
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
di•©ched_by_poﬁ
)

446 
	`as£π
 (
±ask
->
poﬁ
 &&Öèsk->
f_°©
 &&Öèsk->poﬁ->
˘x
 == ctx &&

447 
eTASK_STAT_F_SCHEDULING
 & 
±ask
->
f_°©
);

449 
±ask
->
f_°©
 &~
eTASK_STAT_F_WPENDING
;

451 
	}
}

454 
	$˝oﬁ_π_èsk_m¨k
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
lÊags
)

460 
	`as£π
 (
±ask
->
poﬁ
 &&Öèsk->
f_°©
 &&Öèsk->poﬁ->
˘x
 == ctx &&

461 
eTASK_STAT_F_SCHEDULING
 & 
±ask
->
f_°©
);

463 
lÊags
 &
eTASK_VM_F_USER_FLAGS
;

465 i‡(
eTASK_VM_F_REMOVE_FLAGS
 & 
lÊags
)

466 
±ask
->
f_°©
 &~
eTASK_STAT_F_WPENDING
;

468 
	`__˝oﬁ_com_èsk_m¨k
(
±ask
, 
lÊags
);

469 
	}
}

472 
	$˝oﬁ_π_èsk_°©
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, *
vm
)

478 
	`as£π
 (
±ask
->
poﬁ
 &&Öèsk->
f_°©
 &&Öèsk->poﬁ->
˘x
 == ctx &&

479 
eTASK_STAT_F_SCHEDULING
 & 
±ask
->
f_°©
);

481 i‡(
vm
)

482 *
vm
 = 
±ask
->
f_vmÊags
;

484  
±ask
->
f_°©
;

485 
	}
}

488 
	$˝oﬁ_π_m¨k_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
lÊags
)

490 
√ffs
 = 0;

491 
lÊags0
;

492 
	`LIST_HEAD
(
rmq
);

493 
˝riq_t
 *
¥iq
;

494 
˘ask_t
 *
±ask
;

495 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

500 i‡(!(
lÊags
 &
eTASK_VM_F_USER_FLAGS
))

502 
lÊags0
 = 
lÊags
 & ~
eTASK_VM_F_REMOVE_FLAGS
;

504 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

505 i‡(
πp
->
c‹e
->
≈ídögs
) {

506 i‡(
lÊags
 & 
eTASK_VM_F_REMOVE_FLAGS
) {

507 
√ffs
 = 
πp
->
c‹e
->
≈ídögs
;

512 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
)

513 
	`__˝oﬁ_π_¥iq_ªmove_Æl
(
πp
, &
rmq
);

515 
	`__˝oﬁ_π_ªmove_Æl
(
πp
, &
rmq
);

517 
	`as£π
 (
πp
->
c‹e
->
≈ídögs
 == 0);

521 
	`OSPX_öãæocked_add
(&
πp
->
tsks_hñd_by_di•©chî
, ()
√ffs
);

526 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
)

527 
	`li°_f‹_óch_íåy
(
¥iq
, &
πp
->
ªady_q
, 
˝riq_t
, 
lök
) {

528 
	`li°_f‹_óch_íåy
(
±ask
, &
¥iq
->
èsk_q
, 
˘ask_t
, 
lök
) {

529 
√ffs
 +
	`__˝oﬁ_com_èsk_m¨k
(
±ask
, 
lÊags0
);

533 
	`li°_f‹_óch_íåy
(
±ask
, &
πp
->
ªady_q
, 
˘ask_t
, 
lök
) {

534 
√ffs
 +
	`__˝oﬁ_com_èsk_m¨k
(
±ask
, 
lÊags0
);

538 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

543 i‡(!
	`li°_em±y
(&
rmq
)) {

544 
	`li°_f‹_óch_íåy
(
±ask
, &
rmq
, 
˘ask_t
, 
lök
) {

545 
±ask
->
f_vmÊags
 |(
eTASK_VM_F_REMOVE_FLAGS
 & 
lÊags
);

546 i‡(
lÊags0
)

547 
	`__˝oﬁ_com_èsk_m¨k
(
±ask
, 
lÊags0
);

550 
	`__˝oﬁ_π_èsk_di•©ch
(
πp
, &
rmq
, 
eTASK_VM_F_REMOVE_BYPOOL
 & 
lÊags
);

553  
√ffs
;

554 
	}
}

556 
	#CPOOL_RT_MARK_CB
(
±ask
, 
cb
, 
cb_¨g
, 
lÊags
, 
√ffs
, 
rmq
, 
n
, 
ok
) \

558 i‡((
lÊags
 = 
	`cb
(
±ask
, 
cb_¨g
)Ë&& (lÊag†&
eTASK_VM_F_USER_FLAGS
)) { \

564 i‡(
eTASK_VM_F_REMOVE_FLAGS
 & 
lÊags
) { \

565 (
±ask
)->
f_vmÊags
 |(
eTASK_VM_F_REMOVE_FLAGS
 & 
lÊags
); \

570 i‡(
eTASK_VM_F_REMOVE_BYPOOL
 & 
lÊags
 && 
±ask
->
èsk_îr_h™dÀr
) { \

571 
	`li°_add_èû
(&
±ask
->
lök
, &
πp
->
c‹e
->
di•©ch_q
); \

572 ++ 
πp
->
c‹e
->
n_qdi•©chs
; \

574 ++ 
n
; \

575 
	`li°_add_èû
(&
±ask
->
lök
, 
rmq
); \

577 
ok
 = 1; \

579 i‡(
	`__˝oﬁ_com_èsk_m¨k
(
±ask
, 
lÊags
Ë|| 
ok
) {\

580 ++ 
√ffs
; \

581 
ok
 = 0; \

584 } 0)

	)

587 
	$˝oﬁ_π_m¨k_cb
(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
cb
, *
cb_¨g
)

589 
√ffs
 = 0, 
ok
 = 0;

590 
lÊags
, 
èsk_cou¡î
 = 0;

591 
	`LIST_HEAD
(
rmq
);

592 
˘ask_t
 *
±ask
, *
n
;

593 
˝riq_t
 *
¥iq
, *
≈riq
;

594 
˝oﬁ_π_t
 *
πp
 = 
˘x
;

596 
	`OSPX_±hªad_muãx_lock
(&
πp
->
c‹e
->
mut
);

597 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
) {

601 
	`li°_f‹_óch_íåy_ß„
(
¥iq
, 
≈riq
, &
πp
->
ªady_q
, 
˝riq_t
, 
lök
) {

602 
	`li°_f‹_óch_íåy_ß„
(
±ask
, 
n
, &
¥iq
->
èsk_q
, 
˘ask_t
, 
lök
) {

603 
	`CPOOL_RT_MARK_CB
(
±ask
, 
cb
, 
cb_¨g
, 
lÊags
, 
√ffs
, &
rmq
, 
èsk_cou¡î
, 
ok
);

607 
	`li°_f‹_óch_íåy_ß„
(
±ask
, 
n
, &
πp
->
ªady_q
, 
˘ask_t
, 
lök
) {

608 
	`CPOOL_RT_MARK_CB
(
±ask
, 
cb
, 
cb_¨g
, 
lÊags
, 
√ffs
, &
rmq
, 
èsk_cou¡î
, 
ok
);

611 i‡(
èsk_cou¡î
)

612 
	`OSPX_öãæocked_add
(&
πp
->
tsks_hñd_by_di•©chî
, 
èsk_cou¡î
);

616 i‡(
πp
->
c‹e
->
n_qdi•©chs
 && 
	`˝oﬁ_c‹e_√ed_ísuª_£rvi˚¶
(rtp->core))

617 
	`˝oﬁ_c‹e_ísuª_£rvi˚¶
(
πp
->
c‹e
, 
NULL
);

618 
	`OSPX_±hªad_muãx_u∆ock
(&
πp
->
c‹e
->
mut
);

623 i‡(!
	`li°_em±y
(&
rmq
))

624 
	`__˝oﬁ_π_èsk_di•©ch
(
πp
, &
rmq
, 0);

626  
√ffs
;

627 
	}
}

	@pool/rt/cpool_rt_method.h

1 #i‚de‡
__CPOOL_RT_METHOD_H__


2 
	#__CPOOL_RT_METHOD_H__


	)

13 
	~"˝oﬁ_mëhod.h
"

14 
	~"˝oﬁ_π_°ru˘.h
"

17 
˝oﬁ_π_c‹e_˘‹
(*
¥iv
);

18 
˝oﬁ_π_c‹e_nŸifyl
(*
¥iv
, 
eEvít_t
 
evít
);

19 
˝oﬁ_π_c‹e_dt‹
(*
¥iv
);

20 
˝oﬁ_π_c‹e_îr_ªas⁄s
(
basic_èsk_t
 *
±ask
);

21 
˝oﬁ_π_c‹e_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
);

22 
˝oﬁ_π_c‹e_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
);

23 
˝oﬁ_π_c‹e_¥i_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
);

24 
˝oﬁ_π_c‹e_¥i_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
);

25 
˝oﬁ_π_c‹e_dy«mic_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
);

26 
˝oﬁ_π_c‹e_dy«mic_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
);

27 
˝oﬁ_π_c‹e_dy«mic_¥i_gëèsk
(*
¥iv
, 
thªad_t
 *
£lf
);

28 
˝oﬁ_π_c‹e_dy«mic_¥i_föished
(*
¥iv
, 
thªad_t
 *
£lf
, 
basic_èsk_t
 *
±ask
, 
eRós⁄s
);

31 
˝oﬁ_π_ªmove_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
di•©ched_by_poﬁ
);

32 
˝oﬁ_π_su•íd
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

33 
˝oﬁ_π_m¨k_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
lÊags
);

34 
˝oﬁ_π_m¨k_cb
(
˝oﬁ_˘x_t
 
˘x
, 
Visô_cb
 
cb
, *
cb_¨g
);

35 
˝oﬁ_π_waô_Æl
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

37 
˝oﬁ_°©
 *
˝oﬁ_π_°©
(
˝oﬁ_˘x_t
 
˘x
, ˝oﬁ_°© *
°©
);

38 *
˝oﬁ_π_scheduÀr_m≠_dump
(
˝oﬁ_˘x_t
 
˘x
, *
buff
, 
size_t
 
bufÊí
);

40 
˝oﬁ_π_èsk_öô
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

41 
˝oﬁ_π_èsk_queue
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
);

42 
˝oﬁ_π_èsk_ªmove
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
di•©ched_by_poﬁ
);

43 
˝oﬁ_π_èsk_m¨k
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, 
lÊags
);

44 
˝oﬁ_π_èsk_°©
(
˝oﬁ_˘x_t
 
˘x
, 
˘ask_t
 *
±ask
, *
vm
);

47 
˝oﬁ_π_thrŸée_˘l
(
˝oﬁ_˘x_t
 
˘x
, 
⁄
);

48 
˝oﬁ_π_thrŸée_waô
(
˝oﬁ_˘x_t
 
˘x
, 
ms
);

51 
˝oﬁ_π_¸óã_ö°™˚
(
˝oﬁ_π_t
 **
p_πp
, c⁄° *
desc
, 
max
, 
mö
, 
¥i_q_num
, 
su•íd
, 
lÊags
);

52 
˝oﬁ_π_‰ì_ö°™˚
(
˝oﬁ_π_t
 *
πp
);

	@pool/rt/cpool_rt_scheduler_dump.c

10 
	~"˝oﬁ_Á˘‹y.h
"

11 
	~"˝oﬁ_c‹e.h
"

12 
	~"˝oﬁ_π_°ru˘.h
"

13 
	~"˝oﬁ_π_öã∫Æ.h
"

15 
ölöe
 const *

16 
	$__˝oﬁ_π_°©_desc
(
˝oﬁ_°©
 *
°©
)

18 i‡(
°©
->
thrŸée_⁄
) {

19 i‡(
°©
->
su•íded
)

23 } i‡(
°©
->
su•íded
)

27 
	}
}

30 
	$˝oﬁ_π_scheduÀr_m≠_dump
(
˝oﬁ_c‹e_t
 *
c‹e
, *
buff
, 
size_t
 
bufÊí
)

32 
n
, 
Àn
 = 
bufÊí
;

33 
tsk_wªf
, 
ev_wªf
;

34 *
pos
 = 
buff
;

35 
˘ask_t
 
èsk
 = {0};

36 
˝oﬁ_°©
 
°©
;

37 
˝oﬁ_c‹e_°©
 
c‹e_°©
;

39 
˝oﬁ_π_t
 *
πp
 = 
c‹e
->
¥iv
;

43 
__buf„r
[4000] = {0};

48 i‡(!
buff
) {

49 
pos
 = 
__buf„r
;

50 
Àn
 = (
__buf„r
);

51 
bufÊí
 = 
Àn
;

53 *
pos
 = '\0';

58 
	`OSPX_±hªad_muãx_lock
(&
c‹e
->
mut
);

59 
	`˝oﬁ_c‹e_°©l
(
c‹e
, &
c‹e_°©
);

60 
°©
.
cuπasks_ªmovög
 = 
πp
->
tsks_hñd_by_di•©chî
;

61 
°©
.
thrŸée_⁄
 = 
πp
->throttle_on;

62 i‡(
c‹e_°©
.
n_q≥ndögs
) {

63 i‡(
πp
->
lÊags
 & 
eFUNC_F_PRIORITY
)

64 
èsk
 = *
	`__˝oﬁ_com_¥iq_t›
(&
πp
->
c
);

66 
èsk
 = *
	`li°_fú°_íåy
(&
πp
->
ªady_q
, 
˘ask_t
, 
lök
);

68 
tsk_wªf
 = 
πp
->tsk_wref;

69 
ev_wªf
 = 
πp
->ev_wref;

70 
	`OSPX_±hªad_muãx_u∆ock
(&
c‹e
->
mut
);

72 
	`__˝oﬁ_π_°©_c⁄v
(
πp
, &
c‹e_°©
, &
°©
);

78 
n
 = 
	`¢¥ötf
(
pos
, 
Àn
,

81 
°©
.
desc
, 
πp
, sèt.
maxthªads
, sèt.
möthªads
,

82 
°©
.
cuπhªads_a˘ive
, sèt.
cuπhªads
, 
tsk_wªf
, 
ev_wªf
,

83 
°©
.
cuπasks_≥ndög
 + sèt.
cuπasks_ªmovög
,

84 
°©
.
cuπasks_≥ndög
 + sèt.
cuπasks_ªmovög
 + sèt.
cuπhªads_a˘ive
,

85 
°©
.
cuπasks_≥ndög
, sèt.cuπasks_≥ndög, 
	`__˝oﬁ_π_°©_desc
(&stat));

87 i‡(
n
 > 0 && 
°©
.
cuπasks_≥ndög
)

88 
n
 = 
	`¢¥ötf
(
pos
 +Ç, 
Àn
 -Ç,

90 
èsk
.
èsk_desc
,Åask.
¥i
,

91 (
ï_TOP
 =
èsk
.
¥i_pﬁicy
) ? "top" : "back",

93 i‡(
n
 < 0)

94 
buff
[
bufÊí
-1] = '\0';

96  
buff
 ? buf‡: 
__buf„r
;

97 
	}
}

	@pool/rt/cpool_rt_struct.h

1 #i‚de‡
__CPOOL_RT_STRUCT_H__


2 
	#__CPOOL_RT_STRUCT_H__


	)

13 
	~"˝oﬁ_c‹e_°ru˘.h
"

14 
	~"˝oﬁ_com_¥iq.h
"

16 
	#M_RT
 "RT"

	)

18 
˝oﬁ_π
 
	t˝oﬁ_π_t
;

20 
	s˝oﬁ_π
 {

24 
˝oﬁ_c‹e_t
 *
	mc‹e
;

29 
	mlÊags
;

37 
	mªf_sync
;

38 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_sync
;

43 
	mthrŸée_⁄
;

44 
	mev_wªf
;

45 
	mev_√ed_nŸify
;

46 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_evít
;

51 
	m¥iq_num
;

52 
˝riq_t
 *
	m¥iq
;

53 
˝riq_c⁄èöî_t
 
	mc
;

58 
li°_hód
 
	mªady_q
;

63 
	mn
;

64 
	mtsks_hñd_by_di•©chî
;

69 
	mtsk_wªf
;

70 
	mtsk_√ed_nŸify
;

71 
OSPX_±hªad_c⁄d_t
 *
	mc⁄d_èsk
;

76 
OSPX_±hªad_c⁄d_t
 
	mc⁄d_com
;

	@stpool.c

11 
	~<°dio.h
>

12 
	~<as£π.h
>

14 
	~"o•x.h
"

15 
	~"o•x_î∫o.h
"

16 
	~"o•x_com∑tibÀ.h
"

17 
	~"timî.h
"

18 
	~"msglog.h
"

19 
	~"objpoﬁ.h
"

20 
	~"˝oﬁ_waô.h
"

21 
	~"˝oﬁ_Á˘‹y.h
"

22 
	~"°poﬁ.h
"

23 
	~"°poﬁ_öã∫Æ.h
"

25 
size_t
 
	g___objÀn
 = 0;

26 
smˇche_t
 *
	g___smc
 = 
NULL
;

32 
	$__°poﬁ_èsk_size_öô
()

34 c⁄° *
Ác_desc
;

35 c⁄° 
˝oﬁ_Á˘‹y_t
 *
Ác
;

40 
Ác
=
	`fú°_Á˘‹y
(&
Ác_desc
); fac; fac=
	`√xt_Á˘‹y
(&fac_desc)) {

41 i‡(!(
Ác
->
efuncs
 & 
eFUNC_F_TASK_EX
))

44 
___objÀn
 = 
	`max
(___objÀn, 
Ác
->
mëhod
->
me
.
èsk_size
);

47 i‡(!
___objÀn
)

48 
___objÀn
 = (
˘ask_t
);

49 
	}
}

51 
EXPORT
 
size_t


52 
	$°poﬁ_èsk_size
()

54 
OSPX_±hªad_⁄˚_t
 
___o˘l
 = 
OSPX_PTHREAD_ONCE_INIT
;

56 i‡(!
___objÀn
)

57 
	`OSPX_±hªad_⁄˚
(&
___o˘l
, 
__°poﬁ_èsk_size_öô
);

59  
___objÀn
;

60 
	}
}

62 
EXPORT
 

63 
°poﬁ_èsk_öô
(
°èsk
 *
±ask
, 
°poﬁ_t
 *
poﬁ
,

64 c⁄° *
«me
, (*
run
)(
°èsk
 *
±ask
),

65 (*
îr_h™dÀr
)(
°èsk
 *
±ask
, 
ªas⁄s
),

66 *
¨g
)

68 
	`__°poﬁ_èsk_INIT
(
	`TASK_CAST_DOWN
(
±ask
), 
«me
, 
run
, 
îr_h™dÀr
, 
¨g
);

70  
	`°poﬁ_èsk_£t_p
(
±ask
, 
poﬁ
);

71 
	}
}

73 
EXPORT
 

74 
	$°poﬁ_èsk_deöô
(
°èsk
 *
±ask
)

76 
˝oﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

78 i‡(
poﬁ
 && 
	`_INVOKEABLE0
(
èsk_deöô
,Öool))

79 
	`_INVOKE0
(
èsk_deöô
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
));

80 
	}
}

82 
EXPORT
 
°èsk
 *

83 
°poﬁ_èsk_√w
(
°poﬁ_t
 *
poﬁ
, c⁄° *
«me
,

84 (*
run
)(
°èsk
 *
±ask
),

85 (*
îr_h™dÀr
)(
°èsk
 *
±ask
, 
ªas⁄s
),

86 *
¨g
)

88 
e
;

89 
˘ask_t
 *
±ask
;

94 i‡(
poﬁ
 && !(
eFUNC_F_TASK_EX
 &Öoﬁ->
efuncs
)) {

95 
	`MSG_log
(
M_POOL
, 
LOG_ERR
,

97 
poﬁ
->
desc
,Öoﬁ,Öoﬁ->
efuncs
);

98  
NULL
;

101 i‡(!(
±ask
 = 
	`__°poﬁ_ˇche_gë
(
NULL
)))

102  
NULL
;

104 
	`__°poﬁ_èsk_INIT
(
±ask
, 
«me
, 
run
, 
îr_h™dÀr
, 
¨g
);

105 i‡(
poﬁ
 && (
e
 = 
	`__°poﬁ_èsk_£t_p
(
±ask
,Öool))) {

106 
	`MSG_log2
(
M_POOL
, 
LOG_ERR
,

108 
e
);

109  
NULL
;

112  
	`TASK_CAST_UP
(
±ask
);

113 
	}
}

115 
EXPORT
 
°èsk
 *

116 
	$°poﬁ_èsk_˛⁄e
(
°èsk
 *
±ask
, 
˛⁄e_sch©å
)

118 
°èsk
 *
≈èsk
;

120 
≈èsk
 = 
	`°poﬁ_èsk_√w
(
	`TASK_CAST_DOWN
(
±ask
)->
poﬁ
,Öèsk->
èsk_«me
,

121 
±ask
->
èsk_run
,Öèsk->
èsk_îr_h™dÀr
,Öèsk->
èsk_¨g
);

122 i‡(
≈èsk
) {

123 i‡(
˛⁄e_sch©å
) {

124 
sch©å
 
©å
;

126 
	`°poﬁ_èsk_gësch©å
(
±ask
, &
©å
);

127 
	`°poﬁ_èsk_£tsch©å
(
≈èsk
, &
©å
);

129 
	`TASK_CAST_DOWN
(
≈èsk
)->
gid
 = TASK_CAST_DOWN(
±ask
)->gid;

132  
≈èsk
;

133 
	}
}

135 
EXPORT
 

136 
	$°poﬁ_èsk_dñëe
(
°èsk
 *
±ask
)

138 
˘ask_t
 *
±ask0
 = 
	`TASK_CAST_DOWN
(
±ask
);

140 
	`as£π
 (
±ask
 && 
___smc
);

141 
	`as£π
 (!(
eTASK_VM_F_CACHE
 & 
±ask0
->
f_vmÊags
));

143 i‡(
±ask0
->
f_°©
 ||Öèsk0->
ªf
) {

144 
	`as£π
 (
±ask0
->
poﬁ
);

146 i‡(
±ask0
->
f_°©
 ||

147 (!
	`_INVOKEABLE0
(
èsk_wsync
, 
±ask0
->
poﬁ
Ë|| 
	`_INVOKE0
(task_wsync,Ötask0->pool,Ötask0))) {

148 
	`MSG_log
(
M_POOL
, 
LOG_ERR
,

150 
±ask0
->
èsk_desc
,Öèsk0,Öèsk0->
ªf
,Öèsk0->
èsk_code
,

151 
±ask0
->
poﬁ
 ? 
	`_INVOKE0
(
èsk_°©
,Öèsk0->poﬁ,Öèsk0, 
NULL
Ë:Öèsk0->
f_°©
);

153 
	`as£π
 (!
±ask0
->
ªf
);

156 i‡(
	`_INVOKEABLE0
(
èsk_deöô
, 
±ask0
->
poﬁ
))

157 
	`_INVOKE0
(
èsk_deöô
, 
±ask0
->
poﬁ
,Ötask0);

159 
	`__°poﬁ_ˇche_put
(
NULL
, 
±ask0
);

160 
	}
}

162 
EXPORT
 

163 
	$°poﬁ_èsk_£t_p
(
°èsk
 *
±ask
, 
°poﬁ_t
 *
poﬁ
)

165 
e
 = 0;

166 
˘ask_t
 *
±ask0
 = 
	`TASK_CAST_DOWN
(
±ask
);

168 i‡(
±ask0
->
poﬁ
 !=Öool) {

169 i‡(
±ask0
->
ªf
 ||Öèsk0->
f_°©
) {

170 
˝oﬁ_t
 *
poﬁ
 = 
±ask0
->pool;

172 
	`as£π
 (
poﬁ
);

173 i‡(
±ask0
->
f_°©
) {

174 
	`MSG_log
(
M_POOL
, 
LOG_WARN
,

176 
__FUNCTION__
, 
±ask0
->
èsk_desc
,Öèsk0,Öèsk0->
ªf
,

177 
poﬁ
 ? 
	`_INVOKE0
(
èsk_°©
,Öoﬁ, 
±ask0
, 
NULL
) : ()NULL);

179  
POOL_TASK_ERR_BUSY
;

182 i‡(!
	`_INVOKEABLE0
(
èsk_wsync
, 
poﬁ
Ë|| (
e
 = 
	`_INVOKE0
—ask_wsync,Öoﬁ, 
±ask0
))) {

183 
	`MSG_log
(
M_POOL
, 
LOG_WARN
,

186 
±ask
->
èsk_«me
,Öèsk, 
±ask0
->
ªf
,

187 
	`_INVOKE0
(
èsk_°©
, 
poﬁ
, 
±ask0
, 
NULL
));

189  
	`__°poﬁ_libîr‹
(
e
);

191 
	`as£π
 (!
±ask0
->
ªf
 && !±ask0->
f_°©
);

197 i‡(
±ask0
->
poﬁ
 && 
	`_INVOKEABLE0
(
èsk_deöô
,Ötask0->pool)) {

198 
	`_INVOKE0
(
èsk_deöô
, 
±ask0
->
poﬁ
,Ötask0);

199 
±ask0
->
poﬁ
 = 
NULL
;

202  
	`__°poﬁ_èsk_£t_p
(
±ask0
, 
poﬁ
);

206 
	}
}

208 
EXPORT
 
°poﬁ_t
 *

209 
	$°poﬁ_èsk_p
(
°èsk
 *
±ask
)

211  
	`TASK_CAST_DOWN
(
±ask
)->
poﬁ
;

212 
	}
}

214 
EXPORT
 const *

215 
	$°poﬁ_èsk_≤ame
(
°èsk
 *
±ask
)

217 
°poﬁ_t
 *
p
 = 
	`TASK_CAST_DOWN
(
±ask
)->
poﬁ
;

219  
p
 ?Ö->
desc
 : 
NULL
;

220 
	}
}

222 
EXPORT
 

223 
	$°poﬁ_èsk_£t_u£rÊags
(
°èsk
 *
±ask
, 
uÊags
)

225 
	`TASK_CAST_DOWN
(
±ask
)->
u£r_Êags
 = 
uÊags
;

226 
	}
}

228 
EXPORT
 

229 
	$°poﬁ_èsk_gë_u£rÊags
(
°èsk
 *
±ask
)

231  
	`TASK_CAST_DOWN
(
±ask
)->
u£r_Êags
;

232 
	}
}

234 
EXPORT
 

235 
	$°poﬁ_èsk_£tsch©å
(
°èsk
 *
±ask
, 
sch©å
 *
©å
)

240 i‡(
©å
->
sche_¥i
 < 0)

241 
©å
->
sche_¥i
 = 0;

242 i‡(
©å
->
sche_¥i
 > 99)

243 
©å
->
sche_¥i
 = 99;

249 i‡(!
©å
->
≥rm™ít
)

250 
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 |
eTASK_VM_F_PRI_ONCE
;

252 
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 &~
eTASK_VM_F_PRI_ONCE
;

258 i‡(!
©å
->
sche_¥i_pﬁicy
 || (!©å->
sche_¥i
 && 
ï_SCHE_BACK
 ==áttr->sche_pri_policy)) {

259 
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 &~(
eTASK_VM_F_PRI
|
eTASK_VM_F_ADJPRI
);

260 
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 |
eTASK_VM_F_PUSH
;

261 
	`TASK_CAST_DOWN
(
±ask
)->
¥i
 = 0;

262 
	`TASK_CAST_DOWN
(
±ask
)->
¥iq
 = 0;

270 
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 |(
eTASK_VM_F_PRI
|
eTASK_VM_F_ADJPRI
);

271 
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 &~
eTASK_VM_F_PUSH
;

272 
	`TASK_CAST_DOWN
(
±ask
)->
¥i
 = 
©å
->
sche_¥i
;

274 
	`TASK_CAST_DOWN
(
±ask
)->
¥i_pﬁicy
 = 
©å
->
sche_¥i_pﬁicy
;

275 
	}
}

277 
EXPORT
 

278 
	$°poﬁ_èsk_gësch©å
(
°èsk
 *
±ask
, 
sch©å
 *
©å
)

280 
©å
->
sche_¥i
 = 
	`TASK_CAST_DOWN
(
±ask
)->
¥i
;

281 
©å
->
sche_¥i_pﬁicy
 = 
	`TASK_CAST_DOWN
(
±ask
)->
¥i_pﬁicy
;

283 i‡(
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 & 
eTASK_VM_F_PRI_ONCE
)

284 
©å
->
≥rm™ít
 = 0;

286 
©å
->
≥rm™ít
 = 1;

287 
	}
}

289 
EXPORT
 

290 
	$°poﬁ_èsk_queue
(
°èsk
 *
±ask
)

292 
e
;

293 
°poﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

295 i‡(!
poﬁ
)

296  
POOL_TASK_ERR_DESTINATION
;

298 i‡((
e
=
	`_INVOKE0
(
èsk_queue
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
))))

299  
	`__°poﬁ_libîr‹
(
e
);

302 
	}
}

304 
EXPORT
 

305 
	$°poﬁ_èsk_ªmove
(
°èsk
 *
±ask
, 
di•©ched_by_poﬁ
)

307 
˝oﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

309 i‡(!
poﬁ
 || !
	`TASK_CAST_DOWN
(
±ask
)->
f_°©
)

312 i‡(
	`_INVOKEABLE0
(
èsk_ªmove
, 
poﬁ
))

313  
	`_INVOKE0
(
èsk_ªmove
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
), 
di•©ched_by_poﬁ
);

315 i‡(
	`_INVOKEABLE0
(
èsk_m¨k
, 
poﬁ
))

316 
	`_INVOKE0
(
èsk_m¨k
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
), 
di•©ched_by_poﬁ
 ?

317 
TASK_VMARK_REMOVE_BYPOOL
 : 
TASK_VMARK_REMOVE
);

319  
	`TASK_CAST_DOWN
(
±ask
)->
f_°©
 ? 0 : 1;

320 
	}
}

326 
EXPORT
 

327 
	$°poﬁ_èsk_dëach
(
°èsk
 *
±ask
)

329 
˝oﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

331 i‡(
	`_INVOKEABLE0
(
èsk_dëach
, 
poﬁ
))

332 
	`_INVOKE0
(
èsk_dëach
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
));

333 
	}
}

335 
EXPORT
 

336 
	$°poﬁ_èsk_m¨k
(
°èsk
 *
±ask
, 
lÊags
)

338 
˝oﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

340 i‡(
poﬁ
 && 
	`_INVOKEABLE0
(
èsk_m¨k
,Öool))

341 
	`_INVOKE0
(
èsk_m¨k
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
), 
lÊags
);

342 
	}
}

344 
EXPORT
 

345 
	$°poﬁ_èsk_±hrŸée_waô
(
°èsk
 *
±ask
, 
ms
)

347 
°poﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

349 i‡(!
poﬁ
) {

350 
	`MSG_log
(
M_POOL
, 
LOG_WARN
,

352 
±ask
->
èsk_«me
,Ötask);

353  
POOL_TASK_ERR_DESTINATION
;

356  
	`°poﬁ_thrŸée_waô
(
poﬁ
, 
ms
);

357 
	}
}

359 
EXPORT
 

360 
	$°poﬁ_èsk_waô
(
°èsk
 *
±ask
, 
ms
)

362 
e
;

363 
˝oﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

365 i‡(!
poﬁ
 || !
	`TASK_CAST_DOWN
(
±ask
)->
f_°©
)

368 i‡(!
	`_INVOKEABLE0
(
èsk_waô
, 
poﬁ
))

369  
POOL_ERR_NSUPPORT
;

371 i‡((
e
=
	`_INVOKE0
(
èsk_waô
, 
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
), 
ms
)))

372  
	`__°poﬁ_libîr‹
(
e
);

375 
	}
}

377 
EXPORT
 

378 
	$°poﬁ_èsk_waô_Æl
(
°èsk
 *
íåy
[], 
n
, 
ms
)

380 
idx
, 
e
 = 0;

381 
uöt64_t
 
s˛ock
 = (
ms
 > 0Ë? 
	`us_°¨å
() : 0;

388 
idx
=0; idx<
n
; idx++)

389 i‡(
íåy
[
idx
] && !
	`°poﬁ_èsk_is_‰ì
(entry[idx]))

396 i‡(
idx
 =
n
)

399 
e
 = 
	`°poﬁ_èsk_waô
(
íåy
[
idx
], 
ms
);

404 i‡(
ms
 > 0 &&

405 0 > (
ms
 -
	`us_ídr
(
s˛ock
) / 1000))

406 
ms
 = 0;

407 } !
e
);

409  
e
;

410 
	}
}

412 
EXPORT
 

413 
	$°poﬁ_èsk_waô_™y
(
°èsk
 *
íåy
[], 
n
, 
ms
)

415 
idx
, 
e
;

416 
°poﬁ_t
 *
poﬁ
 = 
NULL
;

421 
idx
=0; idx<
n
; idx++) {

422 i‡(!
íåy
[
idx
])

428 i‡(
	`°poﬁ_èsk_is_‰ì
(
íåy
[
idx
]Ë|| !
	`TASK_CAST_DOWN
”¡ry[idx])->
poﬁ
)

434 i‡(!
poﬁ
)

435 
poﬁ
 = 
	`TASK_CAST_DOWN
(
íåy
[
idx
])->pool;

437 i‡(
	`TASK_CAST_DOWN
(
íåy
[
idx
])->
poﬁ
 !=Öool)

438  
POOL_TASK_ERR_DESTINATION
;

441 i‡(!
poﬁ
)

444 i‡(!
	`_INVOKEABLE0
(
waô_™y2
, 
poﬁ
))

445  
POOL_ERR_NSUPPORT
;

447 i‡((
e
=
	`_INVOKE0
(
waô_™y2
, 
poﬁ
, (
˘ask_t
 **)
íåy
, 
n
, 
ms
)))

448  
	`__°poﬁ_libîr‹
(
e
);

451 
	}
}

453 
EXPORT
 

454 
	$°poﬁ_èsk_°©
(
°èsk
 *
±ask
)

456 
˘ask_t
 *
±ask0
 = 
	`TASK_CAST_DOWN
(
±ask
);

457 
˝oﬁ_t
 *
poﬁ
 = 
±ask0
->pool;

462 
	`as£π
 (
±ask0
->
èsk_run
);

464 i‡(!
poﬁ
 || !
±ask0
->
f_°©
)

467  
±ask0
->
f_°©
;

468 
	}
}

470 
EXPORT
 

471 
	$°poﬁ_èsk_vm
(
°èsk
 *
±ask
)

473  
	`TASK_CAST_DOWN
(
±ask
)->
f_vmÊags
 & (
eTASK_VM_F_REMOVE_FLAGS
|
eTASK_VM_F_DISABLE_QUEUE
|
eTASK_VM_F_ENABLE_QUEUE
);

474 
	}
}

476 
EXPORT
 

477 
	$°poﬁ_èsk_°©2
(
°èsk
 *
±ask
, *
vm
)

479 
°©
;

480 
˘ask_t
 *
±ask0
 = 
	`TASK_CAST_DOWN
(
±ask
);

481 
˝oﬁ_t
 *
poﬁ
 = 
±ask0
->pool;

486 
	`as£π
 (
±ask0
->
èsk_run
);

488 i‡(!
poﬁ
) {

489 i‡(
vm
)

490 *
vm
 = 0;

495 
°©
 = 
	`_INVOKE0
(
èsk_°©
, 
poﬁ
, 
±ask0
, 
vm
);

496 i‡(
vm
)

497 *
vm
 &(
eTASK_VM_F_REMOVE_FLAGS
|
eTASK_VM_F_DISABLE_QUEUE
|
eTASK_VM_F_ENABLE_QUEUE
);

499  
°©
;

500 
	}
}

503 
EXPORT
 

504 
	$°poﬁ_èsk_is_‰ì
(
°èsk
 *
±ask
)

506  !
	`TASK_CAST_DOWN
(
±ask
)->
f_°©
;

507 
	}
}

513 
	$__lib_ªgi°_©exô
(*
›aque
)

515 
˝oﬁ_t
 *
poﬁ
 = 
›aque
;

517 
poﬁ
->
	`‰ì
(pool);

518 
	}
}

520 
EXPORT
 const *

521 
	$°poﬁ_vîsi⁄
()

524 
	}
}

526 
EXPORT
 const *

527 
	$°poﬁ_°ªº‹
(
îr‹
)

529 c⁄° *
îrmsgs
[] = {

550 i‡(
îr‹
 >0 &&Éº‹ <(
îrmsgs
)/(*errmsgs)) {

551 i‡(
îr‹
 =
POOL_ERR_î∫o
)

552  
	`OSPX_sys_°ªº‹
(
î∫o
);

554  
îrmsgs
[
îr‹
];

558 
	}
}

560 
EXPORT
 
°poﬁ_t
 *

561 
	$°poﬁ_¸óã
(c⁄° *
desc
, 
eCAPs
, 
maxthªads
, 
möthªads
, 
su•íd
, 
¥i_q_num
)

563 
˝oﬁ_t
 *
poﬁ
 = 
NULL
;

564 
ñibCAPs
;

565 
nfuncs
;

566 c⁄° *
Ác_desc
;

567 c⁄° 
˝oﬁ_Á˘‹y_t
 *
Ác
;

568 
eCAPs_buf„r
[400];

570 
	sÁc_ˇndid©e
 {

571 c⁄° *
Ác_desc
;

572 
nfuncs
;

573 
eCAPs
;

574 c⁄° 
˝oﬁ_Á˘‹y_t
 *
Ác
;

575 } 
Ác_£l
[20];

576 
idx
, 
£l_idx
 = 0;

583 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

585 
desc
, 
	`__eCAPs_desc
(
eCAPs
, 
eCAPs_buf„r
));

590 
Ác
=
	`fú°_Á˘‹y
(&
Ác_desc
); fac; fac=
	`√xt_Á˘‹y
(&fac_desc)) {

591 
ñibCAPs
 = 
	`__íum_CAPs
(
Ác
, &
nfuncs
);

592 i‡((
ñibCAPs
 & 
eCAPs
) ==ÉCAPs) {

593 
	`MSG_log
(
M_POOL
, 
LOG_DEBUG
,

595 
Ác_desc
, 
Ác
->
sc‹es
, 
nfuncs
, 
	`__eCAPs_desc
(
ñibCAPs
, 
eCAPs_buf„r
));

600 i‡(
£l_idx
 =(
Ác_£l
)/(*fac_sel))

606 
idx
=0; idx<
£l_idx
; idx++) {

607 i‡(
Ác
->
sc‹es
 > 
Ác_£l
[
idx
].fac->scores ||

608 (
Ác
->
sc‹es
 =
Ác_£l
[
idx
].Ác->sc‹e†&& 
nfuncs
 > fac_sel[idx].nfuncs)) {

609 
	`memmove
(
Ác_£l
 + 
idx
 + 1, fac_£»+ idx, (
£l_idx
 - idxË* (
Ác_ˇndid©e
));

613 
Ác_£l
[
idx
].
Ác_desc
 = fac_desc;

614 
Ác_£l
[
idx
].
nfuncs
 =Çfuncs;

615 
Ác_£l
[
idx
].
eCAPs
 = 
ñibCAPs
;

616 
Ác_£l
[
idx
].
Ác
 = fac;

617 ++ 
£l_idx
;

621 i‡(!
£l_idx
) {

622 
	`MSG_log
(
M_POOL
, 
LOG_ERR
,

624 
eCAPs
, 
	`°poﬁ_vîsi⁄
());

625  
NULL
;

628 
idx
=0; idx<
£l_idx
; idx++) {

629 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

631 
Ác_£l
[
idx
].
Ác_desc
, fac_£l[idx].
Ác
->
sc‹es
, fac_£l[idx].
nfuncs
, fac_£l[idx].
eCAPs
,ÉCAPs);

633 i‡((
poﬁ
 = 
Ác_£l
[
idx
].
Ác
->
	`¸óã
(
desc
, 
maxthªads
, 
möthªads
, 
¥i_q_num
, 
su•íd
))) {

634 
	`as£π
 (
poﬁ
->
me
 &&Öoﬁ->
˘x
);

638 
	`MSG_log2
(
M_POOL
, 
LOG_ERR
,

640 
Ác_£l
[
idx
].
Ác_desc
, fac_£l[idx].
Ác
);

643 i‡(
idx
 !
£l_idx
)

644 
	`_INVOKE0
(
©exô
, 
poﬁ
, 
__lib_ªgi°_©exô
,Öool);

646  
poﬁ
;

647 
	}
}

649 
EXPORT
 

650 
	$°poﬁ_ˇps
(
°poﬁ_t
 *
poﬁ
)

652  
	`__íum_CAPs2
(
poﬁ
->
efuncs
,Öoﬁ->
me
, 
NULL
);

653 
	}
}

655 
EXPORT
 const *

656 
	$°poﬁ_desc
(
°poﬁ_t
 *
poﬁ
)

658  
poﬁ
->
desc
;

659 
	}
}

661 
EXPORT
 

662 
	$°poﬁ_thªad_£tschóâr
(
°poﬁ_t
 *
poﬁ
, 
°poﬁ_th©å
 *
©å
)

664 
thªad_©å
 
©å0
 = {0};

666 i‡(
	`_INVOKEABLE0
(
£èâr
, 
poﬁ
)) {

670 
	`as£π
 ((
©å0
Ë=(*
©å
));

672 
	`mem˝y
(
©å
, &
©å0
, (*attr));

674 
	`_INVOKE0
(
£èâr
, 
poﬁ
, &
©å0
);

676 
	}
}

678 
EXPORT
 
°poﬁ_th©å
 *

679 
	$°poﬁ_thªad_gëschóâr
(
°poﬁ_t
 *
poﬁ
, 
°poﬁ_th©å
 *
©å
)

681 
thªad_©å
 
©å0
 = {0};

683 i‡(
	`_INVOKEABLE0
(
gë©å
, 
poﬁ
))

684 
	`_INVOKE0
(
gë©å
, 
poﬁ
, &
©å0
);

689 
	`as£π
 ((
©å0
Ë=(*
©å
));

690 
	`mem˝y
(
©å
, &
©å0
, (*attr));

692  
©å
;

693 
	}
}

695 
EXPORT
 

696 
	$°poﬁ_addªf
(
°poﬁ_t
 *
poﬁ
)

698 
	`as£π
 (
	`_INVOKEABLE0
(
addªf
, 
poﬁ
));

700  
	`_INVOKE0
(
addªf
, 
poﬁ
);

701 
	}
}

703 
EXPORT
 

704 
	$°poﬁ_ªÀa£
(
°poﬁ_t
 *
poﬁ
)

706 
ªf
;

708 
	`as£π
 (
	`_INVOKEABLE0
(
ªÀa£
, 
poﬁ
));

710 i‡(!(
ªf
 = 
	`_INVOKE0
(
ªÀa£
, 
poﬁ
)Ë&& 
___smc
)

711 
	`smˇche_Êush
(
___smc
, 1);

713  
ªf
;

714 
	}
}

716 
EXPORT
 

717 
	$°poﬁ_£t_a˘ivëimeo
(
°poﬁ_t
 *
poﬁ
, 
a˘timeo
, 
øndtimeo
)

719 i‡(
	`_INVOKEABLE0
(
£t_a˘ivëimeo
, 
poﬁ
))

720 
	`_INVOKE0
(
£t_a˘ivëimeo
, 
poﬁ
, 
a˘timeo
, 
øndtimeo
);

721 
	}
}

723 
EXPORT
 

724 
	$°poﬁ_adju°_abs
(
°poﬁ_t
 *
poﬁ
, 
maxthªads
, 
möthªads
)

726 
	`as£π
 (
	`_INVOKEABLE0
(
adju°_abs
, 
poﬁ
));

727 
	`_INVOKE0
(
adju°_abs
, 
poﬁ
, 
maxthªads
, 
möthªads
);

728 
	}
}

730 
EXPORT
 

731 
	$°poﬁ_adju°
(
°poﬁ_t
 *
poﬁ
, 
maxthªads
, 
möthªads
)

733 
	`as£π
 (
	`_INVOKEABLE0
(
adju°
, 
poﬁ
));

734 
	`_INVOKE0
(
adju°
, 
poﬁ
, 
maxthªads
, 
möthªads
);

735 
	}
}

737 
EXPORT
 

738 
	$°poﬁ_Êush
(
°poﬁ_t
 *
poﬁ
)

740 i‡(!
	`_INVOKEABLE0
(
Êush
, 
poﬁ
))

743  
	`_INVOKE0
(
Êush
, 
poﬁ
);

744 
	}
}

746 
EXPORT
 
poﬁ_°©
 *

747 
	$°poﬁ_°©
(
°poﬁ_t
 *
poﬁ
, 
poﬁ_°©
 *
°©
)

749 
poﬁ_°©
 
__°©
;

750 
˝oﬁ_°©
 
°©0
 = {0};

752 
	`as£π
 (
	`_INVOKEABLE0
(
°©
, 
poﬁ
));

753 
	`_INVOKE0
(
°©
, 
poﬁ
, &
°©0
);

754 i‡(!
°©
)

755 
°©
 = &
__°©
;

760 
	`as£π
 ((*
°©
Ë=(
°©0
));

761 
	`mem˝y
(
°©
, &
°©0
, (*stat));

763  
°©
;

764 
	}
}

766 
EXPORT
 const *

767 
	$°poﬁ_°©_¥öt
(
°poﬁ_t
 *
poﬁ
)

769 
poﬁ_°©
 
°©
;

771 
	`°poﬁ_°©
(
poﬁ
, &
°©
);

773  
	`°poﬁ_°©_¥öt2
(&
°©
, 
NULL
, 0);

774 
	}
}

776 
EXPORT
 const *

777 
	$°poﬁ_°©_¥öt2
(
poﬁ_°©
 *
°©
, *
buf„r
, 
size_t
 
buf„æí
)

779 
__buf„r
[1024] = {0};

781 
tm
 *
p_tm
;

782 
buf„r0
[200] = {0}, 
buf„r1
[50];

783 *
pos
 = 
buf„r0
;

785 i‡(!
buf„r
) {

786 
buf„r
 = 
__buf„r
;

787 
buf„æí
 = (
__buf„r
);

790 
	#__libSTR
(
v
, 
buff
Ë(((vË=()-1Ë? "*" : (
	`•rötf
(buff, "%d", v), buff))

	)

791 
pos
 +
	`•rötf
’os, "Åasks_≥ak : %s\n", 
	`__libSTR
(
°©
->
èsks_≥ak
, 
buf„r1
));

792 
pos
 +
	`•rötf
’os, "Åasks_added : %s\n", 
	`__libSTR
(
°©
->
èsks_added
, 
buf„r1
));

793 
pos
 +
	`•rötf
’os, "èsks_¥o˚s£d: %s\n", 
	`__libSTR
(
°©
->
èsks_¥o˚s£d
, 
buf„r1
));

794 
pos
 +
	`•rötf
’os, "Åasks_ªmoved : %s\n", 
	`__libSTR
(
°©
->
èsks_ªmoved
, 
buf„r1
));

796 
p_tm
 = 
	`loˇ…ime
(&
°©
->
¸óãd
);

797 
buf„r
[
buf„æí
 -1] = '\0';

802 
	`¢¥ötf
(
buf„r
, 
buf„æí
 - 1,

820 
°©
->
desc
,

821 
p_tm
->
tm_yór
 + 1900,Ö_tm->
tm_m⁄
 + 1,Ö_tm->
tm_mday
,

822 
p_tm
->
tm_hour
,Ö_tm->
tm_mö
,Ö_tm->
tm_£c
,

823 
°©
->
ªf
,

824 
°©
->
¥iq_num
,

825 
°©
->
su•íded
 ? "yes" : "no",

826 
°©
->
thrŸée_íabÀd
 ? "on" : "off",

827 
°©
->
maxthªads
,

828 
°©
->
möthªads
,

829 ()
°©
->
a˘timeo
 / 1000,

830 ()
°©
->
øndtimeo
 / 1000,

831 
°©
->
cuπhªads
,

832 
°©
->
cuπhªads_a˘ive
,

833 
°©
->
cuπhªads_dyög
,

834 
°©
->
thªads_≥ak
,

835 
°©
->
cuπasks_≥ndög
,

836 
°©
->
cuπasks_schedulög
,

837 
°©
->
cuπasks_ªmovög
,

838 
buf„r0


841  
buf„r
;

842 
	}
}

844 
EXPORT
 *

845 
	$°poﬁ_scheduÀr_m≠_dump2
(
°poﬁ_t
 *
poﬁ
, *
buf„r
, 
Àn
)

847 i‡(!
	`_INVOKEABLE0
(
scheduÀr_m≠_dump
, 
poﬁ
))

848  
NULL
;

850  
	`_INVOKE0
(
scheduÀr_m≠_dump
, 
poﬁ
, 
buf„r
, 
Àn
);

851 
	}
}

853 
EXPORT
 

854 
°poﬁ_add_routöe
(
°poﬁ_t
 *
poﬁ
,

855 c⁄° *
«me
, (*
èsk_run
)(
°èsk
 *
±ask
),

856 (*
èsk_îr_h™dÀr
)(
°èsk
 *
±ask
, 
ªas⁄s
),

857 *
èsk_¨g
, 
sch©å
 *
©å
)

859 
e
;

860 
˘ask_t
 *
±ask
;

866 
±ask
 = 
	`__°poﬁ_ˇche_gë
(
poﬁ
);

867 i‡(!
±ask
)

868  
POOL_ERR_NOMEM
;

870 
	`__°poﬁ_èsk_INIT
(
±ask
, 
«me
, 
èsk_run
, 
èsk_îr_h™dÀr
, 
èsk_¨g
);

871 i‡(
©å
)

872 
	`°poﬁ_èsk_£tsch©å
(
	`TASK_CAST_UP
(
±ask
), 
©å
);

878 i‡((
e
 = 
	`__°poﬁ_èsk_£t_p
(
±ask
, 
poﬁ
)) ||

879 (
e
 = 
	`°poﬁ_èsk_queue
(
	`TASK_CAST_UP
(
±ask
)))) {

880 
	`__°poﬁ_ˇche_put
(
poﬁ
, 
±ask
);

881 
e
 = 
	`__°poﬁ_libîr‹
(e);

884  
e
;

885 
	}
}

887 
EXPORT
 

888 
	$°poﬁ_m¨k_Æl
(
°poﬁ_t
 *
poﬁ
, 
lÊags
)

890 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

892 
poﬁ
->
desc
,Öoﬁ, 
lÊags
);

894 i‡(!
	`_INVOKEABLE0
(
m¨k_Æl
, 
poﬁ
)) {

895 i‡(
	`_INVOKEABLE0
(
ªmove_Æl
, 
poﬁ
Ë&& 
TASK_VMARK_REMOVE
 & 
lÊags
)

896  
	`_INVOKE0
(
ªmove_Æl
, 
poﬁ
, 
lÊags
 & 
TASK_VMARK_REMOVE_BYPOOL
);

900  
	`_INVOKE0
(
m¨k_Æl
, 
poﬁ
, 
lÊags
);

901 
	}
}

903 
EXPORT
 

904 
	$°poﬁ_m¨k_cb
(
°poﬁ_t
 *
poﬁ
, 
WÆk_cb
 
wcb
, *
wcb_¨g
)

906 i‡(!
	`_INVOKEABLE0
(
m¨k_cb
, 
poﬁ
))

909  
	`_INVOKE0
(
m¨k_cb
, 
poﬁ
, (
Visô_cb
)
wcb
, 
wcb_¨g
);

910 
	}
}

912 
EXPORT
 

913 
	$°poﬁ_thrŸée_íabÀ
(
°poﬁ_t
 *
poﬁ
, 
íabÀ
)

915 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

917 
poﬁ
->
desc
,Öoﬁ, 
íabÀ
 ? "ENABLING" : "DISABLING");

919 i‡(!
	`_INVOKEABLE0
(
thrŸée_íabÀ
, 
poﬁ
))

920  
POOL_ERR_NSUPPORT
;

922 
	`_INVOKE0
(
thrŸée_íabÀ
, 
poﬁ
, 
íabÀ
);

924 
	}
}

926 
EXPORT
 

927 
	$°poﬁ_thrŸée_waô
(
°poﬁ_t
 *
poﬁ
, 
ms
)

929 
e
;

931 i‡(!
	`_INVOKEABLE0
(
thrŸée_waô
, 
poﬁ
))

934 i‡((
e
 = 
	`_INVOKE0
(
thrŸée_waô
, 
poﬁ
, 
ms
)))

935 
e
 = 
	`__°poﬁ_libîr‹
(e);

937  
e
;

938 
	}
}

940 
EXPORT
 

941 
	$°poﬁ_su•íd
(
°poﬁ_t
 *
poﬁ
, 
ms
)

943 
e
;

945 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

947 
poﬁ
->
desc
,Öoﬁ, 
ms
);

949 i‡(!
	`_INVOKEABLE0
(
su•íd
, 
poﬁ
))

950  
POOL_ERR_NSUPPORT
;

952 i‡((
e
=
	`_INVOKE0
(
su•íd
, 
poﬁ
, 
ms
)))

953  
	`__°poﬁ_libîr‹
(
e
);

956 
	}
}

958 
EXPORT
 

959 
	$°poﬁ_ªsume
(
°poﬁ_t
 *
poﬁ
)

961 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

963 
poﬁ
->
desc
,Öool);

965 i‡(
	`_INVOKEABLE0
(
ªsume
, 
poﬁ
))

966 
	`_INVOKE0
(
ªsume
, 
poﬁ
);

967 
	}
}

969 
EXPORT
 

970 
	$°poﬁ_ªmove_Æl
(
°poﬁ_t
 *
poﬁ
, 
di•©ched_by_poﬁ
)

972 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

974 
poﬁ
->
desc
,Öoﬁ, 
di•©ched_by_poﬁ
);

976 i‡(!
	`_INVOKEABLE0
(
ªmove_Æl
, 
poﬁ
))

979  
	`_INVOKE0
(
ªmove_Æl
, 
poﬁ
, 
di•©ched_by_poﬁ
);

980 
	}
}

982 
EXPORT
 

983 
	$°poﬁ_wakeid
()

985  
	`WWAKE_id
();

986 
	}
}

988 
EXPORT
 

989 
	$°poﬁ_waô_Æl
(
°poﬁ_t
 * 
poﬁ
, 
ms
)

991 
e
;

992 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

994 
poﬁ
->
desc
,Öoﬁ, 
ms
);

996 i‡(!
	`_INVOKEABLE0
(
waô_Æl
, 
poﬁ
))

997  
POOL_ERR_NSUPPORT
;

999 i‡((
e
 = 
	`_INVOKE0
(
waô_Æl
, 
poﬁ
, 
ms
)))

1000 
e
 = 
	`__°poﬁ_libîr‹
(e);

1002  
e
;

1003 
	}
}

1005 
EXPORT
 

1006 
	$°poﬁ_waô_cb
(
°poﬁ_t
 *
poﬁ
, 
WÆk_cb
 
wcb
, *
wcb_¨g
, 
ms
)

1008 
e
;

1010 i‡(!
	`_INVOKEABLE0
(
waô_cb
, 
poﬁ
))

1011  
POOL_ERR_NSUPPORT
;

1013 i‡((
e
 = 
	`_INVOKE0
(
waô_cb
, 
poﬁ
, (
Visô_cb
)
wcb
, 
wcb_¨g
, 
ms
)))

1014 
e
 = 
	`__°poﬁ_libîr‹
(e);

1016  
e
;

1017 
	}
}

1019 
EXPORT
 

1020 
	$°poﬁ_waô_™y
(
°poﬁ_t
 *
poﬁ
, 
ms
)

1022 
e
;

1024 i‡(!
	`_INVOKEABLE0
(
waô_™y
, 
poﬁ
))

1025  
POOL_ERR_NSUPPORT
;

1027 i‡((
e
 = 
	`_INVOKE0
(
waô_™y
, 
poﬁ
, 
ms
)))

1028 
e
 = 
	`__°poﬁ_libîr‹
(e);

1030  
e
;

1031 
	}
}

1034 
EXPORT
 

1035 
	$°poﬁ_wakeup
(
wakeup_id
)

1037 
	`WWAKE_övoke
(
wakeup_id
);

1038 
	}
}

	@stpool.h

1 #i‚de‡
__ST_POOL_H__


2 
	#__ST_POOL_H__


	)

13 
	~<time.h
>

15 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
_WIN64
)

16 #ifde‡
_USRDLL


17 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

19 
	#EXPORT


	)

22 
	#EXPORT


	)

25 
	~"°poﬁ_ˇps.h
"

27 
˝oﬁ
 
	t°poﬁ_t
;

34 
	mPOOL_ERR_NOMEM
 = 1,

42 
	mPOOL_ERR_DESTROYING
 = 2,

50 
	mPOOL_ERR_THROTTLE
 = 4,

55 
	mPOOL_TASK_ERR_BUSY
 = 7,

68 
	mPOOL_TASK_ERR_DISABLE_QUEUE
 = 8,

74 
	mPOOL_TASK_ERR_DESTINATION
 = 9,

82 
	mPOOL_ERR_GROUP_THROTTLE
 = 10,

87 
	mPOOL_ERR_GROUP_NOT_FOUND
 = 11,

92 
	mPOOL_ERR_GROUP_DESTROYING
 = 12,

98 
	mPOOL_ERR_TIMEDOUT
 = 13,

106 
	mPOOL_ERR_INTERRUPTED
 = 14,

113 
	mPOOL_ERR_OTHER
 = 15,

118 
	mPOOL_ERR_NSUPPORT
 = 16,

125 
	mPOOL_ERR_î∫o
 = 17,

133 
	meRós⁄_ªmoved
 = 0x01,

139 
	meRós⁄_poﬁ_de°royög
 = 0x02,

144 
	meRós⁄_group_de°royög
 = 0x04,

148 
	s°èsk
 {

152 c⁄° *
	mèsk_«me
;

160 (*
	mèsk_run
)(
°èsk
 *
	m±ask
);

170 (*
	mèsk_îr_h™dÀr
)(
°èsk
 *
	m±ask
, 
	mªas⁄s
);

177 *
	mèsk_¨g
;

184 
	mèsk_code
;

193 
	mï_SCHE_TOP
 = 1,

199 
	mï_SCHE_BACK
,

203 
	ssch©å
 {

210 
	m≥rm™ít
;

215 
	msche_¥i
;

220 
	msche_¥i_pﬁicy
;

228 
	mTASK_STAT_WAIT
 = ()0x01,

233 
	mTASK_STAT_SCHEDULING
 = ()0x02,

238 
	mTASK_STAT_DISPATCHING
 = ()0x08,

244 
	mTASK_STAT_WAIT_PENDING
 = ()0x10,

249 
	mTASK_STAT_REMOVABLE
 = 
TASK_STAT_WAIT
|
TASK_STAT_WAIT_PENDING
,

263 
	mTASK_VMARK_REMOVE_BYPOOL
 = 0x0004,

269 
	mTASK_VMARK_REMOVE
 = 0x0008,

276 
	mTASK_VMARK_ENABLE_QUEUE
 = 0x0080,

281 
	mTASK_VMARK_DISABLE_QUEUE
 = 0x0040,

291 
	mTASK_VMARK_REMOVE_FLAGS
 = 
TASK_VMARK_REMOVE_BYPOOL
|
TASK_VMARK_REMOVE
,

298 
	mTASK_VMARK_USER_FLAGS
 = 
TASK_VMARK_REMOVE_FLAGS
|
TASK_VMARK_ENABLE_QUEUE
|

299 
TASK_VMARK_DISABLE_QUEUE
,

303 
	eï_SCHE


310 
	mï_SCHE_NONE
,

315 
	mï_SCHE_RR
,

320 
	mï_SCHE_FIFO
,

325 
	mï_SCHE_OTHER


329 
	s°poﬁ_th©å
 {

333 
	m°ack_size
;

338 
ï_SCHE
 
	mï_schï
;

343 
	msche_¥i‹ôy
;

347 
	spoﬁ_°©
 {

351 c⁄° *
	mdesc
;

356 
time_t
 
	m¸óãd
;

363 
	mªf
;

368 
	mwaôîs
;

373 
	m¥iq_num
;

387 
	mthrŸée_íabÀd
;

397 
	msu•íded
;

404 
	mmaxthªads
;

415 
	mmöthªads
;

420 
	mcuπhªads
;

425 
	mcuπhªads_a˘ive
;

435 
	mcuπhªads_dyög
;

443 
	ma˘timeo
;

450 
	møndtimeo
;

455 
	mèsks_≥ak
;

460 
	mthªads_≥ak
;

466 
	mèsks_added
;

472 
	mèsks_¥o˚s£d
;

478 
	mèsks_ªmoved
;

483 
	mcuπasks_≥ndög
;

488 
	mcuπasks_schedulög
;

493 
	mcuπasks_ªmovög
;

497 (*
	tWÆk_cb
)(
	t°èsk
 *
	t±ask
, *
	t›aque
);

499 #ifde‡
__˝lu•lus


508 
EXPORT
 
size_t
 
	`°poﬁ_èsk_size
();

530 
EXPORT
 
	`°poﬁ_èsk_öô
(
°èsk
 *
±ask
, 
°poﬁ_t
 *
poﬁ
,

531 c⁄° *
èsk_«me
, (*
èsk_run
)(
°èsk
 *
±ask
),

532 (*
èsk_îr_h™dÀr
)(
°èsk
 *
±ask
, 
ªas⁄s
),

533 *
èsk_¨g
);

544 
EXPORT
 
°èsk
 *
	`°poﬁ_èsk_√w
(
°poﬁ_t
 *
poﬁ
, c⁄° *
èsk_«me
,

545 (*
èsk_run
)(
°èsk
 *
±ask
),

546 (*
èsk_îr_h™dÀr
)(
°èsk
 *
±ask
, 
ªas⁄s
),

547 *
èsk_¨g
);

559 
EXPORT
 
°èsk
 *
	`°poﬁ_èsk_˛⁄e
(°èsk *
±ask
, 
˛⁄e_sch©å
);

586 
EXPORT
 
	`°poﬁ_èsk_dñëe
(
°èsk
 *
±ask
);

603 
EXPORT
 
	`°poﬁ_èsk_£t_p
(
°èsk
 *
±ask
, 
°poﬁ_t
 *
poﬁ
);

610 
EXPORT
 
°poﬁ_t
 *
	`°poﬁ_èsk_p
(
°èsk
 *
±ask
);

615 
EXPORT
 c⁄° *
	`°poﬁ_èsk_≤ame
(
°èsk
 *
±ask
);

627 
EXPORT
 
	`°poﬁ_èsk_£t_u£rÊags
(
°èsk
 *
±ask
, 
uÊags
);

632 
EXPORT
 
	`°poﬁ_èsk_gë_u£rÊags
(
°èsk
 *
±ask
);

642 
EXPORT
 
	`°poﬁ_èsk_£tsch©å
(
°èsk
 *
±ask
, 
sch©å
 *
©å
);

652 
EXPORT
 
	`°poﬁ_èsk_gësch©å
(
°èsk
 *
±ask
, 
sch©å
 *
©å
);

661 
EXPORT
 
	`°poﬁ_èsk_°©
(
°èsk
 *
±ask
);

670 
EXPORT
 
	`°poﬁ_èsk_vm
(
°èsk
 *
±ask
);

680 
EXPORT
 
	`°poﬁ_èsk_°©2
(
°èsk
 *
±ask
, *
vm
);

714 
EXPORT
 
	`°poﬁ_èsk_queue
(
°èsk
 *
±ask
);

726 
EXPORT
 
	`°poﬁ_èsk_ªmove
(
°èsk
 *
±ask
, 
di•©ched_by_poﬁ
);

736 
EXPORT
 
	`°poﬁ_èsk_m¨k
(
°èsk
 *
±ask
, 
lÊags
);

783 
EXPORT
 
	`°poﬁ_èsk_dëach
(
°èsk
 *
±ask
);

795 
EXPORT
 
	`°poﬁ_èsk_is_‰ì
(
°èsk
 *
±ask
);

812 
EXPORT
 
	`°poﬁ_èsk_±hrŸée_waô
(
°èsk
 *
±ask
, 
ms
);

826 
EXPORT
 
	`°poﬁ_èsk_waô
(
°èsk
 *
±ask
, 
ms
);

848 
EXPORT
 
	`°poﬁ_èsk_waô_Æl
(
°èsk
 *
íåy
[], 
n
, 
ms
);

868 
EXPORT
 
	`°poﬁ_èsk_waô_™y
(
°èsk
 *
íåy
[], 
n
, 
ms
);

877 
EXPORT
 c⁄° *
	`°poﬁ_vîsi⁄
();

886 
EXPORT
 c⁄° *
	`°poﬁ_°ªº‹
(
îr‹
);

939 
EXPORT
 
°poﬁ_t
 * 
	`°poﬁ_¸óã
(c⁄° *
desc
, 
eCAPs
, 
maxthªads
, 
möthªads
, 
su•íd
, 
¥i_q_num
);

948 
EXPORT
 
	`°poﬁ_ˇps
(
°poﬁ_t
 *
poﬁ
);

957 
EXPORT
 c⁄° *
	`°poﬁ_desc
(
°poﬁ_t
 *
poﬁ
);

970 
EXPORT
 
	`°poﬁ_thªad_£tschóâr
(
°poﬁ_t
 *
poﬁ
, 
°poﬁ_th©å
 *
©å
);

980 
EXPORT
 
°poﬁ_th©å
 *
	`°poﬁ_thªad_gëschóâr
(
°poﬁ_t
 *
poﬁ
, °poﬁ_th©å *
©å
);

995 
EXPORT
 
	`°poﬁ_addªf
(
°poﬁ_t
 *
poﬁ
);

1017 
EXPORT
 
	`°poﬁ_ªÀa£
(
°poﬁ_t
 *
poﬁ
);

1036 
EXPORT
 
	`°poﬁ_£t_a˘ivëimeo
(
°poﬁ_t
 *
poﬁ
, 
a˘timeo
, 
øndtimeo
);

1056 
EXPORT
 
	`°poﬁ_adju°_abs
(
°poﬁ_t
 *
poﬁ
, 
maxthªads
, 
möthªads
);

1076 
EXPORT
 
	`°poﬁ_adju°
(
°poﬁ_t
 *
poﬁ
, 
maxthªads
, 
möthªads
);

1098 
EXPORT
 
	`°poﬁ_Êush
(
°poﬁ_t
 *
poﬁ
);

1108 
EXPORT
 
poﬁ_°©
 *
	`°poﬁ_°©
(
°poﬁ_t
 *
poﬁ
, poﬁ_°© *
°©
);

1122 
EXPORT
 c⁄° *
	`°poﬁ_°©_¥öt2
(
poﬁ_°©
 *
°©
, *
buf„r
, 
size_t
 
buf„æí
);

1127 
EXPORT
 c⁄° *
	`°poﬁ_°©_¥öt
(
°poﬁ_t
 *
poﬁ
);

1142 
EXPORT
 *
	`°poﬁ_scheduÀr_m≠_dump2
(
°poﬁ_t
 *
poﬁ
, *
buf„r
, 
Àn
);

1147 
	#°poﬁ_scheduÀr_m≠_dump
(
poﬁ
Ë
	`°poﬁ_scheduÀr_m≠_dump2
’oﬁ, 
NULL
, 0)

	)

1167 
EXPORT
 
	`°poﬁ_su•íd
(
°poﬁ_t
 *
poﬁ
, 
ms
);

1178 
EXPORT
 
	`°poﬁ_ªsume
(
°poﬁ_t
 *
poﬁ
);

1201 
EXPORT
 
	`°poﬁ_add_routöe
(
°poﬁ_t
 *
poﬁ
,

1202 c⁄° *
«me
, (*
èsk_run
)(
°èsk
 *),

1203 (*
èsk_îr_h™dÀr
)(
°èsk
 *, 
ªas⁄s
),

1204 *
èsk_¨g
, 
sch©å
 *
©å
);

1220 
EXPORT
 
	`°poﬁ_ªmove_Æl
(
°poﬁ_t
 *
poﬁ
, 
di•©ched_by_poﬁ
);

1257 
EXPORT
 
	`°poﬁ_m¨k_Æl
(
°poﬁ_t
 *
poﬁ
, 
lÊags
);

1274 
EXPORT
 
	`°poﬁ_m¨k_cb
(
°poﬁ_t
 *
poﬁ
, 
WÆk_cb
 
wcb
, *
wcb_¨g
);

1289 
EXPORT
 
	`°poﬁ_thrŸée_íabÀ
(
°poﬁ_t
 *
poﬁ
, 
íabÀ
);

1309 
EXPORT
 
	`°poﬁ_wakeid
();

1322 
EXPORT
 
	`°poﬁ_thrŸée_waô
(
°poﬁ_t
 *
poﬁ
, 
ms
);

1335 
EXPORT
 
	`°poﬁ_waô_Æl
(
°poﬁ_t
 *
poﬁ
, 
ms
);

1354 
EXPORT
 
	`°poﬁ_waô_cb
(
°poﬁ_t
 *
poﬁ
, 
WÆk_cb
 
wcb
, *
wcb_¨g
, 
ms
);

1367 
EXPORT
 
	`°poﬁ_waô_™y
(
°poﬁ_t
 *
poﬁ
, 
ms
);

1394 
EXPORT
 
	`°poﬁ_wakeup
(
wakeup_id
);

1396 #ifde‡
__˝lu•lus


1397 
	}
}

	@stpool_caps.h

1 #i‚de‡
__STPOOL_CAPS_H__


2 
	#__STPOOL_CAPS_H__


	)

30 
	meCAP_F_DYNAMIC
 = 0x01L,

37 
	meCAP_F_FIXED
 = 0x02L,

42 
	meCAP_F_PRIORITY
 = 0x04L,

47 
	meCAP_F_THROTTLE
 = 0x08L,

52 
	meCAP_F_SUSPEND
 = 0x10L,

62 
	meCAP_F_TRACE
 = 0x20L,

67 
	meCAP_F_WAIT_ANY
 = 0x40L,

72 
	meCAP_F_WAIT_ALL
 = 0x80L,

77 
	meCAP_F_DISABLEQ
 = 0x1000L,

85 
	meCAP_F_REMOVE_BYPOOL
 = 0x2000L,

92 
	meCAP_F_ROUTINE
 = 0x080000L,

98 
	meCAP_F_CUSTOM_TASK
 = 0x100000L,

99 
	#eCAP_F_TASK_EX
 
eCAP_F_CUSTOM_TASK


	)

104 
	meCAP_F_TASK_WAIT
 = 0x200000L,

109 
	meCAP_F_TASK_WAIT_ALL
 = 0x400000L,

114 
	meCAP_F_TASK_WAIT_ANY
 = 0x800000L,

139 
	meCAP_F_GROUP
 = 0x01000000L,

144 
	meCAP_F_GROUP_THROTTLE
 = 0x020000L,

149 
	meCAP_F_GROUP_WAIT_ALL
 = 0x040000L,

154 
	meCAP_F_GROUP_WAIT_ANY
 = 0x080000L,

160 
	meCAP_F_GROUP_SUSPEND
 = 0x100000L,

165 
	meCAP_F_ALL
 = 
eCAP_F_DYNAMIC
|
eCAP_F_FIXED
|
eCAP_F_PRIORITY
|
eCAP_F_THROTTLE
|

166 
eCAP_F_SUSPEND
|
eCAP_F_WAIT_ANY
|
eCAP_F_WAIT_ALL
|eCAP_F_WAIT_ANY|
eCAP_F_TRACE
|

167 
eCAP_F_ROUTINE
|
eCAP_F_CUSTOM_TASK
|
eCAP_F_TASK_WAIT
|
eCAP_F_TASK_WAIT_ALL
|

168 
eCAP_F_DISABLEQ
|
eCAP_F_REMOVE_BYPOOL
|

169 
eCAP_F_GROUP
|
eCAP_F_GROUP_THROTTLE
|
eCAP_F_GROUP_WAIT_ANY
|
eCAP_F_GROUP_WAIT_ALL
|

170 
eCAP_F_GROUP_SUSPEND


	@stpool_group.c

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

15 
	~"msglog.h
"

16 
	~"timî.h
"

17 
	~"˝oﬁ_Á˘‹y.h
"

18 
	~"°poﬁ_öã∫Æ.h
"

19 
	~"°poﬁ_group.h
"

21 
EXPORT
 

22 
	$°poﬁ_èsk_£t_gid
(
°èsk
 *
±ask
, 
gid
)

24 
	`as£π
 (
	`TASK_CAST_DOWN
(
±ask
)->
gid
 == gid ||

25 !
	`TASK_CAST_DOWN
(
±ask
)->
f_°©
);

27 i‡(
	`TASK_CAST_DOWN
(
±ask
)->
poﬁ
 &&

28 (
	`TASK_CAST_DOWN
(
±ask
)->
f_°©
 || TASK_CAST_DOWN’èsk)->
ªf
)) {

29 
˘ask_t
 *
±ask0
 = 
	`TASK_CAST_DOWN
(
±ask
);

31 i‡(
	`_INVOKABLE2
(
group_¸óã
, 
±ask0
->
poﬁ
)) {

35 i‡(
	`_INVOKABLE1
(
èsk_wsync
, 
±ask0
->
poﬁ
))

36 
	`_INVOKE1
(
èsk_wsync
, 
±ask0
->
poﬁ
,Ötask0);

38 i‡(
±ask0
->
f_°©
 ||Öèsk0->
ªf
)

39 
	`MSG_log
(
M_POOL
, 
LOG_WARN
,

42 
±ask
->
èsk_«me
,Öèsk, 
±ask0
->
ªf
,Öèsk0->
f_vmÊags
,Öèsk0->
f_°©
);

45 
	`TASK_CAST_DOWN
(
±ask
)->
gid
 = gid;

46 
	}
}

48 
EXPORT
 

49 
	$°poﬁ_èsk_gid
(
°èsk
 *
±ask
)

51  
	`TASK_CAST_DOWN
(
±ask
)->
gid
;

52 
	}
}

54 
EXPORT
 const *

55 
	$°poﬁ_èsk_g«me2
(
°èsk
 *
±ask
, *
«me_buf„r
, 
Àn
)

57 
°poﬁ_t
 *
p
 = 
	`TASK_CAST_DOWN
(
±ask
)->
poﬁ
;

59 i‡(!
p
)

60  
NULL
;

62  
	`°poﬁ_group_«me2
(
p
, 
	`TASK_CAST_DOWN
(
±ask
)->
gid
, 
«me_buf„r
, 
Àn
);

63 
	}
}

65 
EXPORT
 

66 
	$°poﬁ_èsk_gthrŸée_waô
(
°èsk
 *
±ask
, 
ms
)

68 
°poﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

70 i‡(!
poﬁ
) {

71 
	`MSG_log
(
M_POOL
, 
LOG_WARN
,

73 
±ask
->
èsk_«me
,Ötask);

74  
POOL_TASK_ERR_DESTINATION
;

77  
	`°poﬁ_group_thrŸée_waô
(
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
)->
gid
, 
ms
);

78 
	}
}

80 
EXPORT
 

81 
	$°poﬁ_èsk_pgthrŸée_waô
(
°èsk
 *
±ask
, 
ms
)

83 
e
;

84 
uöt64_t
 
us_now
 = 0;

85 
us_ñ≠£d
;

86 
°poﬁ_t
 *
poﬁ
 = 
	`TASK_CAST_DOWN
(
±ask
)->pool;

88 i‡(!
poﬁ
) {

89 
	`MSG_log
(
M_POOL
, 
LOG_WARN
,

91 
±ask
->
èsk_«me
,Ötask);

92  
POOL_TASK_ERR_DESTINATION
;

95 i‡(
ms
 > 0)

96 
us_now
 = 
	`us_°¨å
();

98 i‡(!(
e
 = 
	`°poﬁ_thrŸée_waô
(
poﬁ
, 
ms
))) {

99 i‡(
ms
 > 0) {

100 
us_ñ≠£d
 = 
	`us_ídr
(
us_now
);

102 i‡(
us_ñ≠£d
 >
ms
 * 1000)

103 
ms
 = 0;

105 
ms
 -
us_ñ≠£d
 / 1000;

107 
e
 = 
	`°poﬁ_group_thrŸée_waô
(
poﬁ
, 
	`TASK_CAST_DOWN
(
±ask
)->
gid
, 
ms
);

110  
e
;

111 
	}
}

113 
EXPORT
 

114 
	$°poﬁ_group_¸óã
(
°poﬁ_t
 *
poﬁ
, c⁄° *
«me
, 
gscheduÀr_©å
 *
©å
, 
¥i_q_num
, 
su•íd
)

116 
group_id
 = -1;

118 i‡(
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

119 
group_id
 = 
	`_INVOKE2
(
group_¸óã
, 
poﬁ
, 
«me
, 
¥i_q_num
, 
su•íd
);

121 i‡(-1 !
group_id
 && 
©å
)

122 
	`°poﬁ_group_£èâr
(
poﬁ
, 
group_id
, 
©å
);

125  
group_id
;

126 
	}
}

128 
EXPORT
 

129 
	$°poﬁ_group_id
(
°poﬁ_t
 *
poﬁ
, c⁄° *
«me
)

131 i‡(!
	`°rcmp
(
«me
, 
	`°poﬁ_desc
(
poﬁ
)))

134 i‡(!
	`_INVOKABLE2
(
group_id
, 
poﬁ
))

137  
	`_INVOKE2
(
group_id
, 
poﬁ
, 
«me
);

138 
	}
}

140 
EXPORT
 const *

141 
	$°poﬁ_group_«me2
(
°poﬁ_t
 *
poﬁ
, 
gid
, *
«me_buf„r
, 
Àn
)

143 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

144 c⁄° *
desc
 = 
	`°poﬁ_desc
(
poﬁ
);

146 i‡(
«me_buf„r
) {

147 
	`°∫ˇt
(
«me_buf„r
, 
desc
, 
Àn
);

148  
«me_buf„r
;

150  
desc
;

153 i‡(!
	`_INVOKABLE2
(
group_desc
, 
poﬁ
))

154  
NULL
;

156  
	`_INVOKE2
(
group_desc
, 
poﬁ
, 
gid
, 
«me_buf„r
, 
Àn
);

157 
	}
}

159 
EXPORT
 
°èsk_group_°©
 *

160 
	$°poﬁ_group_°©
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
°èsk_group_°©
 *
°©
)

162 
˘ask_group_°©
 
g°©
;

164 i‡(!
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

165 
poﬁ_°©
 
p°©
;

167 i‡(
gid
)

168  
NULL
;

169 
	`°poﬁ_°©
(
poﬁ
, &
p°©
);

171 
°©
->
gid
 = 0;

172 
°©
->
desc
 = (*)
p°©
.desc;

173 
°©
->
desc_Àngth
 = 
	`°æí
(°©->
desc
);

174 
°©
->
©å
.
limô_∑øŒe_èsks
 = 
p°©
.
maxthªads
;

175 
°©
->
©å
.
ª˚ive_bíifôs
 = 1;

176 
°©
->
¸óãd
 = 
p°©
.created;

177 
°©
->
waôîs
 = 
p°©
.waiters;

178 
°©
->
su•íded
 = 
p°©
.suspended;

179 
°©
->
thrŸée_íabÀd
 = 
p°©
.throttle_enabled;

180 
°©
->
¥iq_num
 = 
p°©
.priq_num;

181 
°©
->
≈ídögs
 = 
p°©
.
cuπasks_≥ndög
;

182 
°©
->
ƒu¬ögs
 = 
p°©
.
cuπhªads_a˘ive
;

183 
°©
->
ndi•©chögs
 = 
p°©
.
cuπasks_ªmovög
;

185  
°©
;

188 
	`_INVOKE2
(
group_°©
, 
poﬁ
, 
gid
, &
g°©
);

190 
	`as£π
 ((*
°©
Ë=(
g°©
));

191 
	`mem˝y
(
°©
, &
g°©
, (*stat));

193  
°©
;

194 
	}
}

196 
EXPORT
 

197 
	$°poﬁ_group_°©_Æl
(
°poﬁ_t
 *
poﬁ
, 
°èsk_group_°©
 **
°©
)

199 
n
 = 0;

200 
˘ask_group_°©
 *
g°©
;

202 i‡(!
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

203 *
°©
 = 
	`mÆloc
((
°èsk_group_°©
));

205 i‡(*
°©
) {

206 
	`°poﬁ_group_°©
(
poﬁ
, 0, *
°©
);

207 
n
 = 1;

211 
n
 = 
	`_INVOKE2
(
group_°©_Æl
, 
poﬁ
, &
g°©
);

212 *
°©
 = (
°èsk_group_°©
 *)
g°©
;

215  
n
;

216 
	}
}

218 
EXPORT
 

219 
	$°poﬁ_group_£èâr
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
gscheduÀr_©å
 *
©å
)

221 
scheduÀr_©å
 
©å0
;

223 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

224 i‡(
©å
->
limô_∑øŒe_èsks
 <= 0)

225 
©å
->
limô_∑øŒe_èsks
 = 1;

227 
	`°poﬁ_adju°_abs
(
poﬁ
, 
©å
->
limô_∑øŒe_èsks
, 0);

231 i‡(!
	`_INVOKABLE2
(
group_£èâr
, 
poﬁ
))

234 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

236 
poﬁ
->
desc
,Öoﬁ, 
gid
, 
©å
->
limô_∑øŒe_èsks
);

238 
	`mem˝y
(&
©å0
, 
©å
, (*attr));

239 
	`_INVOKE2
(
group_£èâr
, 
poﬁ
, 
gid
, &
©å0
);

240 
	}
}

242 
EXPORT
 
gscheduÀr_©å
 *

243 
	$°poﬁ_group_gë©å
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
gscheduÀr_©å
 *
©å
)

245 
scheduÀr_©å
 
©å0
;

247 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

248 
poﬁ_°©
 
p°©
;

250 
	`°poﬁ_°©
(
poﬁ
, &
p°©
);

251 
©å
->
limô_∑øŒe_èsks
 = 
p°©
.
maxthªads
;

252 
©å
->
ª˚ive_bíifôs
 = 1;

253  
©å
;

256 i‡(!
	`_INVOKABLE2
(
group_gë©å
, 
poﬁ
Ë|| 
	`_INVOKE2
(group_gë©å,Öoﬁ, 
gid
, &
©å0
))

257  
NULL
;

259 
	`mem˝y
(
©å
, &
©å0
, (*attr));

260  
©å
;

261 
	}
}

263 
EXPORT
 

264 
	$°poﬁ_group_su•íd
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
)

266 
e
;

268 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

270 
poﬁ
->
desc
,Öoﬁ, 
gid
, 
ms
);

272 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

273  
	`°poﬁ_su•íd
(
poﬁ
, 
ms
);

275 i‡(!
	`_INVOKABLE2
(
group_su•íd
, 
poﬁ
))

276  
POOL_ERR_NSUPPORT
;

278 i‡((
e
=
	`_INVOKE2
(
group_su•íd
, 
poﬁ
, 
gid
, 
ms
)))

279  
	`__°poﬁ_libîr‹
(
e
);

282 
	}
}

284 
EXPORT
 

285 
	$°poﬁ_group_su•íd_Æl
(
°poﬁ_t
 *
poﬁ
, 
ms
)

287 
e
;

289 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

291 
poﬁ
->
desc
,Öoﬁ, 
ms
);

293 i‡(!
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

294  
	`°poﬁ_su•íd
(
poﬁ
, 
ms
);

296 i‡(!
	`_INVOKABLE2
(
group_su•íd_Æl
, 
poﬁ
))

297  
POOL_ERR_NSUPPORT
;

299 i‡((
e
=
	`_INVOKE2
(
group_su•íd_Æl
, 
poﬁ
, 
ms
)))

300  
	`__°poﬁ_libîr‹
(
e
);

303 
	}
}

305 
EXPORT
 

306 
	$°poﬁ_group_ªsume
(
°poﬁ_t
 *
poﬁ
, 
gid
)

308 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

310 
poﬁ
->
desc
,Öoﬁ, 
gid
);

312 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

313 
	`°poﬁ_ªsume
(
poﬁ
);

315 i‡(
	`_INVOKABLE2
(
group_ªsume
, 
poﬁ
))

316 
	`_INVOKE2
(
group_ªsume
, 
poﬁ
, 
gid
);

317 
	}
}

319 
EXPORT
 

320 
	$°poﬁ_group_ªsume_Æl
(
°poﬁ_t
 *
poﬁ
)

322 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

324 
poﬁ
->
desc
,Öool);

326 i‡(!
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

327 
	`°poﬁ_ªsume
(
poﬁ
);

329 i‡(
	`_INVOKABLE2
(
group_ªsume_Æl
, 
poﬁ
))

330 
	`_INVOKE2
(
group_ªsume_Æl
, 
poﬁ
);

331 
	}
}

333 
EXPORT
 

334 
°poﬁ_group_add_routöe
(
°poﬁ_t
 *
poﬁ
, 
gid
, c⁄° *
«me
,

335 (*
èsk_run
)(
°èsk
 *
±ask
),

336 (*
èsk_îr_h™dÀr
)(
°èsk
 *
±ask
, 
ªas⁄s
),

337 *
èsk_¨g
, 
sch©å
 *
©å
)

339 
e
;

340 
˘ask_t
 *
±ask
;

342 i‡(!
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
)) {

343 i‡(
gid
)

344  
POOL_ERR_GROUP_NOT_FOUND
;

346  
	`°poﬁ_add_routöe
(
poﬁ
, 
«me
, 
èsk_run
, 
èsk_îr_h™dÀr
, 
èsk_¨g
, 
©å
);

354 
±ask
 = 
	`__°poﬁ_ˇche_gë
(
poﬁ
);

355 i‡(!
±ask
)

356  
POOL_ERR_NOMEM
;

358 
	`__°poﬁ_èsk_INIT
(
±ask
, 
«me
, 
èsk_run
, 
èsk_îr_h™dÀr
, 
èsk_¨g
);

359 
±ask
->
gid
 = gid;

361 i‡(
©å
)

362 
	`°poﬁ_èsk_£tsch©å
(
	`TASK_CAST_UP
(
±ask
), 
©å
);

368 i‡((
e
 = 
	`°poﬁ_èsk_queue
(
	`TASK_CAST_UP
(
±ask
))))

369 
	`__°poﬁ_ˇche_put
(
poﬁ
, 
±ask
);

371  
e
;

372 
	}
}

374 
EXPORT
 

375 
	$°poﬁ_group_ªmove_Æl
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
di•©ched_by_poﬁ
)

377 
lÊags
 = 
di•©ched_by_poﬁ
 ? 
eTASK_VM_F_REMOVE_BYPOOL
 : 
eTASK_VM_F_REMOVE
;

379 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

380  
	`°poﬁ_ªmove_Æl
(
poﬁ
, 
di•©ched_by_poﬁ
);

382 i‡(
	`_INVOKABLE2
(
group_ªmove_Æl
, 
poﬁ
)) {

383 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

385 
poﬁ
->
desc
,Öoﬁ, 
gid
, 
di•©ched_by_poﬁ
);

387  
	`_INVOKE2
(
group_ªmove_Æl
, 
poﬁ
, 
gid
, 
di•©ched_by_poﬁ
);

389 } i‡(
	`_INVOKABLE2
(
group_m¨k_Æl
, 
poﬁ
))

390  
	`_INVOKE2
(
group_m¨k_Æl
, 
poﬁ
, 
gid
, 
lÊags
);

393 
	}
}

395 
EXPORT
 

396 
	$°poﬁ_group_m¨k_Æl
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
lÊags
)

398 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

400 
poﬁ
->
desc
,Öoﬁ, 
gid
, 
lÊags
);

402 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

403  
	`°poﬁ_m¨k_Æl
(
poﬁ
, 
lÊags
);

405 i‡(!
	`_INVOKABLE2
(
group_m¨k_Æl
, 
poﬁ
))

406  
POOL_ERR_NSUPPORT
;

408  
	`_INVOKE2
(
group_m¨k_Æl
, 
poﬁ
, 
gid
, 
lÊags
);

409 
	}
}

411 
EXPORT
 

412 
	$°poﬁ_group_m¨k_cb
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
WÆk_cb
 
wcb
, *
wcb_¨g
)

414 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

415  
	`°poﬁ_m¨k_cb
(
poﬁ
, 
wcb
, 
wcb_¨g
);

417 i‡(!
	`_INVOKABLE2
(
group_m¨k_cb
, 
poﬁ
))

418  
POOL_ERR_NSUPPORT
;

420  
	`_INVOKE2
(
group_m¨k_cb
, 
poﬁ
, 
gid
, (
Visô_cb
)
wcb
, 
wcb_¨g
);

421 
	}
}

423 
EXPORT
 

424 
	$°poﬁ_group_waô_Æl
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
)

426 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

428 
poﬁ
->
desc
,Öoﬁ, 
gid
, 
ms
);

430 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

431  
	`°poﬁ_waô_Æl
(
poﬁ
, 
ms
);

433 i‡(!
	`_INVOKABLE2
(
group_waô_Æl
, 
poﬁ
))

434  
POOL_ERR_NSUPPORT
;

436  
	`_INVOKE2
(
group_waô_Æl
, 
poﬁ
, 
gid
, 
ms
);

437 
	}
}

439 
EXPORT
 

440 
	$°poﬁ_group_waô_cb
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
WÆk_cb
 
wcb
, *
wcb_¨g
, 
ms
)

442 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

443  
	`°poﬁ_waô_cb
(
poﬁ
, 
wcb
, 
wcb_¨g
, 
ms
);

445 i‡(!
	`_INVOKABLE2
(
group_waô_cb
, 
poﬁ
))

446  
POOL_ERR_NSUPPORT
;

448  
	`_INVOKE2
(
group_waô_cb
, 
poﬁ
, 
gid
, (
Visô_cb
)
wcb
, 
wcb_¨g
, 
ms
);

449 
	}
}

451 
EXPORT
 

452 
	$°poﬁ_group_waô_™y
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
)

454 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

455  
	`°poﬁ_waô_™y
(
poﬁ
, 
ms
);

457 i‡(!
	`_INVOKABLE2
(
group_waô_™y
, 
poﬁ
))

458  
POOL_ERR_NSUPPORT
;

460  
	`_INVOKE2
(
group_waô_™y
, 
poﬁ
, 
gid
, 
ms
);

461 
	}
}

463 
EXPORT
 

464 
	$°poﬁ_group_thrŸée_íabÀ
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
íabÀ
)

466 
	`MSG_log
(
M_POOL
, 
LOG_INFO
,

468 
poﬁ
->
desc
,Öoﬁ, 
íabÀ
 ? "ENABLING" : "DISABLING", 
gid
);

470 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

471 
	`°poﬁ_thrŸée_íabÀ
(
poﬁ
, 
íabÀ
);

473 i‡(
	`_INVOKABLE2
(
group_thrŸée_íabÀ
, 
poﬁ
))

474 
	`_INVOKE2
(
group_thrŸée_íabÀ
, 
poﬁ
, 
gid
, 
íabÀ
);

475 
	}
}

477 
EXPORT
 

478 
	$°poﬁ_group_thrŸée_waô
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
)

480 i‡(!
gid
 && !
	`_INVOKABLE2
(
group_¸óã
, 
poﬁ
))

481  
	`°poﬁ_thrŸée_waô
(
poﬁ
, 
ms
);

483 i‡(!
	`_INVOKABLE2
(
group_thrŸée_waô
, 
poﬁ
))

486  
	`_INVOKE2
(
group_thrŸée_waô
, 
poﬁ
, 
gid
, 
ms
);

487 
	}
}

489 
EXPORT
 

490 
	$°poﬁ_group_dñëe
(
°poﬁ_t
 *
poﬁ
, 
gid
)

492 i‡(
	`_INVOKABLE2
(
group_dñëe
, 
poﬁ
))

493 
	`_INVOKE2
(
group_dñëe
, 
poﬁ
, 
gid
);

494 
	}
}

	@stpool_group.h

12 #i‚de‡ 
__STPOOL_GROUP_H__


13 
	#__STPOOL_GROUP_H__


	)

15 
	~"°poﬁ.h
"

20 
	sgscheduÀr_©å
 {

43 
	mlimô_∑øŒe_èsks
;

52 
	mª˚ive_bíifôs
;

114 
	s°èsk_group_°©
 {

118 
	mgid
;

123 *
	mdesc
;

128 
size_t
 
	mdesc_Àngth
;

133 
gscheduÀr_©å
 
	m©å
;

138 
time_t
 
	m¸óãd
;

143 
	mwaôîs
;

151 
	msu•íded
;

158 
	mthrŸée_íabÀd
;

163 
	m¥iq_num
;

169 
	m≈ídögs
;

175 
	mƒu¬ögs
;

182 
	mndi•©chögs
;

199 
EXPORT
 
°poﬁ_èsk_£t_gid
(
°èsk
 *
±sk
, 
gid
);

204 
EXPORT
 
°poﬁ_èsk_gid
(
°èsk
 *
±sk
);

218 
EXPORT
 c⁄° *
°poﬁ_èsk_g«me2
(
°èsk
 *
±sk
, *
«me_buf„r
, 
Àn
);

223 
	#°poﬁ_èsk_g«me
(
±sk
Ë
	`°poﬁ_èsk_g«me2
’tsk, 
NULL
, 0)

	)

239 
EXPORT
 
°poﬁ_èsk_gthrŸée_waô
(
°èsk
 *
±sk
, 
ms
);

258 
EXPORT
 
°poﬁ_èsk_pgthrŸée_waô
(
°èsk
 *
±sk
, 
ms
);

278 
EXPORT
 
°poﬁ_group_¸óã
(
°poﬁ_t
 *
poﬁ
, c⁄° *
«me
, 
gscheduÀr_©å
 *
©å
, 
¥iq_num
, 
su•íd
);

288 
EXPORT
 
°poﬁ_group_id
(
°poﬁ_t
 *
poﬁ
, c⁄° *
«me
);

303 
EXPORT
 c⁄° *
°poﬁ_group_«me2
(
°poﬁ_t
 *
poﬁ
, 
gid
, *
«me_buf„r
, 
Àn
);

308 
	#°poﬁ_group_«me
(
poﬁ
, 
id
Ë
	`°poﬁ_group_«me2
’oﬁ, id, 
NULL
, 0)

	)

319 
EXPORT
 
°poﬁ_group_£èâr
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
gscheduÀr_©å
 *
©å
);

330 
EXPORT
 
gscheduÀr_©å
 *
°poﬁ_group_gë©å
(
°poﬁ_t
 *
poﬁ
, 
gid
, gscheduÀr_©å *
©å
);

352 
EXPORT
 
°poﬁ_group_su•íd
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
);

366 
EXPORT
 
°poﬁ_group_su•íd_Æl
(
°poﬁ_t
 *
poﬁ
, 
ms
);

382 
EXPORT
 
°poﬁ_group_ªsume
(
°poﬁ_t
 *
poﬁ
, 
gid
);

389 
EXPORT
 
°poﬁ_group_ªsume_Æl
(
°poﬁ_t
 *
poﬁ
);

404 
EXPORT
 
°èsk_group_°©
 *
°poﬁ_group_°©
(
°poﬁ_t
 *
poﬁ
, 
gid
, °èsk_group_°© *
°©
);

415 
EXPORT
 
°poﬁ_group_°©_Æl
(
°poﬁ_t
 *
poﬁ
, 
°èsk_group_°©
 **
°©
);

441 
EXPORT
 
°poﬁ_group_add_routöe
(
°poﬁ_t
 *
poﬁ
, 
gid
, c⁄° *
«me
,

442 (*
èsk_run
)(
°èsk
 *
±sk
),

443 (*
èsk_îr_h™dÀr
)(
°èsk
 *
±sk
, 
ªas⁄s
),

444 *
èsk_¨g
, 
sch©å
 *
©å
);

461 
EXPORT
 
	`°poﬁ_group_ªmove_Æl
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
di•©ched_by_poﬁ
);

472 
EXPORT
 
	`°poﬁ_group_m¨k_Æl
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
lÊags
);

491 
EXPORT
 
	`°poﬁ_group_m¨k_cb
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
WÆk_cb
 
wcb
, *
wcb_¨gs
);

506 
EXPORT
 
	`°poﬁ_group_waô_Æl
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
);

521 
EXPORT
 
	`°poﬁ_group_waô_™y
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
);

542 
EXPORT
 
	`°poﬁ_group_waô_cb
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
WÆk_cb
 
wcb
, *
wcb_¨gs
, 
ms
);

561 
EXPORT
 
	`°poﬁ_group_thrŸée_waô
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
ms
);

576 
EXPORT
 
	`°poﬁ_group_thrŸée_íabÀ
(
°poﬁ_t
 *
poﬁ
, 
gid
, 
íabÀ
);

594 
EXPORT
 
	`°poﬁ_group_dñëe
(
°poﬁ_t
 *
poﬁ
, 
gid
);

	@stpool_internal.h

1 #i‚de‡
__STPOOL_INTERNAL_H__


2 
	#__STPOOL_INTERNAL_H__


	)

13 
	~"objpoﬁ.h
"

14 
	~"°poﬁ.h
"

15 
	~"˝oﬁ_Á˘‹y.h
"

17 
	#M_POOL
 "poﬁ"

	)

19 
	#_INVOKABLE0
(
func
, 
p
Ë(’)->
me
->me.fun¯!
NULL
)

	)

20 
	#_INVOKABLE2
(
func
, 
p
Ë(’)->
me
->
advme
.fun¯!
NULL
)

	)

22 
	#_INVOKE0
(
func
, 
p
, ...Ë’)->
me
->me.
	`func
(’)->
˘x
, ##
__VA_ARGS__
)

	)

23 
	#_INVOKE2
(
func
, 
p
, ...Ë’)->
me
->
advme
.
	`func
(’)->
˘x
, ##
__VA_ARGS__
)

	)

25 
	#TASK_CAST_UP
(
±sk
Ë((
°èsk
 *Ìtsk)

	)

26 
	#TASK_CAST_DOWN
(
±sk
Ë((
˘ask_t
 *Ìtsk)

	)

27 
	#TASK_CAST_CB_RUN
(
run
Ë(((*)(
˘ask_t
 *)Ïun)

	)

28 
	#TASK_CAST_CB_ERR
(
îr
Ë(((*)(
˘ask_t
 *, )Îº)

	)

30 
	seCAPs_c⁄v_èbÀ
 {

31 c⁄° *
	mdesc
;

32 
	mlibeCAP
, 
	mÁc_efunc
;

33 } 
	g__c⁄v
[] = {

34 {"eCAP_F_DYNAMIC", 
eCAP_F_DYNAMIC
, 
eFUNC_F_DYNAMIC_THREADS
},

35 {"eCAP_F_FIXED", 
eCAP_F_FIXED
, 0},

36 {"eCAP_F_PRIORITY", 
eCAP_F_PRIORITY
, 
eFUNC_F_PRIORITY
},

37 {"eCAP_F_THROTTLE", 
eCAP_F_THROTTLE
, 0},

38 {"eCAP_F_SUSPEND", 
eCAP_F_SUSPEND
, 0},

39 {"eCAP_F_TRACE", 
eCAP_F_TRACE
, 
eFUNC_F_TRACEABLE
},

40 {"eCAP_F_WAIT_ANY", 
eCAP_F_WAIT_ANY
, 0},

41 {"eCAP_F_WAIT_ALL", 
eCAP_F_WAIT_ALL
, 0},

42 {"eCAP_F_DISABLEQ", 
eCAP_F_DISABLEQ
, 
eFUNC_F_DISABLEQ
},

43 {"eCAP_F_REMOVE_BYPOOL", 
eCAP_F_REMOVE_BYPOOL
, 0},

44 {"eCAP_F_ROUTINE", 
eCAP_F_ROUTINE
, 0},

45 {"eCAP_F_CUSTOM_TASK", 
eCAP_F_CUSTOM_TASK
, 
eFUNC_F_TASK_EX
},

46 {"eCAP_F_TASK_WAIT", 
eCAP_F_TASK_WAIT
, 
eFUNC_F_TASK_WAITABLE
},

47 {"eCAP_F_TASK_WAIT_ALL", 
eCAP_F_TASK_WAIT_ALL
, 0},

48 {"eCAP_F_TASK_WAIT_ANY", 
eCAP_F_TASK_WAIT_ANY
, 0},

49 {"eCAP_F_GROUP", 
eCAP_F_GROUP
, 
eFUNC_F_ADVANCE
},

50 {"eCAP_F_GROUP_THROTTLE", 
eCAP_F_GROUP_THROTTLE
, 0},

51 {"eCAP_F_GROUP_WAIT_ANY", 
eCAP_F_GROUP_WAIT_ANY
, 0},

52 {"eCAP_F_GROUP_WAIT_ALL", 
eCAP_F_GROUP_WAIT_ALL
, 0},

53 {"eCAP_F_GROUP_SUSPEND", 
eCAP_F_GROUP_SUSPEND
, 0},

56 
ölöe
 

57 
	$__cou¡_funcs
(*
íåy
, 
Àn
)

59 
n
 = 0;

61 ;--
Àn
>=0;)

62 i‡(
íåy
[
Àn
])

63 ++ 
n
;

65  
n
;

66 
	}
}

69 
	$__íum_CAPs2
(
efuncs
, c⁄° 
˝oﬁ_mëhod_t
 *c⁄° 
mëhod
, *
nfuncs
)

71 
idx
;

72 
libeCAPs
 = 0;

74 
idx
=0; idx<(
__c⁄v
)/(*__conv); idx++) {

75 i‡(
efuncs
 & 
__c⁄v
[
idx
].
Ác_efunc
)

76 
libeCAPs
 |
__c⁄v
[
idx
].
libeCAP
;

78 i‡(
nfuncs
)

79 *
nfuncs
 = 
	`__cou¡_funcs
((*)&
mëhod
->
me
, (method->me)/(*)) - 1;

84 
libeCAPs
 |
eCAP_F_SUSPEND
|
eCAP_F_REMOVE_BYPOOL
;

86 i‡(!(
libeCAPs
 & 
eCAP_F_DYNAMIC
))

87 
libeCAPs
 |
eCAP_F_FIXED
;

89 i‡(
mëhod
->
me
.
ˇche_gë
)

90 
libeCAPs
 |
eCAP_F_ROUTINE
;

92 i‡(
mëhod
->
me
.
waô_Æl
)

93 
libeCAPs
 |
eCAP_F_WAIT_ALL
;

95 i‡(
mëhod
->
extme
.
thrŸée_íabÀ
)

96 
libeCAPs
 |
eCAP_F_THROTTLE
;

98 i‡(
mëhod
->
extme
.
waô_™y
)

99 
libeCAPs
 |
eCAP_F_WAIT_ANY
;

101 i‡(
mëhod
->
extme
.
waô_™y2
)

102 
libeCAPs
 |
eCAP_F_TASK_WAIT_ANY
;

104 i‡(
mëhod
->
extme
.
èsk_waô
)

105 
libeCAPs
 |
eCAP_F_TASK_WAIT
|
eCAP_F_WAIT_ALL
;

107 i‡(
eFUNC_F_ADVANCE
 & 
efuncs
) {

108 i‡(
mëhod
->
advme
.
group_waô_™y
)

109 
libeCAPs
 |
eCAP_F_GROUP_WAIT_ANY
;

111 i‡(
mëhod
->
advme
.
group_waô_Æl
)

112 
libeCAPs
 |
eCAP_F_GROUP_WAIT_ALL
;

114 i‡(
mëhod
->
advme
.
group_thrŸée_íabÀ
)

115 
libeCAPs
 |
eCAP_F_GROUP_THROTTLE
;

117 i‡(
mëhod
->
advme
.
group_su•íd
)

118 
libeCAPs
 |
eCAP_F_GROUP_SUSPEND
;

120 i‡(
nfuncs
)

121 *
nfuncs
 +
	`__cou¡_funcs
((*)&
mëhod
->
advme
, (method->advme)/(*));

124  
libeCAPs
;

125 
	}
}

127 
ölöe
 

128 
	$__íum_CAPs
(c⁄° 
˝oﬁ_Á˘‹y_t
 *c⁄° 
Ác
, *
nfuncs
)

130  
	`__íum_CAPs2
(
Ác
->
efuncs
, fac->
mëhod
, 
nfuncs
);

131 
	}
}

133 
ölöe
 *

134 
	$__eCAPs_desc
(
libeCAPs
, *
eCAPs_buf„r
)

136 
idx
, 
n
=0;

142 
eCAPs_buf„r
[0] = '\0';

143 
idx
=0; idx<(
__c⁄v
)/(*__conv); idx++) {

144 i‡(
libeCAPs
 & 
__c⁄v
[
idx
].
libeCAP
) {

145 i‡(1 !++ 
n
)

146 
	`°rˇt
(
eCAPs_buf„r
, "|");

147 
	`°rˇt
(
eCAPs_buf„r
, 
__c⁄v
[
idx
].
desc
);

151  
eCAPs_buf„r
;

152 
	}
}

155 
ölöe
 

156 
__°poﬁ_èsk_INIT
(
˘ask_t
 *
±sk
, c⁄° *
«me
,

157 (*
run
)(
°èsk
 *), (*
îr_h™dÀr
)(°èsk *, ), *
¨g
)

159 
±sk
->
èsk_desc
 = 
«me
;

160 
±sk
->
èsk_run
 = 
	`TASK_CAST_CB_RUN
(
run
);

161 
±sk
->
èsk_îr_h™dÀr
 = 
	`TASK_CAST_CB_ERR
(
îr_h™dÀr
);

162 
±sk
->
èsk_¨g
 = 
¨g
;

163 
±sk
->
èsk_code
 = 0;

164 
±sk
->
ªf
 = 0;

165 
±sk
->
¥i
 = 0;

166 
±sk
->
f_°©
 = 0;

167 
±sk
->
gid
 = 0;

168 
±sk
->
u£r_Êags
 = 0;

169 
±sk
->
¥i_pﬁicy
 = 
ï_SCHE_BACK
;

170 
	}
}

172 
ölöe
 

173 
	$__°poﬁ_èsk_£t_p
(
˘ask_t
 *
±ask
, 
˝oﬁ_t
 *
poﬁ
)

175 
e
;

176 
	`as£π
 (!
±ask
->
ªf
);

178 i‡(
poﬁ
 && 
	`_INVOKABLE0
(
èsk_öô
,Öool) &&

179 (
e
 = 
	`_INVOKE0
(
èsk_öô
, 
poﬁ
, 
±ask
)))

180  
e
;

182 
±ask
->
f_vmÊags
 &~
eTASK_VM_F_DISABLE_QUEUE
;

183 
±ask
->
f_vmÊags
 |
eTASK_VM_F_ENABLE_QUEUE
;

184 
±ask
->
poﬁ
 =Öool;

186 
	}
}

188 
smˇche_t
 *
___smc
;

191 
	$__°poﬁ_öô_globÆ_èsk_ˇche
()

193 
objpoﬁ_t
 
___dummy_objp
;

195 i‡(
	`objpoﬁ_˘‹
(&
___dummy_objp
, "FObjp-C-GlobÆ-èsk", 
	`°poﬁ_èsk_size
(), 0)) {

196 
	`MSG_log
(
M_POOL
, 
LOG_ERR
,

198 
	`ab‹t
();

200 
___smc
 = 
	`objpoﬁ_gë_ˇche
(&
___dummy_objp
);

201 
	}
}

203 
ölöe
 
˘ask_t
 *

204 
	$__°poﬁ_ˇche_gë
(
°poﬁ_t
 *
poﬁ
)

206 
˘ask_t
 *
±ask
 = 
NULL
;

208 i‡(
poﬁ
 && 
	`_INVOKABLE0
(
ˇche_gë
,Öool)) {

209 i‡((
±ask
 = 
	`_INVOKE0
(
ˇche_gë
, 
poﬁ
)))

210 
±ask
->
poﬁ
 =Öool;

213 
OSPX_±hªad_⁄˚_t
 
__o˘l
 = 
OSPX_PTHREAD_ONCE_INIT
;

215 
	`OSPX_±hªad_⁄˚
(&
__o˘l
, 
__°poﬁ_öô_globÆ_èsk_ˇche
);

216 
	`as£π
 (!
poﬁ
 ||Öoﬁ->
efuncs
 & 
eFUNC_F_TASK_EX
);

220 i‡(
___smc
 && (
±ask
 = 
	`smˇche_gë
(___smc, 1))) {

221 i‡(
poﬁ
 && 
	`__°poﬁ_èsk_£t_p
(
±ask
,Öool)) {

222 
	`smˇche_add_dú
(
___smc
, 
±ask
);

223  
NULL
;

228  
±ask
;

229 
	}
}

231 
ölöe
 

232 
	$__°poﬁ_ˇche_put
(
°poﬁ_t
 *
poﬁ
, 
˘ask_t
 *
±ask
)

234 i‡(
poﬁ
 && 
	`_INVOKABLE0
(
ˇche_gë
,Öool))

235 
	`_INVOKE0
(
ˇche_put
, 
poﬁ
, 
±ask
);

237 
	`smˇche_add_dú
(
___smc
, 
±ask
);

238 
	}
}

240 
ölöe
 

241 
	$__°poﬁ_libîr‹
(
eÁc
)

243  
eÁc
;

244 
	}
}

	@
1
.
0
67
1569
examples/demo-group.c
examples/demo-pri.c
examples/demo-sche.c
examples/demo.c
msglog.c
msglog.h
pool/com/cpool_com_internal.h
pool/com/cpool_com_method.c
pool/com/cpool_com_method.h
pool/com/cpool_com_priq.h
pool/core/cache_creater.h
pool/core/cpool_core.c
pool/core/cpool_core.h
pool/core/cpool_core_gc.c
pool/core/cpool_core_gc.h
pool/core/cpool_core_struct.h
pool/core/cpool_core_thread_status.h
pool/core/list.h
pool/core/objpool.c
pool/core/objpool.h
pool/core/ospx.c
pool/core/ospx.h
pool/core/ospx_compatible.h
pool/core/ospx_errno.h
pool/core/ospx_error.c
pool/core/ospx_error.h
pool/core/ospx_type.h
pool/core/sm_cache.c
pool/core/sm_cache.h
pool/core/timer.c
pool/core/timer.h
pool/cpool_factory.c
pool/cpool_factory.h
pool/cpool_method.h
pool/cpool_wait.c
pool/cpool_wait.h
pool/gp/cpool_gp_advance_method.c
pool/gp/cpool_gp_core_method.c
pool/gp/cpool_gp_entry.c
pool/gp/cpool_gp_entry.h
pool/gp/cpool_gp_extend_method.c
pool/gp/cpool_gp_factory.c
pool/gp/cpool_gp_factory.h
pool/gp/cpool_gp_internal.c
pool/gp/cpool_gp_internal.h
pool/gp/cpool_gp_method.c
pool/gp/cpool_gp_method.h
pool/gp/cpool_gp_struct.h
pool/gp/cpool_gp_wait.c
pool/gp/cpool_gp_wait.h
pool/gp/cpool_gp_wait_internal.h
pool/rt/cpool_rt_core_method.c
pool/rt/cpool_rt_extend_method.c
pool/rt/cpool_rt_factory.c
pool/rt/cpool_rt_factory.h
pool/rt/cpool_rt_internal.c
pool/rt/cpool_rt_internal.h
pool/rt/cpool_rt_method.c
pool/rt/cpool_rt_method.h
pool/rt/cpool_rt_scheduler_dump.c
pool/rt/cpool_rt_struct.h
stpool.c
stpool.h
stpool_caps.h
stpool_group.c
stpool_group.h
stpool_internal.h
